
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007898  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  08007a28  08007a28  00008a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008428  08008428  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  08008428  08008428  00009428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008430  08008430  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008430  08008430  00009430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008434  08008434  00009434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008438  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a074  2**0
                  CONTENTS
 10 .bss          00017140  20000074  20000074  0000a074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200171b4  200171b4  0000a074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013234  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030bf  00000000  00000000  0001d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  00020398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e05  00000000  00000000  000215a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023901  00000000  00000000  000223ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e64  00000000  00000000  00045cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5075  00000000  00000000  0005ab12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012fb87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000578c  00000000  00000000  0012fbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00135358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a10 	.word	0x08007a10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007a10 	.word	0x08007a10

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <AppTimerStatsInit>:
//	const char* msg = "UART Initialized\r\n";
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//}
// UART TEST END

void AppTimerStatsInit(void) {
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	g_osRuntimeCounter = 0;
 8000594:	4b03      	ldr	r3, [pc, #12]	@ (80005a4 <AppTimerStatsInit+0x14>)
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	200000d8 	.word	0x200000d8

080005a8 <AppTimerStatsValue>:

uint32_t AppTimerStatsValue(void) {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	 return g_osRuntimeCounter;
 80005ac:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <AppTimerStatsValue+0x14>)
 80005ae:	681b      	ldr	r3, [r3, #0]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000d8 	.word	0x200000d8

080005c0 <LED_Task>:
}

BaseType_t xReturned;
TaskHandle_t xHandle=NULL;

void LED_Task( void ){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80005ca:	480c      	ldr	r0, [pc, #48]	@ (80005fc <LED_Task+0x3c>)
 80005cc:	f001 fc06 	bl	8001ddc <HAL_GPIO_WritePin>
	for(;;){

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET );
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d6:	4809      	ldr	r0, [pc, #36]	@ (80005fc <LED_Task+0x3c>)
 80005d8:	f001 fc00 	bl	8001ddc <HAL_GPIO_WritePin>
		vTaskDelay(500);
 80005dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005e0:	f003 fecc 	bl	800437c <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET );
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ea:	4804      	ldr	r0, [pc, #16]	@ (80005fc <LED_Task+0x3c>)
 80005ec:	f001 fbf6 	bl	8001ddc <HAL_GPIO_WritePin>
		vTaskDelay(500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f4:	f003 fec2 	bl	800437c <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET );
 80005f8:	bf00      	nop
 80005fa:	e7e9      	b.n	80005d0 <LED_Task+0x10>
 80005fc:	40020c00 	.word	0x40020c00

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f001 f929 	bl	800185c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f85d 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8ef 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f8c3 	bl	800079c <MX_USART2_UART_Init>
  //xTaskCreate(LED_Task, "LED", 128, NULL, 3, NULL);


  // 重要！！在創建task時請依照下方格式將task的創見細節存入task table(直接call RegisterUserTask())，否則mem抓不到
  TaskHandle_t hLed;
  if (xTaskCreate(LED_Task, "LED", 128, NULL, 3, &hLed) == pdPASS){
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	2303      	movs	r3, #3
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2300      	movs	r3, #0
 8000622:	2280      	movs	r2, #128	@ 0x80
 8000624:	4921      	ldr	r1, [pc, #132]	@ (80006ac <main+0xac>)
 8000626:	4822      	ldr	r0, [pc, #136]	@ (80006b0 <main+0xb0>)
 8000628:	f003 fd66 	bl	80040f8 <xTaskCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d105      	bne.n	800063e <main+0x3e>
      RegisterUserTask(hLed, "LED", 128);
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2280      	movs	r2, #128	@ 0x80
 8000636:	491d      	ldr	r1, [pc, #116]	@ (80006ac <main+0xac>)
 8000638:	4618      	mov	r0, r3
 800063a:	f000 faf9 	bl	8000c30 <RegisterUserTask>
  }

  TaskHandle_t hShell;
  if(xTaskCreate(ShellTask, "ShellTask", 4096, NULL, 2, &hShell) == pdPASS){
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	2302      	movs	r3, #2
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800064e:	4919      	ldr	r1, [pc, #100]	@ (80006b4 <main+0xb4>)
 8000650:	4819      	ldr	r0, [pc, #100]	@ (80006b8 <main+0xb8>)
 8000652:	f003 fd51 	bl	80040f8 <xTaskCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d106      	bne.n	800066a <main+0x6a>
	  RegisterUserTask(hShell, "ShellTask", 4096
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000662:	4914      	ldr	r1, [pc, #80]	@ (80006b4 <main+0xb4>)
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fae3 	bl	8000c30 <RegisterUserTask>
			  );
  }

  xLogQueue = xQueueCreate(16, sizeof(LogMsg_t));
 800066a:	2200      	movs	r2, #0
 800066c:	2180      	movs	r1, #128	@ 0x80
 800066e:	2010      	movs	r0, #16
 8000670:	f003 f8f4 	bl	800385c <xQueueGenericCreate>
 8000674:	4603      	mov	r3, r0
 8000676:	4a11      	ldr	r2, [pc, #68]	@ (80006bc <main+0xbc>)
 8000678:	6013      	str	r3, [r2, #0]

  TaskHandle_t hLogger;
  if(xTaskCreate(LoggerTask, "Logger", 256, NULL, 2, &hLogger) == pdPASS){
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2302      	movs	r3, #2
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000688:	490d      	ldr	r1, [pc, #52]	@ (80006c0 <main+0xc0>)
 800068a:	480e      	ldr	r0, [pc, #56]	@ (80006c4 <main+0xc4>)
 800068c:	f003 fd34 	bl	80040f8 <xTaskCreate>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d106      	bne.n	80006a4 <main+0xa4>
	  RegisterUserTask(hLogger, "Logger", 256);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800069c:	4908      	ldr	r1, [pc, #32]	@ (80006c0 <main+0xc0>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fac6 	bl	8000c30 <RegisterUserTask>
  }


  vTaskStartScheduler();
 80006a4:	f003 ff08 	bl	80044b8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <main+0xa8>
 80006ac:	08007a5c 	.word	0x08007a5c
 80006b0:	080005c1 	.word	0x080005c1
 80006b4:	08007a60 	.word	0x08007a60
 80006b8:	08001291 	.word	0x08001291
 80006bc:	20000260 	.word	0x20000260
 80006c0:	08007a6c 	.word	0x08007a6c
 80006c4:	08000bb9 	.word	0x08000bb9

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	@ 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 f8d2 	bl	8006880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	@ (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	@ (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000738:	2308      	movs	r3, #8
 800073a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800073c:	2332      	movs	r3, #50	@ 0x32
 800073e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000740:	2304      	movs	r3, #4
 8000742:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000744:	2307      	movs	r3, #7
 8000746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fb5f 	bl	8001e10 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f9c6 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fdc0 	bl	8002300 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000786:	f000 f9af 	bl	8000ae8 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	@ 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <MX_USART2_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f002 fa82 	bl	8002cdc <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f983 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000090 	.word	0x20000090
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4ba2      	ldr	r3, [pc, #648]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4aa1      	ldr	r2, [pc, #644]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b9f      	ldr	r3, [pc, #636]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b9b      	ldr	r3, [pc, #620]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a9a      	ldr	r2, [pc, #616]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b98      	ldr	r3, [pc, #608]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b94      	ldr	r3, [pc, #592]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a93      	ldr	r2, [pc, #588]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b91      	ldr	r3, [pc, #580]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b8d      	ldr	r3, [pc, #564]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a8c      	ldr	r2, [pc, #560]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b8a      	ldr	r3, [pc, #552]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b86      	ldr	r3, [pc, #536]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a85      	ldr	r2, [pc, #532]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b83      	ldr	r3, [pc, #524]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b7f      	ldr	r3, [pc, #508]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a7e      	ldr	r2, [pc, #504]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b7c      	ldr	r3, [pc, #496]	@ (8000a94 <MX_GPIO_Init+0x2a4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2108      	movs	r1, #8
 80008b2:	4879      	ldr	r0, [pc, #484]	@ (8000a98 <MX_GPIO_Init+0x2a8>)
 80008b4:	f001 fa92 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2101      	movs	r1, #1
 80008bc:	4877      	ldr	r0, [pc, #476]	@ (8000a9c <MX_GPIO_Init+0x2ac>)
 80008be:	f001 fa8d 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c2:	2200      	movs	r2, #0
 80008c4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008c8:	4875      	ldr	r0, [pc, #468]	@ (8000aa0 <MX_GPIO_Init+0x2b0>)
 80008ca:	f001 fa87 	bl	8001ddc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ce:	2308      	movs	r3, #8
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	486c      	ldr	r0, [pc, #432]	@ (8000a98 <MX_GPIO_Init+0x2a8>)
 80008e6:	f001 f8dd 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4866      	ldr	r0, [pc, #408]	@ (8000a9c <MX_GPIO_Init+0x2ac>)
 8000902:	f001 f8cf 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000906:	2308      	movs	r3, #8
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000916:	2305      	movs	r3, #5
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	485e      	ldr	r0, [pc, #376]	@ (8000a9c <MX_GPIO_Init+0x2ac>)
 8000922:	f001 f8bf 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	485a      	ldr	r0, [pc, #360]	@ (8000aa4 <MX_GPIO_Init+0x2b4>)
 800093c:	f001 f8b2 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000940:	2310      	movs	r3, #16
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000950:	2306      	movs	r3, #6
 8000952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4852      	ldr	r0, [pc, #328]	@ (8000aa4 <MX_GPIO_Init+0x2b4>)
 800095c:	f001 f8a2 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000960:	23e0      	movs	r3, #224	@ 0xe0
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000970:	2305      	movs	r3, #5
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	484a      	ldr	r0, [pc, #296]	@ (8000aa4 <MX_GPIO_Init+0x2b4>)
 800097c:	f001 f892 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000980:	2304      	movs	r3, #4
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4845      	ldr	r0, [pc, #276]	@ (8000aa8 <MX_GPIO_Init+0x2b8>)
 8000994:	f001 f886 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000998:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009aa:	2305      	movs	r3, #5
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	483c      	ldr	r0, [pc, #240]	@ (8000aa8 <MX_GPIO_Init+0x2b8>)
 80009b6:	f001 f875 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ba:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009be:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4833      	ldr	r0, [pc, #204]	@ (8000aa0 <MX_GPIO_Init+0x2b0>)
 80009d4:	f001 f866 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009d8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ea:	2306      	movs	r3, #6
 80009ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4829      	ldr	r0, [pc, #164]	@ (8000a9c <MX_GPIO_Init+0x2ac>)
 80009f6:	f001 f855 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4825      	ldr	r0, [pc, #148]	@ (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000a10:	f001 f848 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a14:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a26:	230a      	movs	r3, #10
 8000a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481c      	ldr	r0, [pc, #112]	@ (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000a32:	f001 f837 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a36:	2320      	movs	r3, #32
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4815      	ldr	r0, [pc, #84]	@ (8000aa0 <MX_GPIO_Init+0x2b0>)
 8000a4a:	f001 f82b 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a4e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a54:	2312      	movs	r3, #18
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a60:	2304      	movs	r3, #4
 8000a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480f      	ldr	r0, [pc, #60]	@ (8000aa8 <MX_GPIO_Init+0x2b8>)
 8000a6c:	f001 f81a 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a74:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_GPIO_Init+0x2a8>)
 8000a86:	f001 f80d 	bl	8001aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3730      	adds	r7, #48	@ 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400

08000aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a09      	ldr	r2, [pc, #36]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d101      	bne.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000abe:	f000 feef 	bl	80018a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a06      	ldr	r2, [pc, #24]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d104      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	g_osRuntimeCounter++;
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ad4:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40001400 	.word	0x40001400
 8000ae4:	200000d8 	.word	0x200000d8

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <Error_Handler+0x8>

08000af4 <shell_write>:
};

#define CMD_COUNT (sizeof(cli_commands)/sizeof(cli_commands[0]))

// 將吃到的字元返還
static void shell_write(const char* s) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0a2      	sub	sp, #136	@ 0x88
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), HAL_MAX_DELAY);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff fb71 	bl	80001e4 <strlen>
 8000b02:	4603      	mov	r3, r0
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	4810      	ldr	r0, [pc, #64]	@ (8000b50 <shell_write+0x5c>)
 8000b0e:	f002 f935 	bl	8002d7c <HAL_UART_Transmit>

    if (g_logEnabled && xLogQueue) {
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <shell_write+0x60>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d015      	beq.n	8000b46 <shell_write+0x52>
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <shell_write+0x64>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d011      	beq.n	8000b46 <shell_write+0x52>
		LogMsg_t m;
		strncpy(m.text, s, LOG_LINE_MAX - 1);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	225f      	movs	r2, #95	@ 0x5f
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f005 feb0 	bl	8006890 <strncpy>
		m.text[LOG_LINE_MAX-1] = '\0';
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		xQueueSend(xLogQueue, &m, 0);
 8000b36:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <shell_write+0x64>)
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	f107 0108 	add.w	r1, r7, #8
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2200      	movs	r2, #0
 8000b42:	f002 feeb 	bl	800391c <xQueueGenericSend>
	}
}
 8000b46:	bf00      	nop
 8000b48:	3788      	adds	r7, #136	@ 0x88
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000090 	.word	0x20000090
 8000b54:	20004268 	.word	0x20004268
 8000b58:	20000260 	.word	0x20000260

08000b5c <log_printf>:

void log_printf(const char *fmt, ...)
{
 8000b5c:	b40f      	push	{r0, r1, r2, r3}
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b0a2      	sub	sp, #136	@ 0x88
 8000b62:	af00      	add	r7, sp, #0
    if (!g_logEnabled || !xLogQueue) return;
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <log_printf+0x54>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	f083 0301 	eor.w	r3, r3, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d117      	bne.n	8000ba2 <log_printf+0x46>
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <log_printf+0x58>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d013      	beq.n	8000ba2 <log_printf+0x46>
    LogMsg_t m;
    va_list ap;
    va_start(ap, fmt);
 8000b7a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b7e:	607b      	str	r3, [r7, #4]
    vsnprintf(m.text, LOG_LINE_MAX, fmt, ap);
 8000b80:	f107 0008 	add.w	r0, r7, #8
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000b8a:	2160      	movs	r1, #96	@ 0x60
 8000b8c:	f005 fe6a 	bl	8006864 <vsniprintf>
    va_end(ap);
    xQueueSend(xLogQueue, &m, 0);
 8000b90:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <log_printf+0x58>)
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	f107 0108 	add.w	r1, r7, #8
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f002 febe 	bl	800391c <xQueueGenericSend>
 8000ba0:	e000      	b.n	8000ba4 <log_printf+0x48>
    if (!g_logEnabled || !xLogQueue) return;
 8000ba2:	bf00      	nop
}
 8000ba4:	3788      	adds	r7, #136	@ 0x88
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr
 8000bb0:	20004268 	.word	0x20004268
 8000bb4:	20000260 	.word	0x20000260

08000bb8 <LoggerTask>:

void LoggerTask(void *param)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0a2      	sub	sp, #136	@ 0x88
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    LogMsg_t m;
    for (;;) {
        if (xQueueReceive(xLogQueue, &m, portMAX_DELAY) == pdPASS) {
 8000bc0:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <LoggerTask+0x68>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f107 0108 	add.w	r1, r7, #8
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 f843 	bl	8003c58 <xQueueReceive>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d1f3      	bne.n	8000bc0 <LoggerTask+0x8>
            // 寫進環形緩衝區
            memcpy(&g_ring[g_head], &m, sizeof(LogMsg_t));
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <LoggerTask+0x6c>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	01db      	lsls	r3, r3, #7
 8000bde:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <LoggerTask+0x70>)
 8000be0:	4413      	add	r3, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	4619      	mov	r1, r3
 8000bec:	f005 ff3b 	bl	8006a66 <memcpy>
            g_head  = (g_head + 1) % LOG_RING_SIZE;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <LoggerTask+0x6c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	425a      	negs	r2, r3
 8000bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bfc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000c00:	bf58      	it	pl
 8000c02:	4253      	negpl	r3, r2
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <LoggerTask+0x6c>)
 8000c08:	801a      	strh	r2, [r3, #0]
            if (g_count < LOG_RING_SIZE) g_count++;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <LoggerTask+0x74>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c10:	d8d6      	bhi.n	8000bc0 <LoggerTask+0x8>
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <LoggerTask+0x74>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <LoggerTask+0x74>)
 8000c1c:	801a      	strh	r2, [r3, #0]
        if (xQueueReceive(xLogQueue, &m, portMAX_DELAY) == pdPASS) {
 8000c1e:	e7cf      	b.n	8000bc0 <LoggerTask+0x8>
 8000c20:	20000260 	.word	0x20000260
 8000c24:	20004264 	.word	0x20004264
 8000c28:	20000264 	.word	0x20000264
 8000c2c:	20004266 	.word	0x20004266

08000c30 <RegisterUserTask>:
        }
    }
}

void RegisterUserTask(TaskHandle_t h, const char *name, uint16_t stackSize)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	80fb      	strh	r3, [r7, #6]
    if (g_taskCount < MAX_USER_TASKS) {
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <RegisterUserTask+0x70>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	d827      	bhi.n	8000c96 <RegisterUserTask+0x66>
        g_taskTable[g_taskCount].handle    = h;
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <RegisterUserTask+0x70>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4916      	ldr	r1, [pc, #88]	@ (8000ca4 <RegisterUserTask+0x74>)
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	440b      	add	r3, r1
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	601a      	str	r2, [r3, #0]
        strncpy(g_taskTable[g_taskCount].name, name, sizeof(g_taskTable[g_taskCount].name)-1);
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <RegisterUserTask+0x70>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca4 <RegisterUserTask+0x74>)
 8000c68:	4413      	add	r3, r2
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f005 fe0d 	bl	8006890 <strncpy>
        g_taskTable[g_taskCount].stackSize = stackSize;
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <RegisterUserTask+0x70>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	490a      	ldr	r1, [pc, #40]	@ (8000ca4 <RegisterUserTask+0x74>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	3314      	adds	r3, #20
 8000c88:	88fa      	ldrh	r2, [r7, #6]
 8000c8a:	801a      	strh	r2, [r3, #0]
        g_taskCount++;
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <RegisterUserTask+0x70>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	4a03      	ldr	r2, [pc, #12]	@ (8000ca0 <RegisterUserTask+0x70>)
 8000c94:	6013      	str	r3, [r2, #0]
    }
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000025c 	.word	0x2000025c
 8000ca4:	200000dc 	.word	0x200000dc

08000ca8 <findStackSize>:

static uint16_t findStackSize(TaskHandle_t h)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    for (UBaseType_t i = 0; i < g_taskCount; i++) {
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	e017      	b.n	8000ce6 <findStackSize+0x3e>
        if (g_taskTable[i].handle == h) {
 8000cb6:	4912      	ldr	r1, [pc, #72]	@ (8000d00 <findStackSize+0x58>)
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d109      	bne.n	8000ce0 <findStackSize+0x38>
            return g_taskTable[i].stackSize;    // user-defined task
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <findStackSize+0x58>)
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	3314      	adds	r3, #20
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	e008      	b.n	8000cf2 <findStackSize+0x4a>
    for (UBaseType_t i = 0; i < g_taskCount; i++) {
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <findStackSize+0x5c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d3e2      	bcc.n	8000cb6 <findStackSize+0xe>
        }
    }
    return 0;     // fallback
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200000dc 	.word	0x200000dc
 8000d04:	2000025c 	.word	0x2000025c

08000d08 <cmd_help>:

static void cmd_help(int argc, char** argv) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    shell_write("\r\nAvailable commands:\r\n");
 8000d12:	4810      	ldr	r0, [pc, #64]	@ (8000d54 <cmd_help+0x4c>)
 8000d14:	f7ff feee 	bl	8000af4 <shell_write>
    for (int i = 0; i < CMD_COUNT; i++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	e011      	b.n	8000d42 <cmd_help+0x3a>
        shell_write("  ");
 8000d1e:	480e      	ldr	r0, [pc, #56]	@ (8000d58 <cmd_help+0x50>)
 8000d20:	f7ff fee8 	bl	8000af4 <shell_write>
        shell_write(cli_commands[i].help);
 8000d24:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <cmd_help+0x54>)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	4413      	add	r3, r2
 8000d2c:	330c      	adds	r3, #12
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fedf 	bl	8000af4 <shell_write>
        shell_write("\r\n");
 8000d36:	480a      	ldr	r0, [pc, #40]	@ (8000d60 <cmd_help+0x58>)
 8000d38:	f7ff fedc 	bl	8000af4 <shell_write>
    for (int i = 0; i < CMD_COUNT; i++) {
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	d9ea      	bls.n	8000d1e <cmd_help+0x16>
    }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	08007e94 	.word	0x08007e94
 8000d58:	08007eac 	.word	0x08007eac
 8000d5c:	080082c0 	.word	0x080082c0
 8000d60:	08007eb0 	.word	0x08007eb0

08000d64 <cmd_echo>:

static void cmd_echo(int argc, char** argv) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
    // 從 argv[1] 開始輸出所有參數
    for (int i = 1; i < argc; i++) {
 8000d6e:	2301      	movs	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	e012      	b.n	8000d9a <cmd_echo+0x36>
        shell_write(argv[i]);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff feb8 	bl	8000af4 <shell_write>
        if (i < argc - 1) shell_write(" ");
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	da02      	bge.n	8000d94 <cmd_echo+0x30>
 8000d8e:	4808      	ldr	r0, [pc, #32]	@ (8000db0 <cmd_echo+0x4c>)
 8000d90:	f7ff feb0 	bl	8000af4 <shell_write>
    for (int i = 1; i < argc; i++) {
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3301      	adds	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	dbe8      	blt.n	8000d74 <cmd_echo+0x10>
    }
    shell_write("\r\n");
 8000da2:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <cmd_echo+0x50>)
 8000da4:	f7ff fea6 	bl	8000af4 <shell_write>
}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	08007eb4 	.word	0x08007eb4
 8000db4:	08007eb0 	.word	0x08007eb0

08000db8 <cmd_status>:

static void cmd_status(int argc, char** argv) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	f5ad 6dfb 	sub.w	sp, sp, #2008	@ 0x7d8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8000dc4:	f2a3 73d4 	subw	r3, r3, #2004	@ 0x7d4
 8000dc8:	6018      	str	r0, [r3, #0]
 8000dca:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8000dce:	f5a3 63fb 	sub.w	r3, r3, #2008	@ 0x7d8
 8000dd2:	6019      	str	r1, [r3, #0]
	uint8_t InfoBuffer[1000];
	uint8_t RunTimeBuffer[1000];
    vTaskList((char *)&InfoBuffer);
 8000dd4:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f004 f9d9 	bl	8005190 <vTaskList>
    vTaskGetRunTimeStats((char *)&RunTimeBuffer);
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4618      	mov	r0, r3
 8000de4:	f004 fa6a 	bl	80052bc <vTaskGetRunTimeStats>
    shell_write("Name          State     Pr     Stack  TaskNum\r\n");
 8000de8:	480e      	ldr	r0, [pc, #56]	@ (8000e24 <cmd_status+0x6c>)
 8000dea:	f7ff fe83 	bl	8000af4 <shell_write>
    shell_write("---------------------------------------------\r\n");
 8000dee:	480e      	ldr	r0, [pc, #56]	@ (8000e28 <cmd_status+0x70>)
 8000df0:	f7ff fe80 	bl	8000af4 <shell_write>
    shell_write(InfoBuffer);
 8000df4:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fe7b 	bl	8000af4 <shell_write>
    shell_write("\r\n");
 8000dfe:	480b      	ldr	r0, [pc, #44]	@ (8000e2c <cmd_status+0x74>)
 8000e00:	f7ff fe78 	bl	8000af4 <shell_write>
    shell_write("Name            Count        Utlization\r\n");
 8000e04:	480a      	ldr	r0, [pc, #40]	@ (8000e30 <cmd_status+0x78>)
 8000e06:	f7ff fe75 	bl	8000af4 <shell_write>
    shell_write("---------------------------------------\r\n");
 8000e0a:	480a      	ldr	r0, [pc, #40]	@ (8000e34 <cmd_status+0x7c>)
 8000e0c:	f7ff fe72 	bl	8000af4 <shell_write>
    shell_write(RunTimeBuffer);
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe6d 	bl	8000af4 <shell_write>
}
 8000e1a:	bf00      	nop
 8000e1c:	f507 67fb 	add.w	r7, r7, #2008	@ 0x7d8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	08007eb8 	.word	0x08007eb8
 8000e28:	08007ee8 	.word	0x08007ee8
 8000e2c:	08007eb0 	.word	0x08007eb0
 8000e30:	08007f18 	.word	0x08007f18
 8000e34:	08007f44 	.word	0x08007f44

08000e38 <cmd_uptime>:

static void cmd_uptime(int argc, char** argv) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b09c      	sub	sp, #112	@ 0x70
 8000e3c:	af04      	add	r7, sp, #16
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
    TickType_t ticks = xTaskGetTickCount(); // 取得系統經過的 ticks
 8000e42:	f003 fc35 	bl	80046b0 <xTaskGetTickCount>
 8000e46:	65f8      	str	r0, [r7, #92]	@ 0x5c
    uint32_t ms = ticks * portTICK_PERIOD_MS;
 8000e48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e4a:	65bb      	str	r3, [r7, #88]	@ 0x58

    uint32_t seconds = ms / 1000;
 8000e4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec8 <cmd_uptime+0x90>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	099b      	lsrs	r3, r3, #6
 8000e56:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t minutes = seconds / 60;
 8000e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ecc <cmd_uptime+0x94>)
 8000e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e60:	095b      	lsrs	r3, r3, #5
 8000e62:	653b      	str	r3, [r7, #80]	@ 0x50
    uint32_t hours   = minutes / 60;
 8000e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e66:	4a19      	ldr	r2, [pc, #100]	@ (8000ecc <cmd_uptime+0x94>)
 8000e68:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6c:	095b      	lsrs	r3, r3, #5
 8000e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    seconds = seconds % 60;
 8000e70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000e72:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <cmd_uptime+0x94>)
 8000e74:	fba3 1302 	umull	r1, r3, r3, r2
 8000e78:	0959      	lsrs	r1, r3, #5
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	1a5b      	subs	r3, r3, r1
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	657b      	str	r3, [r7, #84]	@ 0x54
    minutes = minutes % 60;
 8000e86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e88:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <cmd_uptime+0x94>)
 8000e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e8e:	0959      	lsrs	r1, r3, #5
 8000e90:	460b      	mov	r3, r1
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	653b      	str	r3, [r7, #80]	@ 0x50

    char line[64];
    snprintf(line, sizeof(line), "Uptime: %02lu:%02lu:%02lu (%lu ms)\r\n",
 8000e9c:	f107 000c 	add.w	r0, r7, #12
 8000ea0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000eae:	4a08      	ldr	r2, [pc, #32]	@ (8000ed0 <cmd_uptime+0x98>)
 8000eb0:	2140      	movs	r1, #64	@ 0x40
 8000eb2:	f005 fc15 	bl	80066e0 <sniprintf>
             hours, minutes, seconds, ms);
    shell_write(line);
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fe1a 	bl	8000af4 <shell_write>
}
 8000ec0:	bf00      	nop
 8000ec2:	3760      	adds	r7, #96	@ 0x60
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	10624dd3 	.word	0x10624dd3
 8000ecc:	88888889 	.word	0x88888889
 8000ed0:	08007f70 	.word	0x08007f70

08000ed4 <cmd_log>:

static void cmd_log(int argc, char **argv)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
    if (argc < 2) { shell_write("Usage: log on|off|dump\r\n"); return; }
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	dc03      	bgt.n	8000eec <cmd_log+0x18>
 8000ee4:	4831      	ldr	r0, [pc, #196]	@ (8000fac <cmd_log+0xd8>)
 8000ee6:	f7ff fe05 	bl	8000af4 <shell_write>
 8000eea:	e05c      	b.n	8000fa6 <cmd_log+0xd2>

    if (strcmp(argv[1], "on") == 0) {
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	3304      	adds	r3, #4
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	492f      	ldr	r1, [pc, #188]	@ (8000fb0 <cmd_log+0xdc>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff f96b 	bl	80001d0 <strcmp>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d106      	bne.n	8000f0e <cmd_log+0x3a>
        g_logEnabled = true;
 8000f00:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb4 <cmd_log+0xe0>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
        shell_write("Log ON\r\n");
 8000f06:	482c      	ldr	r0, [pc, #176]	@ (8000fb8 <cmd_log+0xe4>)
 8000f08:	f7ff fdf4 	bl	8000af4 <shell_write>
 8000f0c:	e04b      	b.n	8000fa6 <cmd_log+0xd2>
    } else if (strcmp(argv[1], "off") == 0) {
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	3304      	adds	r3, #4
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4929      	ldr	r1, [pc, #164]	@ (8000fbc <cmd_log+0xe8>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff f95a 	bl	80001d0 <strcmp>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d106      	bne.n	8000f30 <cmd_log+0x5c>
        g_logEnabled = false;
 8000f22:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <cmd_log+0xe0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
        shell_write("Log OFF\r\n");
 8000f28:	4825      	ldr	r0, [pc, #148]	@ (8000fc0 <cmd_log+0xec>)
 8000f2a:	f7ff fde3 	bl	8000af4 <shell_write>
 8000f2e:	e03a      	b.n	8000fa6 <cmd_log+0xd2>
    } else if (strcmp(argv[1], "dump") == 0) {
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	3304      	adds	r3, #4
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4923      	ldr	r1, [pc, #140]	@ (8000fc4 <cmd_log+0xf0>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff f949 	bl	80001d0 <strcmp>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d12d      	bne.n	8000fa0 <cmd_log+0xcc>
        shell_write("=== Log Dump Start ===\r\n");
 8000f44:	4820      	ldr	r0, [pc, #128]	@ (8000fc8 <cmd_log+0xf4>)
 8000f46:	f7ff fdd5 	bl	8000af4 <shell_write>
        uint16_t start = (g_head + LOG_RING_SIZE - g_count) % LOG_RING_SIZE;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	@ (8000fcc <cmd_log+0xf8>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	3380      	adds	r3, #128	@ 0x80
 8000f50:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd0 <cmd_log+0xfc>)
 8000f52:	8812      	ldrh	r2, [r2, #0]
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	425a      	negs	r2, r3
 8000f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000f60:	bf58      	it	pl
 8000f62:	4253      	negpl	r3, r2
 8000f64:	81bb      	strh	r3, [r7, #12]
        for (uint16_t i = 0; i < g_count; i++) {
 8000f66:	2300      	movs	r3, #0
 8000f68:	81fb      	strh	r3, [r7, #14]
 8000f6a:	e010      	b.n	8000f8e <cmd_log+0xba>
            uint16_t idx = (start + i) % LOG_RING_SIZE;
 8000f6c:	89ba      	ldrh	r2, [r7, #12]
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	4413      	add	r3, r2
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f78:	817b      	strh	r3, [r7, #10]
            shell_write(g_ring[idx].text);
 8000f7a:	897b      	ldrh	r3, [r7, #10]
 8000f7c:	01db      	lsls	r3, r3, #7
 8000f7e:	4a15      	ldr	r2, [pc, #84]	@ (8000fd4 <cmd_log+0x100>)
 8000f80:	4413      	add	r3, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fdb6 	bl	8000af4 <shell_write>
        for (uint16_t i = 0; i < g_count; i++) {
 8000f88:	89fb      	ldrh	r3, [r7, #14]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	81fb      	strh	r3, [r7, #14]
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <cmd_log+0xfc>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	89fa      	ldrh	r2, [r7, #14]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3e9      	bcc.n	8000f6c <cmd_log+0x98>
        }
        shell_write("===  Log Dump End  ===\r\n");
 8000f98:	480f      	ldr	r0, [pc, #60]	@ (8000fd8 <cmd_log+0x104>)
 8000f9a:	f7ff fdab 	bl	8000af4 <shell_write>
 8000f9e:	e002      	b.n	8000fa6 <cmd_log+0xd2>
    } else {
        shell_write("Usage: log on | off | dump\r\n");
 8000fa0:	480e      	ldr	r0, [pc, #56]	@ (8000fdc <cmd_log+0x108>)
 8000fa2:	f7ff fda7 	bl	8000af4 <shell_write>
    }
}
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	08007f98 	.word	0x08007f98
 8000fb0:	08007fb4 	.word	0x08007fb4
 8000fb4:	20004268 	.word	0x20004268
 8000fb8:	08007fb8 	.word	0x08007fb8
 8000fbc:	08007fc4 	.word	0x08007fc4
 8000fc0:	08007fc8 	.word	0x08007fc8
 8000fc4:	08007fd4 	.word	0x08007fd4
 8000fc8:	08007fdc 	.word	0x08007fdc
 8000fcc:	20004264 	.word	0x20004264
 8000fd0:	20004266 	.word	0x20004266
 8000fd4:	20000264 	.word	0x20000264
 8000fd8:	08007ff8 	.word	0x08007ff8
 8000fdc:	08008014 	.word	0x08008014

08000fe0 <cmd_mem>:

static void cmd_mem(int argc, char **argv)
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b0c6      	sub	sp, #280	@ 0x118
 8000fe4:	af04      	add	r7, sp, #16
 8000fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000fee:	6018      	str	r0, [r3, #0]
 8000ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ff8:	6019      	str	r1, [r3, #0]
    /* 先列出 Heap 資訊 … */
	char line[128];
	size_t heap_free = xPortGetFreeHeapSize();
 8000ffa:	f005 f9db 	bl	80063b4 <xPortGetFreeHeapSize>
 8000ffe:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
	size_t heap_min = xPortGetMinimumEverFreeHeapSize();
 8001002:	f005 f9e3 	bl	80063cc <xPortGetMinimumEverFreeHeapSize>
 8001006:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
	shell_write("\r\nMemory Summary:\r\n\r\n");
 800100a:	485a      	ldr	r0, [pc, #360]	@ (8001174 <cmd_mem+0x194>)
 800100c:	f7ff fd72 	bl	8000af4 <shell_write>

	snprintf(line, sizeof(line), "    Heap Total Free      : %lu bytes\r\n", (unsigned long)heap_free);
 8001010:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001014:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001018:	4a57      	ldr	r2, [pc, #348]	@ (8001178 <cmd_mem+0x198>)
 800101a:	2180      	movs	r1, #128	@ 0x80
 800101c:	f005 fb60 	bl	80066e0 <sniprintf>
	shell_write(line);
 8001020:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fd65 	bl	8000af4 <shell_write>
	snprintf(line, sizeof(line), "    Heap Min Ever Free   : %lu bytes\r\n\r\n", (unsigned long)heap_min);
 800102a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800102e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001032:	4a52      	ldr	r2, [pc, #328]	@ (800117c <cmd_mem+0x19c>)
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	f005 fb53 	bl	80066e0 <sniprintf>
	shell_write(line);
 800103a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fd58 	bl	8000af4 <shell_write>


    UBaseType_t n = uxTaskGetNumberOfTasks();
 8001044:	f003 fb44 	bl	80046d0 <uxTaskGetNumberOfTasks>
 8001048:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
    TaskStatus_t *tsArray = pvPortMalloc(n * sizeof(TaskStatus_t));
 800104c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4618      	mov	r0, r3
 800105a:	f005 f887 	bl	800616c <pvPortMalloc>
 800105e:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    n = uxTaskGetSystemState(tsArray, n, NULL);
 8001062:	2200      	movs	r2, #0
 8001064:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8001068:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 800106c:	f003 fb3c 	bl	80046e8 <uxTaskGetSystemState>
 8001070:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8

    shell_write("\r\nTask            Stack  Used Free            %%\r\n"
 8001074:	4842      	ldr	r0, [pc, #264]	@ (8001180 <cmd_mem+0x1a0>)
 8001076:	f7ff fd3d 	bl	8000af4 <shell_write>
                "--------------- ------ ---- ---- -------------\r\n");

    char buf[96];
    for (UBaseType_t i = 0; i < n; i++) {
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001080:	e069      	b.n	8001156 <cmd_mem+0x176>
        TaskStatus_t *t = &tsArray[i];
 8001082:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	461a      	mov	r2, r3
 8001090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001094:	4413      	add	r3, r2
 8001096:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        uint16_t total = findStackSize(t->xHandle);
 800109a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe01 	bl	8000ca8 <findStackSize>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
        uint16_t free  = t->usStackHighWaterMark;
 80010ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80010b0:	8c1b      	ldrh	r3, [r3, #32]
 80010b2:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
        uint16_t used  = total - free;
 80010b6:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	@ 0xee
 80010ba:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
        uint8_t  pct   = (used * 100UL) / total;
 80010c4:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 80010c8:	2264      	movs	r2, #100	@ 0x64
 80010ca:	fb03 f202 	mul.w	r2, r3, r2
 80010ce:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9

        if(total == 0){
 80010da:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d118      	bne.n	8001114 <cmd_mem+0x134>
        	snprintf(buf, sizeof(buf), "%-15s %5s  %4s %4u %13s\r\n",
 80010e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 80010ec:	f107 0008 	add.w	r0, r7, #8
 80010f0:	4924      	ldr	r1, [pc, #144]	@ (8001184 <cmd_mem+0x1a4>)
 80010f2:	9103      	str	r1, [sp, #12]
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <cmd_mem+0x1a8>)
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <cmd_mem+0x1a8>)
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	4613      	mov	r3, r2
 8001100:	4a22      	ldr	r2, [pc, #136]	@ (800118c <cmd_mem+0x1ac>)
 8001102:	2160      	movs	r1, #96	@ 0x60
 8001104:	f005 faec 	bl	80066e0 <sniprintf>
        	        	                 t->pcTaskName, "N/A","N/A", free, "system task");
        	        	        shell_write(buf);
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fcf1 	bl	8000af4 <shell_write>
 8001112:	e01b      	b.n	800114c <cmd_mem+0x16c>
        }
        else{
        	 snprintf(buf, sizeof(buf), "%-15s %5u  %4u %4u %12u%%\r\n",
 8001114:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001118:	685d      	ldr	r5, [r3, #4]
 800111a:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 800111e:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	@ 0xea
 8001122:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	@ 0xec
 8001126:	f897 00e9 	ldrb.w	r0, [r7, #233]	@ 0xe9
 800112a:	f107 0408 	add.w	r4, r7, #8
 800112e:	9003      	str	r0, [sp, #12]
 8001130:	9102      	str	r1, [sp, #8]
 8001132:	9201      	str	r2, [sp, #4]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	462b      	mov	r3, r5
 8001138:	4a15      	ldr	r2, [pc, #84]	@ (8001190 <cmd_mem+0x1b0>)
 800113a:	2160      	movs	r1, #96	@ 0x60
 800113c:	4620      	mov	r0, r4
 800113e:	f005 facf 	bl	80066e0 <sniprintf>
        	                 t->pcTaskName, total, used, free, pct);
        	        shell_write(buf);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fcd4 	bl	8000af4 <shell_write>
    for (UBaseType_t i = 0; i < n; i++) {
 800114c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001150:	3301      	adds	r3, #1
 8001152:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001156:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800115a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800115e:	429a      	cmp	r2, r3
 8001160:	d38f      	bcc.n	8001082 <cmd_mem+0xa2>
        }
    }
    vPortFree(tsArray);
 8001162:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8001166:	f005 f8c9 	bl	80062fc <vPortFree>
}
 800116a:	bf00      	nop
 800116c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001170:	46bd      	mov	sp, r7
 8001172:	bdb0      	pop	{r4, r5, r7, pc}
 8001174:	08008034 	.word	0x08008034
 8001178:	0800804c 	.word	0x0800804c
 800117c:	08008074 	.word	0x08008074
 8001180:	080080a0 	.word	0x080080a0
 8001184:	08008120 	.word	0x08008120
 8001188:	0800812c 	.word	0x0800812c
 800118c:	08008104 	.word	0x08008104
 8001190:	08008130 	.word	0x08008130

08001194 <parse_and_execute>:

// Parser function
static void parse_and_execute(char* line) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b090      	sub	sp, #64	@ 0x40
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    char* argv[10];
    int argc = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    log_printf(">>> %s\r\n", line);
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4835      	ldr	r0, [pc, #212]	@ (8001278 <parse_and_execute+0xe4>)
 80011a4:	f7ff fcda 	bl	8000b5c <log_printf>

    char* p = strtok(line, " ");
 80011a8:	4934      	ldr	r1, [pc, #208]	@ (800127c <parse_and_execute+0xe8>)
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f005 fb84 	bl	80068b8 <strtok>
 80011b0:	63b8      	str	r0, [r7, #56]	@ 0x38
    while (p && argc < 10) {
 80011b2:	e00d      	b.n	80011d0 <parse_and_execute+0x3c>
        argv[argc++] = p;
 80011b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	3340      	adds	r3, #64	@ 0x40
 80011be:	443b      	add	r3, r7
 80011c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011c2:	f843 2c34 	str.w	r2, [r3, #-52]
        p = strtok(NULL, " ");
 80011c6:	492d      	ldr	r1, [pc, #180]	@ (800127c <parse_and_execute+0xe8>)
 80011c8:	2000      	movs	r0, #0
 80011ca:	f005 fb75 	bl	80068b8 <strtok>
 80011ce:	63b8      	str	r0, [r7, #56]	@ 0x38
    while (p && argc < 10) {
 80011d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <parse_and_execute+0x48>
 80011d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011d8:	2b09      	cmp	r3, #9
 80011da:	ddeb      	ble.n	80011b4 <parse_and_execute+0x20>
    }
    if (argc == 0) return;
 80011dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d045      	beq.n	800126e <parse_and_execute+0xda>

    for (int i = 0; i < CMD_COUNT; i++) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80011e6:	e034      	b.n	8001252 <parse_and_execute+0xbe>
        if (strcmp(argv[0], cli_commands[i].name) == 0) {
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4925      	ldr	r1, [pc, #148]	@ (8001280 <parse_and_execute+0xec>)
 80011ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	440b      	add	r3, r1
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f7fe ffea 	bl	80001d0 <strcmp>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d124      	bne.n	800124c <parse_and_execute+0xb8>
            if (argc - 1 < cli_commands[i].argc_min) {
 8001202:	4a1f      	ldr	r2, [pc, #124]	@ (8001280 <parse_and_execute+0xec>)
 8001204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	3304      	adds	r3, #4
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001210:	429a      	cmp	r2, r3
 8001212:	dc0f      	bgt.n	8001234 <parse_and_execute+0xa0>
                shell_write("Usage: ");
 8001214:	481b      	ldr	r0, [pc, #108]	@ (8001284 <parse_and_execute+0xf0>)
 8001216:	f7ff fc6d 	bl	8000af4 <shell_write>
                shell_write(cli_commands[i].help);
 800121a:	4a19      	ldr	r2, [pc, #100]	@ (8001280 <parse_and_execute+0xec>)
 800121c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4413      	add	r3, r2
 8001222:	330c      	adds	r3, #12
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fc64 	bl	8000af4 <shell_write>
                shell_write("\r\n");
 800122c:	4816      	ldr	r0, [pc, #88]	@ (8001288 <parse_and_execute+0xf4>)
 800122e:	f7ff fc61 	bl	8000af4 <shell_write>
            } else {
                cli_commands[i].handler(argc, argv);
            }
            return;
 8001232:	e01d      	b.n	8001270 <parse_and_execute+0xdc>
                cli_commands[i].handler(argc, argv);
 8001234:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <parse_and_execute+0xec>)
 8001236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	3308      	adds	r3, #8
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	4611      	mov	r1, r2
 8001246:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001248:	4798      	blx	r3
            return;
 800124a:	e011      	b.n	8001270 <parse_and_execute+0xdc>
    for (int i = 0; i < CMD_COUNT; i++) {
 800124c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800124e:	3301      	adds	r3, #1
 8001250:	637b      	str	r3, [r7, #52]	@ 0x34
 8001252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001254:	2b06      	cmp	r3, #6
 8001256:	d9c7      	bls.n	80011e8 <parse_and_execute+0x54>
        }
    }
    shell_write("Unknown command: ");
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <parse_and_execute+0xf8>)
 800125a:	f7ff fc4b 	bl	8000af4 <shell_write>
    shell_write(argv[0]);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fc47 	bl	8000af4 <shell_write>
    shell_write("\r\n");
 8001266:	4808      	ldr	r0, [pc, #32]	@ (8001288 <parse_and_execute+0xf4>)
 8001268:	f7ff fc44 	bl	8000af4 <shell_write>
 800126c:	e000      	b.n	8001270 <parse_and_execute+0xdc>
    if (argc == 0) return;
 800126e:	bf00      	nop
}
 8001270:	3740      	adds	r7, #64	@ 0x40
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	0800814c 	.word	0x0800814c
 800127c:	08007eb4 	.word	0x08007eb4
 8001280:	080082c0 	.word	0x080082c0
 8001284:	08008158 	.word	0x08008158
 8001288:	08007eb0 	.word	0x08007eb0
 800128c:	08008160 	.word	0x08008160

08001290 <ShellTask>:

// Shell Task
void ShellTask(void* argument) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b0a4      	sub	sp, #144	@ 0x90
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    static const char* banner =
       "FreeShellRTOS:/$ ";  // 已經在這前面印 banner 的程式

    char buf[128];
    int idx = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    char ch;

    shell_write(shell_banner);
 800129e:	4b25      	ldr	r3, [pc, #148]	@ (8001334 <ShellTask+0xa4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fc26 	bl	8000af4 <shell_write>
    shell_write(banner);
 80012a8:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <ShellTask+0xa8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fc21 	bl	8000af4 <shell_write>

    while (1) {
        if (HAL_UART_Receive(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY) == HAL_OK) {
 80012b2:	f107 010b 	add.w	r1, r7, #11
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	2201      	movs	r2, #1
 80012bc:	481f      	ldr	r0, [pc, #124]	@ (800133c <ShellTask+0xac>)
 80012be:	f001 fde8 	bl	8002e92 <HAL_UART_Receive>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f4      	bne.n	80012b2 <ShellTask+0x22>
            if (ch == '\r') {
 80012c8:	7afb      	ldrb	r3, [r7, #11]
 80012ca:	2b0d      	cmp	r3, #13
 80012cc:	d115      	bne.n	80012fa <ShellTask+0x6a>
                buf[idx] = '\0';
 80012ce:	f107 020c 	add.w	r2, r7, #12
 80012d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012d6:	4413      	add	r3, r2
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
                shell_write("\r\n");
 80012dc:	4818      	ldr	r0, [pc, #96]	@ (8001340 <ShellTask+0xb0>)
 80012de:	f7ff fc09 	bl	8000af4 <shell_write>
                parse_and_execute(buf);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff54 	bl	8001194 <parse_and_execute>
                shell_write("FreeShellRTOS:/$ ");
 80012ec:	4815      	ldr	r0, [pc, #84]	@ (8001344 <ShellTask+0xb4>)
 80012ee:	f7ff fc01 	bl	8000af4 <shell_write>
                idx = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012f8:	e7db      	b.n	80012b2 <ShellTask+0x22>
            } else if (idx < (int)sizeof(buf) - 1 && ch >= 32 && ch <= 126) {
 80012fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012fe:	2b7e      	cmp	r3, #126	@ 0x7e
 8001300:	dcd7      	bgt.n	80012b2 <ShellTask+0x22>
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	2b1f      	cmp	r3, #31
 8001306:	d9d4      	bls.n	80012b2 <ShellTask+0x22>
 8001308:	7afb      	ldrb	r3, [r7, #11]
 800130a:	2b7e      	cmp	r3, #126	@ 0x7e
 800130c:	d8d1      	bhi.n	80012b2 <ShellTask+0x22>
                buf[idx++] = ch;
 800130e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001318:	7afa      	ldrb	r2, [r7, #11]
 800131a:	3390      	adds	r3, #144	@ 0x90
 800131c:	443b      	add	r3, r7
 800131e:	f803 2c84 	strb.w	r2, [r3, #-132]
                HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001322:	f107 010b 	add.w	r1, r7, #11
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	2201      	movs	r2, #1
 800132c:	4803      	ldr	r0, [pc, #12]	@ (800133c <ShellTask+0xac>)
 800132e:	f001 fd25 	bl	8002d7c <HAL_UART_Transmit>
        if (HAL_UART_Receive(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001332:	e7be      	b.n	80012b2 <ShellTask+0x22>
 8001334:	20000000 	.word	0x20000000
 8001338:	20000004 	.word	0x20000004
 800133c:	20000090 	.word	0x20000090
 8001340:	08007eb0 	.word	0x08007eb0
 8001344:	08008174 	.word	0x08008174

08001348 <ExternalTask1>:
    }
}

TaskHandle_t ext1_handle = NULL;

void ExternalTask1(void* arg) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    shell_write("[ext1] Task started\r\n");
 8001350:	480b      	ldr	r0, [pc, #44]	@ (8001380 <ExternalTask1+0x38>)
 8001352:	f7ff fbcf 	bl	8000af4 <shell_write>
    while (1) {
        // 模擬任務行為
        shell_write("[ext1] Doing some work...\r\n");
 8001356:	480b      	ldr	r0, [pc, #44]	@ (8001384 <ExternalTask1+0x3c>)
 8001358:	f7ff fbcc 	bl	8000af4 <shell_write>
        vTaskDelay(pdMS_TO_TICKS(2000));  // 模擬 2 秒工作
 800135c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001360:	f003 f80c 	bl	800437c <vTaskDelay>

        // 進入睡眠，等待下一次 run 指令叫醒
        shell_write("[ext1] Sleeping...\r\n");
 8001364:	4808      	ldr	r0, [pc, #32]	@ (8001388 <ExternalTask1+0x40>)
 8001366:	f7ff fbc5 	bl	8000af4 <shell_write>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800136a:	f04f 31ff 	mov.w	r1, #4294967295
 800136e:	2001      	movs	r0, #1
 8001370:	f004 f828 	bl	80053c4 <ulTaskNotifyTake>

        shell_write("[ext1] Woke up again!\r\n");
 8001374:	4805      	ldr	r0, [pc, #20]	@ (800138c <ExternalTask1+0x44>)
 8001376:	f7ff fbbd 	bl	8000af4 <shell_write>
        shell_write("[ext1] Doing some work...\r\n");
 800137a:	bf00      	nop
 800137c:	e7eb      	b.n	8001356 <ExternalTask1+0xe>
 800137e:	bf00      	nop
 8001380:	08008188 	.word	0x08008188
 8001384:	080081a0 	.word	0x080081a0
 8001388:	080081bc 	.word	0x080081bc
 800138c:	080081d4 	.word	0x080081d4

08001390 <cmd_ext>:
    // 你可以繼續擴充更多
};

extern TaskHandle_t ext1_handle;

static void cmd_ext(int argc, char** argv) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af02      	add	r7, sp, #8
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
    if (argc < 2) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b01      	cmp	r3, #1
 800139e:	dc03      	bgt.n	80013a8 <cmd_ext+0x18>
        shell_write("Usage: run <task_name>\r\n");
 80013a0:	481c      	ldr	r0, [pc, #112]	@ (8001414 <cmd_ext+0x84>)
 80013a2:	f7ff fba7 	bl	8000af4 <shell_write>
        return;
 80013a6:	e031      	b.n	800140c <cmd_ext+0x7c>
    }

    if (strcmp(argv[2], "ext1") == 0) {
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3308      	adds	r3, #8
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	491a      	ldr	r1, [pc, #104]	@ (8001418 <cmd_ext+0x88>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7fe ff0d 	bl	80001d0 <strcmp>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d124      	bne.n	8001406 <cmd_ext+0x76>
        if (ext1_handle == NULL) {
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <cmd_ext+0x8c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d115      	bne.n	80013f0 <cmd_ext+0x60>
            // 還沒創建，先建立它
            if (xTaskCreate(ExternalTask1, "ext1", 256, NULL, 2, &ext1_handle) == pdPASS) {
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <cmd_ext+0x8c>)
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	2302      	movs	r3, #2
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2300      	movs	r3, #0
 80013ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013d2:	4911      	ldr	r1, [pc, #68]	@ (8001418 <cmd_ext+0x88>)
 80013d4:	4812      	ldr	r0, [pc, #72]	@ (8001420 <cmd_ext+0x90>)
 80013d6:	f002 fe8f 	bl	80040f8 <xTaskCreate>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d103      	bne.n	80013e8 <cmd_ext+0x58>
                shell_write("Task ext1 created and running...\r\n");
 80013e0:	4810      	ldr	r0, [pc, #64]	@ (8001424 <cmd_ext+0x94>)
 80013e2:	f7ff fb87 	bl	8000af4 <shell_write>
        } else {
            // 已建立，只是睡著了 → 叫醒
            shell_write("Task ext1 resumed...\r\n");
            xTaskNotifyGive(ext1_handle);
        }
        return;
 80013e6:	e011      	b.n	800140c <cmd_ext+0x7c>
                shell_write("Failed to create task ext1\r\n");
 80013e8:	480f      	ldr	r0, [pc, #60]	@ (8001428 <cmd_ext+0x98>)
 80013ea:	f7ff fb83 	bl	8000af4 <shell_write>
        return;
 80013ee:	e00d      	b.n	800140c <cmd_ext+0x7c>
            shell_write("Task ext1 resumed...\r\n");
 80013f0:	480e      	ldr	r0, [pc, #56]	@ (800142c <cmd_ext+0x9c>)
 80013f2:	f7ff fb7f 	bl	8000af4 <shell_write>
            xTaskNotifyGive(ext1_handle);
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <cmd_ext+0x8c>)
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	2300      	movs	r3, #0
 80013fc:	2202      	movs	r2, #2
 80013fe:	2100      	movs	r1, #0
 8001400:	f004 f828 	bl	8005454 <xTaskGenericNotify>
        return;
 8001404:	e002      	b.n	800140c <cmd_ext+0x7c>
    }

    shell_write("Unknown task name\r\n");
 8001406:	480a      	ldr	r0, [pc, #40]	@ (8001430 <cmd_ext+0xa0>)
 8001408:	f7ff fb74 	bl	8000af4 <shell_write>
}
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	080081f4 	.word	0x080081f4
 8001418:	080081ec 	.word	0x080081ec
 800141c:	2000426c 	.word	0x2000426c
 8001420:	08001349 	.word	0x08001349
 8001424:	08008210 	.word	0x08008210
 8001428:	08008234 	.word	0x08008234
 800142c:	08008254 	.word	0x08008254
 8001430:	0800826c 	.word	0x0800826c

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <HAL_MspInit+0x4c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	4a0f      	ldr	r2, [pc, #60]	@ (8001480 <HAL_MspInit+0x4c>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001448:	6453      	str	r3, [r2, #68]	@ 0x44
 800144a:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <HAL_MspInit+0x4c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	4a08      	ldr	r2, [pc, #32]	@ (8001480 <HAL_MspInit+0x4c>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	@ 0x40
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_MspInit+0x4c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a19      	ldr	r2, [pc, #100]	@ (8001508 <HAL_UART_MspInit+0x84>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12b      	bne.n	80014fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b18      	ldr	r3, [pc, #96]	@ (800150c <HAL_UART_MspInit+0x88>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a17      	ldr	r2, [pc, #92]	@ (800150c <HAL_UART_MspInit+0x88>)
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <HAL_UART_MspInit+0x88>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b11      	ldr	r3, [pc, #68]	@ (800150c <HAL_UART_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a10      	ldr	r2, [pc, #64]	@ (800150c <HAL_UART_MspInit+0x88>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <HAL_UART_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014de:	230c      	movs	r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ee:	2307      	movs	r3, #7
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <HAL_UART_MspInit+0x8c>)
 80014fa:	f000 fad3 	bl	8001aa4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	@ 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40004400 	.word	0x40004400
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000

08001514 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	@ 0x38
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <HAL_InitTick+0xe4>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	4a32      	ldr	r2, [pc, #200]	@ (80015f8 <HAL_InitTick+0xe4>)
 800152e:	f043 0320 	orr.w	r3, r3, #32
 8001532:	6413      	str	r3, [r2, #64]	@ 0x40
 8001534:	4b30      	ldr	r3, [pc, #192]	@ (80015f8 <HAL_InitTick+0xe4>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	f003 0320 	and.w	r3, r3, #32
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001540:	f107 0210 	add.w	r2, r7, #16
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f001 f8f8 	bl	8002740 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001556:	2b00      	cmp	r3, #0
 8001558:	d103      	bne.n	8001562 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800155a:	f001 f8c9 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 800155e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001560:	e004      	b.n	800156c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001562:	f001 f8c5 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 8001566:	4603      	mov	r3, r0
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800156c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800156e:	4a23      	ldr	r2, [pc, #140]	@ (80015fc <HAL_InitTick+0xe8>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	0c9b      	lsrs	r3, r3, #18
 8001576:	3b01      	subs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800157a:	4b21      	ldr	r3, [pc, #132]	@ (8001600 <HAL_InitTick+0xec>)
 800157c:	4a21      	ldr	r2, [pc, #132]	@ (8001604 <HAL_InitTick+0xf0>)
 800157e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001580:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <HAL_InitTick+0xec>)
 8001582:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001586:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001588:	4a1d      	ldr	r2, [pc, #116]	@ (8001600 <HAL_InitTick+0xec>)
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <HAL_InitTick+0xec>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <HAL_InitTick+0xec>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_InitTick+0xec>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80015a0:	4817      	ldr	r0, [pc, #92]	@ (8001600 <HAL_InitTick+0xec>)
 80015a2:	f001 f8ff 	bl	80027a4 <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d11b      	bne.n	80015ec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80015b4:	4812      	ldr	r0, [pc, #72]	@ (8001600 <HAL_InitTick+0xec>)
 80015b6:	f001 f94f 	bl	8002858 <HAL_TIM_Base_Start_IT>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d111      	bne.n	80015ec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80015c8:	2037      	movs	r0, #55	@ 0x37
 80015ca:	f000 fa5d 	bl	8001a88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d808      	bhi.n	80015e6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	2037      	movs	r0, #55	@ 0x37
 80015da:	f000 fa39 	bl	8001a50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015de:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <HAL_InitTick+0xf4>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e002      	b.n	80015ec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3738      	adds	r7, #56	@ 0x38
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	431bde83 	.word	0x431bde83
 8001600:	20004270 	.word	0x20004270
 8001604:	40001400 	.word	0x40001400
 8001608:	2000000c 	.word	0x2000000c

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <NMI_Handler+0x4>

08001614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <MemManage_Handler+0x4>

08001624 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <UsageFault_Handler+0x4>

08001634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <TIM7_IRQHandler+0x10>)
 800164a:	f001 f975 	bl	8002938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20004270 	.word	0x20004270

08001658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001672:	f005 f9c3 	bl	80069fc <__errno>
 8001676:	4603      	mov	r3, r0
 8001678:	2216      	movs	r2, #22
 800167a:	601a      	str	r2, [r3, #0]
  return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_exit>:

void _exit (int status)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ffe7 	bl	8001668 <_kill>
  while (1) {}    /* Make sure we hang here */
 800169a:	bf00      	nop
 800169c:	e7fd      	b.n	800169a <_exit+0x12>

0800169e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e00a      	b.n	80016c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b0:	f3af 8000 	nop.w
 80016b4:	4601      	mov	r1, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60ba      	str	r2, [r7, #8]
 80016bc:	b2ca      	uxtb	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dbf0      	blt.n	80016b0 <_read+0x12>
  }

  return len;
 80016ce:	687b      	ldr	r3, [r7, #4]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e009      	b.n	80016fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	60ba      	str	r2, [r7, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	dbf1      	blt.n	80016ea <_write+0x12>
  }
  return len;
 8001706:	687b      	ldr	r3, [r7, #4]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_close>:

int _close(int file)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001738:	605a      	str	r2, [r3, #4]
  return 0;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <_isatty>:

int _isatty(int file)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800175e:	b480      	push	{r7}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <_sbrk+0x5c>)
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <_sbrk+0x60>)
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <_sbrk+0x64>)
 8001796:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <_sbrk+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d207      	bcs.n	80017b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a8:	f005 f928 	bl	80069fc <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	e009      	b.n	80017cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20020000 	.word	0x20020000
 80017d8:	00000400 	.word	0x00000400
 80017dc:	200042b8 	.word	0x200042b8
 80017e0:	200171b8 	.word	0x200171b8

080017e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001808:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001840 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800180c:	f7ff ffea 	bl	80017e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001810:	480c      	ldr	r0, [pc, #48]	@ (8001844 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001812:	490d      	ldr	r1, [pc, #52]	@ (8001848 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001814:	4a0d      	ldr	r2, [pc, #52]	@ (800184c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001828:	4c0a      	ldr	r4, [pc, #40]	@ (8001854 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001836:	f005 f8e7 	bl	8006a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183a:	f7fe fee1 	bl	8000600 <main>
  bx  lr    
 800183e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800184c:	08008438 	.word	0x08008438
  ldr r2, =_sbss
 8001850:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001854:	200171b4 	.word	0x200171b4

08001858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001860:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <HAL_Init+0x40>)
 8001866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800186a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800186c:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <HAL_Init+0x40>)
 8001872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	@ (800189c <HAL_Init+0x40>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 f8d8 	bl	8001a3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fe42 	bl	8001514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff fdd0 	bl	8001434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000010 	.word	0x20000010
 80018c4:	200042bc 	.word	0x200042bc

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200042bc 	.word	0x200042bc

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	@ (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	@ (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	@ (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	@ 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	@ 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff4c 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a62:	f7ff ff61 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001a66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	6978      	ldr	r0, [r7, #20]
 8001a6e:	f7ff ffb1 	bl	80019d4 <NVIC_EncodePriority>
 8001a72:	4602      	mov	r2, r0
 8001a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff80 	bl	8001980 <__NVIC_SetPriority>
}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff54 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	@ 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e16b      	b.n	8001d98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f040 815a 	bne.w	8001d92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d005      	beq.n	8001af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d130      	bne.n	8001b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 0201 	and.w	r2, r3, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d017      	beq.n	8001b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d123      	bne.n	8001be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80b4 	beq.w	8001d92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b60      	ldr	r3, [pc, #384]	@ (8001db0 <HAL_GPIO_Init+0x30c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a5f      	ldr	r2, [pc, #380]	@ (8001db0 <HAL_GPIO_Init+0x30c>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001db0 <HAL_GPIO_Init+0x30c>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c46:	4a5b      	ldr	r2, [pc, #364]	@ (8001db4 <HAL_GPIO_Init+0x310>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	@ (8001db8 <HAL_GPIO_Init+0x314>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d02b      	beq.n	8001cca <HAL_GPIO_Init+0x226>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a51      	ldr	r2, [pc, #324]	@ (8001dbc <HAL_GPIO_Init+0x318>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d025      	beq.n	8001cc6 <HAL_GPIO_Init+0x222>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a50      	ldr	r2, [pc, #320]	@ (8001dc0 <HAL_GPIO_Init+0x31c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01f      	beq.n	8001cc2 <HAL_GPIO_Init+0x21e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4f      	ldr	r2, [pc, #316]	@ (8001dc4 <HAL_GPIO_Init+0x320>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d019      	beq.n	8001cbe <HAL_GPIO_Init+0x21a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4e      	ldr	r2, [pc, #312]	@ (8001dc8 <HAL_GPIO_Init+0x324>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0x216>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4d      	ldr	r2, [pc, #308]	@ (8001dcc <HAL_GPIO_Init+0x328>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00d      	beq.n	8001cb6 <HAL_GPIO_Init+0x212>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4c      	ldr	r2, [pc, #304]	@ (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0x20e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4b      	ldr	r2, [pc, #300]	@ (8001dd4 <HAL_GPIO_Init+0x330>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_GPIO_Init+0x20a>
 8001caa:	2307      	movs	r3, #7
 8001cac:	e00e      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cae:	2308      	movs	r3, #8
 8001cb0:	e00c      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	e00a      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	e008      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e004      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f002 0203 	and.w	r2, r2, #3
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	4093      	lsls	r3, r2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cdc:	4935      	ldr	r1, [pc, #212]	@ (8001db4 <HAL_GPIO_Init+0x310>)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cea:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd8 <HAL_GPIO_Init+0x334>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0e:	4a32      	ldr	r2, [pc, #200]	@ (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d14:	4b30      	ldr	r3, [pc, #192]	@ (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d38:	4a27      	ldr	r2, [pc, #156]	@ (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3e:	4b26      	ldr	r3, [pc, #152]	@ (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d62:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d8c:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	f67f ae90 	bls.w	8001ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3724      	adds	r7, #36	@ 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40013800 	.word	0x40013800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020c00 	.word	0x40020c00
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40021400 	.word	0x40021400
 8001dd0:	40021800 	.word	0x40021800
 8001dd4:	40021c00 	.word	0x40021c00
 8001dd8:	40013c00 	.word	0x40013c00

08001ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dec:	787b      	ldrb	r3, [r7, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e267      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d075      	beq.n	8001f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e2e:	4b88      	ldr	r3, [pc, #544]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d00c      	beq.n	8001e54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3a:	4b85      	ldr	r3, [pc, #532]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d112      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e46:	4b82      	ldr	r3, [pc, #520]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	4b7e      	ldr	r3, [pc, #504]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d05b      	beq.n	8001f18 <HAL_RCC_OscConfig+0x108>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d157      	bne.n	8001f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e242      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0x74>
 8001e76:	4b76      	ldr	r3, [pc, #472]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a75      	ldr	r2, [pc, #468]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x98>
 8001e8e:	4b70      	ldr	r3, [pc, #448]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6f      	ldr	r2, [pc, #444]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6c      	ldr	r2, [pc, #432]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001ea8:	4b69      	ldr	r3, [pc, #420]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a68      	ldr	r2, [pc, #416]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b66      	ldr	r3, [pc, #408]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a65      	ldr	r2, [pc, #404]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fcfe 	bl	80018c8 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fcfa 	bl	80018c8 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	@ 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e207      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xc0>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fcea 	bl	80018c8 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fce6 	bl	80018c8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	@ 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1f3      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	4b51      	ldr	r3, [pc, #324]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xe8>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f26:	4b4a      	ldr	r3, [pc, #296]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f32:	4b47      	ldr	r3, [pc, #284]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d11c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b44      	ldr	r3, [pc, #272]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d116      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	4b41      	ldr	r3, [pc, #260]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e1c7      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f62:	4b3b      	ldr	r3, [pc, #236]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4937      	ldr	r1, [pc, #220]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	e03a      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f80:	4b34      	ldr	r3, [pc, #208]	@ (8002054 <HAL_RCC_OscConfig+0x244>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff fc9f 	bl	80018c8 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fc9b 	bl	80018c8 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1a8      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b28      	ldr	r3, [pc, #160]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4925      	ldr	r1, [pc, #148]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <HAL_RCC_OscConfig+0x244>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fc7e 	bl	80018c8 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fc7a 	bl	80018c8 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e187      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d036      	beq.n	8002068 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_RCC_OscConfig+0x248>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff fc5e 	bl	80018c8 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002010:	f7ff fc5a 	bl	80018c8 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e167      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <HAL_RCC_OscConfig+0x240>)
 8002024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x200>
 800202e:	e01b      	b.n	8002068 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002030:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <HAL_RCC_OscConfig+0x248>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7ff fc47 	bl	80018c8 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	e00e      	b.n	800205c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203e:	f7ff fc43 	bl	80018c8 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d907      	bls.n	800205c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e150      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
 8002050:	40023800 	.word	0x40023800
 8002054:	42470000 	.word	0x42470000
 8002058:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	4b88      	ldr	r3, [pc, #544]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800205e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ea      	bne.n	800203e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8097 	beq.w	80021a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207a:	4b81      	ldr	r3, [pc, #516]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	4b7d      	ldr	r3, [pc, #500]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	4a7c      	ldr	r2, [pc, #496]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002094:	6413      	str	r3, [r2, #64]	@ 0x40
 8002096:	4b7a      	ldr	r3, [pc, #488]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a2:	2301      	movs	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a6:	4b77      	ldr	r3, [pc, #476]	@ (8002284 <HAL_RCC_OscConfig+0x474>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d118      	bne.n	80020e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b2:	4b74      	ldr	r3, [pc, #464]	@ (8002284 <HAL_RCC_OscConfig+0x474>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a73      	ldr	r2, [pc, #460]	@ (8002284 <HAL_RCC_OscConfig+0x474>)
 80020b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020be:	f7ff fc03 	bl	80018c8 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c6:	f7ff fbff 	bl	80018c8 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e10c      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002284 <HAL_RCC_OscConfig+0x474>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x2ea>
 80020ec:	4b64      	ldr	r3, [pc, #400]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f0:	4a63      	ldr	r2, [pc, #396]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f8:	e01c      	b.n	8002134 <HAL_RCC_OscConfig+0x324>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x30c>
 8002102:	4b5f      	ldr	r3, [pc, #380]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002106:	4a5e      	ldr	r2, [pc, #376]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6713      	str	r3, [r2, #112]	@ 0x70
 800210e:	4b5c      	ldr	r3, [pc, #368]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002112:	4a5b      	ldr	r2, [pc, #364]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	@ 0x70
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0x324>
 800211c:	4b58      	ldr	r3, [pc, #352]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002120:	4a57      	ldr	r2, [pc, #348]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	6713      	str	r3, [r2, #112]	@ 0x70
 8002128:	4b55      	ldr	r3, [pc, #340]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212c:	4a54      	ldr	r2, [pc, #336]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800212e:	f023 0304 	bic.w	r3, r3, #4
 8002132:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7ff fbc4 	bl	80018c8 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7ff fbc0 	bl	80018c8 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0cb      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	4b49      	ldr	r3, [pc, #292]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0ee      	beq.n	8002144 <HAL_RCC_OscConfig+0x334>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7ff fbae 	bl	80018c8 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7ff fbaa 	bl	80018c8 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0b5      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002186:	4b3e      	ldr	r3, [pc, #248]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ee      	bne.n	8002170 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002198:	4b39      	ldr	r3, [pc, #228]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	4a38      	ldr	r2, [pc, #224]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800219e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a1 	beq.w	80022f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ae:	4b34      	ldr	r3, [pc, #208]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d05c      	beq.n	8002274 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d141      	bne.n	8002246 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b31      	ldr	r3, [pc, #196]	@ (8002288 <HAL_RCC_OscConfig+0x478>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fb7e 	bl	80018c8 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7ff fb7a 	bl	80018c8 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e087      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	019b      	lsls	r3, r3, #6
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002204:	085b      	lsrs	r3, r3, #1
 8002206:	3b01      	subs	r3, #1
 8002208:	041b      	lsls	r3, r3, #16
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	061b      	lsls	r3, r3, #24
 8002212:	491b      	ldr	r1, [pc, #108]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_RCC_OscConfig+0x478>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7ff fb53 	bl	80018c8 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7ff fb4f 	bl	80018c8 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e05c      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002238:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x416>
 8002244:	e054      	b.n	80022f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002246:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <HAL_RCC_OscConfig+0x478>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fb3c 	bl	80018c8 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7ff fb38 	bl	80018c8 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e045      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_RCC_OscConfig+0x470>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x444>
 8002272:	e03d      	b.n	80022f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e038      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000
 8002288:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800228c:	4b1b      	ldr	r3, [pc, #108]	@ (80022fc <HAL_RCC_OscConfig+0x4ec>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d028      	beq.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d121      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d11a      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d111      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d2:	085b      	lsrs	r3, r3, #1
 80022d4:	3b01      	subs	r3, #1
 80022d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d107      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0cc      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b68      	ldr	r3, [pc, #416]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d90c      	bls.n	800233c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b65      	ldr	r3, [pc, #404]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0b8      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4b59      	ldr	r3, [pc, #356]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a58      	ldr	r2, [pc, #352]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800235e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800236c:	4b53      	ldr	r3, [pc, #332]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a52      	ldr	r2, [pc, #328]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b50      	ldr	r3, [pc, #320]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	494d      	ldr	r1, [pc, #308]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d044      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d119      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d003      	beq.n	80023be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b3f      	ldr	r3, [pc, #252]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3b      	ldr	r3, [pc, #236]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e067      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b37      	ldr	r3, [pc, #220]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4934      	ldr	r1, [pc, #208]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7ff fa6a 	bl	80018c8 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7ff fa66 	bl	80018c8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b25      	ldr	r3, [pc, #148]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d20c      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4916      	ldr	r1, [pc, #88]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002472:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490e      	ldr	r1, [pc, #56]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f821 	bl	80024cc <HAL_RCC_GetSysClockFreq>
 800248a:	4602      	mov	r2, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490a      	ldr	r1, [pc, #40]	@ (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a09      	ldr	r2, [pc, #36]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024a2:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f834 	bl	8001514 <HAL_InitTick>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00
 80024bc:	40023800 	.word	0x40023800
 80024c0:	08008330 	.word	0x08008330
 80024c4:	20000008 	.word	0x20000008
 80024c8:	2000000c 	.word	0x2000000c

080024cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d0:	b094      	sub	sp, #80	@ 0x50
 80024d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e4:	4b79      	ldr	r3, [pc, #484]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d00d      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x40>
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	f200 80e1 	bhi.w	80026b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x34>
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x3a>
 80024fe:	e0db      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4b73      	ldr	r3, [pc, #460]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002502:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002504:	e0db      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002506:	4b73      	ldr	r3, [pc, #460]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002508:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800250a:	e0d8      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800250c:	4b6f      	ldr	r3, [pc, #444]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002514:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002516:	4b6d      	ldr	r3, [pc, #436]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d063      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002522:	4b6a      	ldr	r3, [pc, #424]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	099b      	lsrs	r3, r3, #6
 8002528:	2200      	movs	r2, #0
 800252a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800252c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800252e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002534:	633b      	str	r3, [r7, #48]	@ 0x30
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	@ 0x34
 800253a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800253e:	4622      	mov	r2, r4
 8002540:	462b      	mov	r3, r5
 8002542:	f04f 0000 	mov.w	r0, #0
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	0159      	lsls	r1, r3, #5
 800254c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002550:	0150      	lsls	r0, r2, #5
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4621      	mov	r1, r4
 8002558:	1a51      	subs	r1, r2, r1
 800255a:	6139      	str	r1, [r7, #16]
 800255c:	4629      	mov	r1, r5
 800255e:	eb63 0301 	sbc.w	r3, r3, r1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002570:	4659      	mov	r1, fp
 8002572:	018b      	lsls	r3, r1, #6
 8002574:	4651      	mov	r1, sl
 8002576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800257a:	4651      	mov	r1, sl
 800257c:	018a      	lsls	r2, r1, #6
 800257e:	4651      	mov	r1, sl
 8002580:	ebb2 0801 	subs.w	r8, r2, r1
 8002584:	4659      	mov	r1, fp
 8002586:	eb63 0901 	sbc.w	r9, r3, r1
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800259a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259e:	4690      	mov	r8, r2
 80025a0:	4699      	mov	r9, r3
 80025a2:	4623      	mov	r3, r4
 80025a4:	eb18 0303 	adds.w	r3, r8, r3
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	462b      	mov	r3, r5
 80025ac:	eb49 0303 	adc.w	r3, r9, r3
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025be:	4629      	mov	r1, r5
 80025c0:	024b      	lsls	r3, r1, #9
 80025c2:	4621      	mov	r1, r4
 80025c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c8:	4621      	mov	r1, r4
 80025ca:	024a      	lsls	r2, r1, #9
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d2:	2200      	movs	r2, #0
 80025d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025dc:	f7fd fe60 	bl	80002a0 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4613      	mov	r3, r2
 80025e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e8:	e058      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	4b38      	ldr	r3, [pc, #224]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	2200      	movs	r2, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	4611      	mov	r1, r2
 80025f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025fa:	623b      	str	r3, [r7, #32]
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002600:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002604:	4642      	mov	r2, r8
 8002606:	464b      	mov	r3, r9
 8002608:	f04f 0000 	mov.w	r0, #0
 800260c:	f04f 0100 	mov.w	r1, #0
 8002610:	0159      	lsls	r1, r3, #5
 8002612:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002616:	0150      	lsls	r0, r2, #5
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4641      	mov	r1, r8
 800261e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002622:	4649      	mov	r1, r9
 8002624:	eb63 0b01 	sbc.w	fp, r3, r1
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002634:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002638:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800263c:	ebb2 040a 	subs.w	r4, r2, sl
 8002640:	eb63 050b 	sbc.w	r5, r3, fp
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	00eb      	lsls	r3, r5, #3
 800264e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002652:	00e2      	lsls	r2, r4, #3
 8002654:	4614      	mov	r4, r2
 8002656:	461d      	mov	r5, r3
 8002658:	4643      	mov	r3, r8
 800265a:	18e3      	adds	r3, r4, r3
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	464b      	mov	r3, r9
 8002660:	eb45 0303 	adc.w	r3, r5, r3
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002672:	4629      	mov	r1, r5
 8002674:	028b      	lsls	r3, r1, #10
 8002676:	4621      	mov	r1, r4
 8002678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800267c:	4621      	mov	r1, r4
 800267e:	028a      	lsls	r2, r1, #10
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002686:	2200      	movs	r2, #0
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	61fa      	str	r2, [r7, #28]
 800268c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002690:	f7fd fe06 	bl	80002a0 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4613      	mov	r3, r2
 800269a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	3301      	adds	r3, #1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80026ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b6:	e002      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3750      	adds	r7, #80	@ 0x50
 80026c4:	46bd      	mov	sp, r7
 80026c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	00f42400 	.word	0x00f42400
 80026d4:	007a1200 	.word	0x007a1200

080026d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b03      	ldr	r3, [pc, #12]	@ (80026ec <HAL_RCC_GetHCLKFreq+0x14>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000008 	.word	0x20000008

080026f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f4:	f7ff fff0 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0a9b      	lsrs	r3, r3, #10
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	@ (8002714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	08008340 	.word	0x08008340

08002718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800271c:	f7ff ffdc 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	0b5b      	lsrs	r3, r3, #13
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4903      	ldr	r1, [pc, #12]	@ (800273c <HAL_RCC_GetPCLK2Freq+0x24>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40023800 	.word	0x40023800
 800273c:	08008340 	.word	0x08008340

08002740 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	220f      	movs	r2, #15
 800274e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002750:	4b12      	ldr	r3, [pc, #72]	@ (800279c <HAL_RCC_GetClockConfig+0x5c>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0203 	and.w	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800275c:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <HAL_RCC_GetClockConfig+0x5c>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <HAL_RCC_GetClockConfig+0x5c>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002774:	4b09      	ldr	r3, [pc, #36]	@ (800279c <HAL_RCC_GetClockConfig+0x5c>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	08db      	lsrs	r3, r3, #3
 800277a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <HAL_RCC_GetClockConfig+0x60>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0207 	and.w	r2, r3, #7
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	601a      	str	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40023c00 	.word	0x40023c00

080027a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e041      	b.n	800283a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f839 	bl	8002842 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	4610      	mov	r0, r2
 80027e4:	f000 f9c0 	bl	8002b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d001      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e04e      	b.n	800290e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a23      	ldr	r2, [pc, #140]	@ (800291c <HAL_TIM_Base_Start_IT+0xc4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d022      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800289a:	d01d      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002920 <HAL_TIM_Base_Start_IT+0xc8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d018      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002924 <HAL_TIM_Base_Start_IT+0xcc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d013      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002928 <HAL_TIM_Base_Start_IT+0xd0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00e      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1b      	ldr	r2, [pc, #108]	@ (800292c <HAL_TIM_Base_Start_IT+0xd4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d009      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a19      	ldr	r2, [pc, #100]	@ (8002930 <HAL_TIM_Base_Start_IT+0xd8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0x80>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <HAL_TIM_Base_Start_IT+0xdc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d111      	bne.n	80028fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d010      	beq.n	800290c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fa:	e007      	b.n	800290c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40010000 	.word	0x40010000
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800
 8002928:	40000c00 	.word	0x40000c00
 800292c:	40010400 	.word	0x40010400
 8002930:	40014000 	.word	0x40014000
 8002934:	40001800 	.word	0x40001800

08002938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d020      	beq.n	800299c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0202 	mvn.w	r2, #2
 800296c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f8d2 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8c4 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f8d5 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d020      	beq.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0204 	mvn.w	r2, #4
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f8ac 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f89e 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f8af 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d020      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01b      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0208 	mvn.w	r2, #8
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f886 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f878 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f889 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d020      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01b      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0210 	mvn.w	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2208      	movs	r2, #8
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f860 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f852 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f863 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00c      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0201 	mvn.w	r2, #1
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe f804 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00c      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f900 	bl	8002cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f834 	bl	8002b54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0220 	mvn.w	r2, #32
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f8d2 	bl	8002cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a43      	ldr	r2, [pc, #268]	@ (8002c88 <TIM_Base_SetConfig+0x120>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b86:	d00f      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a40      	ldr	r2, [pc, #256]	@ (8002c8c <TIM_Base_SetConfig+0x124>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00b      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3f      	ldr	r2, [pc, #252]	@ (8002c90 <TIM_Base_SetConfig+0x128>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8002c94 <TIM_Base_SetConfig+0x12c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3d      	ldr	r2, [pc, #244]	@ (8002c98 <TIM_Base_SetConfig+0x130>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d108      	bne.n	8002bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a32      	ldr	r2, [pc, #200]	@ (8002c88 <TIM_Base_SetConfig+0x120>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d02b      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc8:	d027      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8002c8c <TIM_Base_SetConfig+0x124>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d023      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8002c90 <TIM_Base_SetConfig+0x128>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01f      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8002c94 <TIM_Base_SetConfig+0x12c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01b      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a2c      	ldr	r2, [pc, #176]	@ (8002c98 <TIM_Base_SetConfig+0x130>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d017      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a2b      	ldr	r2, [pc, #172]	@ (8002c9c <TIM_Base_SetConfig+0x134>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca0 <TIM_Base_SetConfig+0x138>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00f      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a29      	ldr	r2, [pc, #164]	@ (8002ca4 <TIM_Base_SetConfig+0x13c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00b      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a28      	ldr	r2, [pc, #160]	@ (8002ca8 <TIM_Base_SetConfig+0x140>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d007      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a27      	ldr	r2, [pc, #156]	@ (8002cac <TIM_Base_SetConfig+0x144>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d003      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a26      	ldr	r2, [pc, #152]	@ (8002cb0 <TIM_Base_SetConfig+0x148>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d108      	bne.n	8002c2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c88 <TIM_Base_SetConfig+0x120>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d003      	beq.n	8002c5a <TIM_Base_SetConfig+0xf2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a10      	ldr	r2, [pc, #64]	@ (8002c98 <TIM_Base_SetConfig+0x130>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d103      	bne.n	8002c62 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f043 0204 	orr.w	r2, r3, #4
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	601a      	str	r2, [r3, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40000800 	.word	0x40000800
 8002c94:	40000c00 	.word	0x40000c00
 8002c98:	40010400 	.word	0x40010400
 8002c9c:	40014000 	.word	0x40014000
 8002ca0:	40014400 	.word	0x40014400
 8002ca4:	40014800 	.word	0x40014800
 8002ca8:	40001800 	.word	0x40001800
 8002cac:	40001c00 	.word	0x40001c00
 8002cb0:	40002000 	.word	0x40002000

08002cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e042      	b.n	8002d74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fe fbbe 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	@ 0x24
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fa09 	bl	8003138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d175      	bne.n	8002e88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_UART_Transmit+0x2c>
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e06e      	b.n	8002e8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2221      	movs	r2, #33	@ 0x21
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dba:	f7fe fd85 	bl	80018c8 <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	88fa      	ldrh	r2, [r7, #6]
 8002dca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dd4:	d108      	bne.n	8002de8 <HAL_UART_Transmit+0x6c>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d104      	bne.n	8002de8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	e003      	b.n	8002df0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002df0:	e02e      	b.n	8002e50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2180      	movs	r1, #128	@ 0x80
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f8df 	bl	8002fc0 <UART_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e03a      	b.n	8002e8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	e007      	b.n	8002e42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1cb      	bne.n	8002df2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2140      	movs	r1, #64	@ 0x40
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f8ab 	bl	8002fc0 <UART_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e006      	b.n	8002e8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e000      	b.n	8002e8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
  }
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b08a      	sub	sp, #40	@ 0x28
 8002e96:	af02      	add	r7, sp, #8
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	f040 8081 	bne.w	8002fb6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_UART_Receive+0x2e>
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e079      	b.n	8002fb8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2222      	movs	r2, #34	@ 0x22
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ed8:	f7fe fcf6 	bl	80018c8 <HAL_GetTick>
 8002edc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	88fa      	ldrh	r2, [r7, #6]
 8002ee2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	88fa      	ldrh	r2, [r7, #6]
 8002ee8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef2:	d108      	bne.n	8002f06 <HAL_UART_Receive+0x74>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d104      	bne.n	8002f06 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	e003      	b.n	8002f0e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f0e:	e047      	b.n	8002fa0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2200      	movs	r2, #0
 8002f18:	2120      	movs	r1, #32
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f850 	bl	8002fc0 <UART_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e042      	b.n	8002fb8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10c      	bne.n	8002f52 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	e01f      	b.n	8002f92 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f5a:	d007      	beq.n	8002f6c <HAL_UART_Receive+0xda>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <HAL_UART_Receive+0xe8>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e008      	b.n	8002f8c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1b2      	bne.n	8002f10 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
  }
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd0:	e03b      	b.n	800304a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d037      	beq.n	800304a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7fe fc75 	bl	80018c8 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	6a3a      	ldr	r2, [r7, #32]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d302      	bcc.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e03a      	b.n	800306a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d023      	beq.n	800304a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b80      	cmp	r3, #128	@ 0x80
 8003006:	d020      	beq.n	800304a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b40      	cmp	r3, #64	@ 0x40
 800300c:	d01d      	beq.n	800304a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b08      	cmp	r3, #8
 800301a:	d116      	bne.n	800304a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f81d 	bl	8003072 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2208      	movs	r2, #8
 800303c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e00f      	b.n	800306a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4013      	ands	r3, r2
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	429a      	cmp	r2, r3
 8003058:	bf0c      	ite	eq
 800305a:	2301      	moveq	r3, #1
 800305c:	2300      	movne	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	429a      	cmp	r2, r3
 8003066:	d0b4      	beq.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003072:	b480      	push	{r7}
 8003074:	b095      	sub	sp, #84	@ 0x54
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	330c      	adds	r3, #12
 8003080:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003084:	e853 3f00 	ldrex	r3, [r3]
 8003088:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003090:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	330c      	adds	r3, #12
 8003098:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800309a:	643a      	str	r2, [r7, #64]	@ 0x40
 800309c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030a2:	e841 2300 	strex	r3, r2, [r1]
 80030a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1e5      	bne.n	800307a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3314      	adds	r3, #20
 80030b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	e853 3f00 	ldrex	r3, [r3]
 80030bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3314      	adds	r3, #20
 80030cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e5      	bne.n	80030ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d119      	bne.n	800311e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	330c      	adds	r3, #12
 80030f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f023 0310 	bic.w	r3, r3, #16
 8003100:	647b      	str	r3, [r7, #68]	@ 0x44
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	330c      	adds	r3, #12
 8003108:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800310a:	61ba      	str	r2, [r7, #24]
 800310c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310e:	6979      	ldr	r1, [r7, #20]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	e841 2300 	strex	r3, r2, [r1]
 8003116:	613b      	str	r3, [r7, #16]
   return(result);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1e5      	bne.n	80030ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800312c:	bf00      	nop
 800312e:	3754      	adds	r7, #84	@ 0x54
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800313c:	b0c0      	sub	sp, #256	@ 0x100
 800313e:	af00      	add	r7, sp, #0
 8003140:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	68d9      	ldr	r1, [r3, #12]
 8003156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	ea40 0301 	orr.w	r3, r0, r1
 8003160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	431a      	orrs	r2, r3
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	431a      	orrs	r2, r3
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003190:	f021 010c 	bic.w	r1, r1, #12
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800319e:	430b      	orrs	r3, r1
 80031a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	6999      	ldr	r1, [r3, #24]
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	ea40 0301 	orr.w	r3, r0, r1
 80031be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003404 <UART_SetConfig+0x2cc>)
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d005      	beq.n	80031d8 <UART_SetConfig+0xa0>
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b8d      	ldr	r3, [pc, #564]	@ (8003408 <UART_SetConfig+0x2d0>)
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d104      	bne.n	80031e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031d8:	f7ff fa9e 	bl	8002718 <HAL_RCC_GetPCLK2Freq>
 80031dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031e0:	e003      	b.n	80031ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031e2:	f7ff fa85 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 80031e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f4:	f040 810c 	bne.w	8003410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031fc:	2200      	movs	r2, #0
 80031fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003202:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800320a:	4622      	mov	r2, r4
 800320c:	462b      	mov	r3, r5
 800320e:	1891      	adds	r1, r2, r2
 8003210:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003212:	415b      	adcs	r3, r3
 8003214:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800321a:	4621      	mov	r1, r4
 800321c:	eb12 0801 	adds.w	r8, r2, r1
 8003220:	4629      	mov	r1, r5
 8003222:	eb43 0901 	adc.w	r9, r3, r1
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800323a:	4690      	mov	r8, r2
 800323c:	4699      	mov	r9, r3
 800323e:	4623      	mov	r3, r4
 8003240:	eb18 0303 	adds.w	r3, r8, r3
 8003244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003248:	462b      	mov	r3, r5
 800324a:	eb49 0303 	adc.w	r3, r9, r3
 800324e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800325e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003266:	460b      	mov	r3, r1
 8003268:	18db      	adds	r3, r3, r3
 800326a:	653b      	str	r3, [r7, #80]	@ 0x50
 800326c:	4613      	mov	r3, r2
 800326e:	eb42 0303 	adc.w	r3, r2, r3
 8003272:	657b      	str	r3, [r7, #84]	@ 0x54
 8003274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800327c:	f7fd f810 	bl	80002a0 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4b61      	ldr	r3, [pc, #388]	@ (800340c <UART_SetConfig+0x2d4>)
 8003286:	fba3 2302 	umull	r2, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	011c      	lsls	r4, r3, #4
 800328e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003292:	2200      	movs	r2, #0
 8003294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003298:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800329c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032a0:	4642      	mov	r2, r8
 80032a2:	464b      	mov	r3, r9
 80032a4:	1891      	adds	r1, r2, r2
 80032a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032a8:	415b      	adcs	r3, r3
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032b0:	4641      	mov	r1, r8
 80032b2:	eb12 0a01 	adds.w	sl, r2, r1
 80032b6:	4649      	mov	r1, r9
 80032b8:	eb43 0b01 	adc.w	fp, r3, r1
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032d0:	4692      	mov	sl, r2
 80032d2:	469b      	mov	fp, r3
 80032d4:	4643      	mov	r3, r8
 80032d6:	eb1a 0303 	adds.w	r3, sl, r3
 80032da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032de:	464b      	mov	r3, r9
 80032e0:	eb4b 0303 	adc.w	r3, fp, r3
 80032e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032fc:	460b      	mov	r3, r1
 80032fe:	18db      	adds	r3, r3, r3
 8003300:	643b      	str	r3, [r7, #64]	@ 0x40
 8003302:	4613      	mov	r3, r2
 8003304:	eb42 0303 	adc.w	r3, r2, r3
 8003308:	647b      	str	r3, [r7, #68]	@ 0x44
 800330a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800330e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003312:	f7fc ffc5 	bl	80002a0 <__aeabi_uldivmod>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4611      	mov	r1, r2
 800331c:	4b3b      	ldr	r3, [pc, #236]	@ (800340c <UART_SetConfig+0x2d4>)
 800331e:	fba3 2301 	umull	r2, r3, r3, r1
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2264      	movs	r2, #100	@ 0x64
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	1acb      	subs	r3, r1, r3
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003332:	4b36      	ldr	r3, [pc, #216]	@ (800340c <UART_SetConfig+0x2d4>)
 8003334:	fba3 2302 	umull	r2, r3, r3, r2
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003340:	441c      	add	r4, r3
 8003342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003346:	2200      	movs	r2, #0
 8003348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800334c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003354:	4642      	mov	r2, r8
 8003356:	464b      	mov	r3, r9
 8003358:	1891      	adds	r1, r2, r2
 800335a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800335c:	415b      	adcs	r3, r3
 800335e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003364:	4641      	mov	r1, r8
 8003366:	1851      	adds	r1, r2, r1
 8003368:	6339      	str	r1, [r7, #48]	@ 0x30
 800336a:	4649      	mov	r1, r9
 800336c:	414b      	adcs	r3, r1
 800336e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800337c:	4659      	mov	r1, fp
 800337e:	00cb      	lsls	r3, r1, #3
 8003380:	4651      	mov	r1, sl
 8003382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003386:	4651      	mov	r1, sl
 8003388:	00ca      	lsls	r2, r1, #3
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	4603      	mov	r3, r0
 8003390:	4642      	mov	r2, r8
 8003392:	189b      	adds	r3, r3, r2
 8003394:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003398:	464b      	mov	r3, r9
 800339a:	460a      	mov	r2, r1
 800339c:	eb42 0303 	adc.w	r3, r2, r3
 80033a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033b8:	460b      	mov	r3, r1
 80033ba:	18db      	adds	r3, r3, r3
 80033bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033be:	4613      	mov	r3, r2
 80033c0:	eb42 0303 	adc.w	r3, r2, r3
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033ce:	f7fc ff67 	bl	80002a0 <__aeabi_uldivmod>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <UART_SetConfig+0x2d4>)
 80033d8:	fba3 1302 	umull	r1, r3, r3, r2
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	2164      	movs	r1, #100	@ 0x64
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	3332      	adds	r3, #50	@ 0x32
 80033ea:	4a08      	ldr	r2, [pc, #32]	@ (800340c <UART_SetConfig+0x2d4>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	f003 0207 	and.w	r2, r3, #7
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4422      	add	r2, r4
 80033fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003400:	e106      	b.n	8003610 <UART_SetConfig+0x4d8>
 8003402:	bf00      	nop
 8003404:	40011000 	.word	0x40011000
 8003408:	40011400 	.word	0x40011400
 800340c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003414:	2200      	movs	r2, #0
 8003416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800341a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800341e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003422:	4642      	mov	r2, r8
 8003424:	464b      	mov	r3, r9
 8003426:	1891      	adds	r1, r2, r2
 8003428:	6239      	str	r1, [r7, #32]
 800342a:	415b      	adcs	r3, r3
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
 800342e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003432:	4641      	mov	r1, r8
 8003434:	1854      	adds	r4, r2, r1
 8003436:	4649      	mov	r1, r9
 8003438:	eb43 0501 	adc.w	r5, r3, r1
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	00eb      	lsls	r3, r5, #3
 8003446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800344a:	00e2      	lsls	r2, r4, #3
 800344c:	4614      	mov	r4, r2
 800344e:	461d      	mov	r5, r3
 8003450:	4643      	mov	r3, r8
 8003452:	18e3      	adds	r3, r4, r3
 8003454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003458:	464b      	mov	r3, r9
 800345a:	eb45 0303 	adc.w	r3, r5, r3
 800345e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800346e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800347e:	4629      	mov	r1, r5
 8003480:	008b      	lsls	r3, r1, #2
 8003482:	4621      	mov	r1, r4
 8003484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003488:	4621      	mov	r1, r4
 800348a:	008a      	lsls	r2, r1, #2
 800348c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003490:	f7fc ff06 	bl	80002a0 <__aeabi_uldivmod>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4b60      	ldr	r3, [pc, #384]	@ (800361c <UART_SetConfig+0x4e4>)
 800349a:	fba3 2302 	umull	r2, r3, r3, r2
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	011c      	lsls	r4, r3, #4
 80034a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034b4:	4642      	mov	r2, r8
 80034b6:	464b      	mov	r3, r9
 80034b8:	1891      	adds	r1, r2, r2
 80034ba:	61b9      	str	r1, [r7, #24]
 80034bc:	415b      	adcs	r3, r3
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c4:	4641      	mov	r1, r8
 80034c6:	1851      	adds	r1, r2, r1
 80034c8:	6139      	str	r1, [r7, #16]
 80034ca:	4649      	mov	r1, r9
 80034cc:	414b      	adcs	r3, r1
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034dc:	4659      	mov	r1, fp
 80034de:	00cb      	lsls	r3, r1, #3
 80034e0:	4651      	mov	r1, sl
 80034e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e6:	4651      	mov	r1, sl
 80034e8:	00ca      	lsls	r2, r1, #3
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	4603      	mov	r3, r0
 80034f0:	4642      	mov	r2, r8
 80034f2:	189b      	adds	r3, r3, r2
 80034f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034f8:	464b      	mov	r3, r9
 80034fa:	460a      	mov	r2, r1
 80034fc:	eb42 0303 	adc.w	r3, r2, r3
 8003500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800350e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800351c:	4649      	mov	r1, r9
 800351e:	008b      	lsls	r3, r1, #2
 8003520:	4641      	mov	r1, r8
 8003522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003526:	4641      	mov	r1, r8
 8003528:	008a      	lsls	r2, r1, #2
 800352a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800352e:	f7fc feb7 	bl	80002a0 <__aeabi_uldivmod>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4611      	mov	r1, r2
 8003538:	4b38      	ldr	r3, [pc, #224]	@ (800361c <UART_SetConfig+0x4e4>)
 800353a:	fba3 2301 	umull	r2, r3, r3, r1
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2264      	movs	r2, #100	@ 0x64
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	1acb      	subs	r3, r1, r3
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	3332      	adds	r3, #50	@ 0x32
 800354c:	4a33      	ldr	r2, [pc, #204]	@ (800361c <UART_SetConfig+0x4e4>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003558:	441c      	add	r4, r3
 800355a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800355e:	2200      	movs	r2, #0
 8003560:	673b      	str	r3, [r7, #112]	@ 0x70
 8003562:	677a      	str	r2, [r7, #116]	@ 0x74
 8003564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003568:	4642      	mov	r2, r8
 800356a:	464b      	mov	r3, r9
 800356c:	1891      	adds	r1, r2, r2
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	415b      	adcs	r3, r3
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003578:	4641      	mov	r1, r8
 800357a:	1851      	adds	r1, r2, r1
 800357c:	6039      	str	r1, [r7, #0]
 800357e:	4649      	mov	r1, r9
 8003580:	414b      	adcs	r3, r1
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003590:	4659      	mov	r1, fp
 8003592:	00cb      	lsls	r3, r1, #3
 8003594:	4651      	mov	r1, sl
 8003596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800359a:	4651      	mov	r1, sl
 800359c:	00ca      	lsls	r2, r1, #3
 800359e:	4610      	mov	r0, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	4603      	mov	r3, r0
 80035a4:	4642      	mov	r2, r8
 80035a6:	189b      	adds	r3, r3, r2
 80035a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035aa:	464b      	mov	r3, r9
 80035ac:	460a      	mov	r2, r1
 80035ae:	eb42 0303 	adc.w	r3, r2, r3
 80035b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80035be:	667a      	str	r2, [r7, #100]	@ 0x64
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035cc:	4649      	mov	r1, r9
 80035ce:	008b      	lsls	r3, r1, #2
 80035d0:	4641      	mov	r1, r8
 80035d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d6:	4641      	mov	r1, r8
 80035d8:	008a      	lsls	r2, r1, #2
 80035da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035de:	f7fc fe5f 	bl	80002a0 <__aeabi_uldivmod>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <UART_SetConfig+0x4e4>)
 80035e8:	fba3 1302 	umull	r1, r3, r3, r2
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	2164      	movs	r1, #100	@ 0x64
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	3332      	adds	r3, #50	@ 0x32
 80035fa:	4a08      	ldr	r2, [pc, #32]	@ (800361c <UART_SetConfig+0x4e4>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	f003 020f 	and.w	r2, r3, #15
 8003606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4422      	add	r2, r4
 800360e:	609a      	str	r2, [r3, #8]
}
 8003610:	bf00      	nop
 8003612:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003616:	46bd      	mov	sp, r7
 8003618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800361c:	51eb851f 	.word	0x51eb851f

08003620 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f103 0208 	add.w	r2, r3, #8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f103 0208 	add.w	r2, r3, #8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f103 0208 	add.w	r2, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036c2:	b480      	push	{r7}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d103      	bne.n	80036e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e00c      	b.n	80036fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3308      	adds	r3, #8
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	e002      	b.n	80036f0 <vListInsert+0x2e>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d2f6      	bcs.n	80036ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	601a      	str	r2, [r3, #0]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6892      	ldr	r2, [r2, #8]
 800374a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6852      	ldr	r2, [r2, #4]
 8003754:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	d103      	bne.n	8003768 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	1e5a      	subs	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10b      	bne.n	80037b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037ae:	bf00      	nop
 80037b0:	bf00      	nop
 80037b2:	e7fd      	b.n	80037b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037b4:	f002 fbb8 	bl	8005f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c0:	68f9      	ldr	r1, [r7, #12]
 80037c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	441a      	add	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e4:	3b01      	subs	r3, #1
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	441a      	add	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	22ff      	movs	r2, #255	@ 0xff
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	22ff      	movs	r2, #255	@ 0xff
 8003800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d114      	bne.n	8003834 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01a      	beq.n	8003848 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3310      	adds	r3, #16
 8003816:	4618      	mov	r0, r3
 8003818:	f001 f97a 	bl	8004b10 <xTaskRemoveFromEventList>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d012      	beq.n	8003848 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003822:	4b0d      	ldr	r3, [pc, #52]	@ (8003858 <xQueueGenericReset+0xd0>)
 8003824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	e009      	b.n	8003848 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3310      	adds	r3, #16
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fef1 	bl	8003620 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3324      	adds	r3, #36	@ 0x24
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff feec 	bl	8003620 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003848:	f002 fba0 	bl	8005f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800384c:	2301      	movs	r3, #1
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	e000ed04 	.word	0xe000ed04

0800385c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	@ 0x28
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10b      	bne.n	8003888 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	613b      	str	r3, [r7, #16]
}
 8003882:	bf00      	nop
 8003884:	bf00      	nop
 8003886:	e7fd      	b.n	8003884 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	e004      	b.n	800389e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	fb02 f303 	mul.w	r3, r2, r3
 800389c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3350      	adds	r3, #80	@ 0x50
 80038a2:	4618      	mov	r0, r3
 80038a4:	f002 fc62 	bl	800616c <pvPortMalloc>
 80038a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	3350      	adds	r3, #80	@ 0x50
 80038b8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038ba:	79fa      	ldrb	r2, [r7, #7]
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f805 	bl	80038d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80038cc:	69bb      	ldr	r3, [r7, #24]
	}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e002      	b.n	80038f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003904:	2101      	movs	r1, #1
 8003906:	69b8      	ldr	r0, [r7, #24]
 8003908:	f7ff ff3e 	bl	8003788 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08e      	sub	sp, #56	@ 0x38
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800392a:	2300      	movs	r3, #0
 800392c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10b      	bne.n	8003950 <xQueueGenericSend+0x34>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800394a:	bf00      	nop
 800394c:	bf00      	nop
 800394e:	e7fd      	b.n	800394c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <xQueueGenericSend+0x42>
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <xQueueGenericSend+0x46>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <xQueueGenericSend+0x48>
 8003962:	2300      	movs	r3, #0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <xQueueGenericSend+0x64>
	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800397a:	bf00      	nop
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d103      	bne.n	800398e <xQueueGenericSend+0x72>
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <xQueueGenericSend+0x76>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <xQueueGenericSend+0x78>
 8003992:	2300      	movs	r3, #0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10b      	bne.n	80039b0 <xQueueGenericSend+0x94>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	623b      	str	r3, [r7, #32]
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	e7fd      	b.n	80039ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039b0:	f001 fb22 	bl	8004ff8 <xTaskGetSchedulerState>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d102      	bne.n	80039c0 <xQueueGenericSend+0xa4>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <xQueueGenericSend+0xa8>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <xQueueGenericSend+0xaa>
 80039c4:	2300      	movs	r3, #0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	61fb      	str	r3, [r7, #28]
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	e7fd      	b.n	80039de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039e2:	f002 faa1 	bl	8005f28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <xQueueGenericSend+0xdc>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d129      	bne.n	8003a4c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039fe:	f000 fa0d 	bl	8003e1c <prvCopyDataToQueue>
 8003a02:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0e:	3324      	adds	r3, #36	@ 0x24
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 f87d 	bl	8004b10 <xTaskRemoveFromEventList>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a1c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b1c <xQueueGenericSend+0x200>)
 8003a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	e00a      	b.n	8003a44 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a34:	4b39      	ldr	r3, [pc, #228]	@ (8003b1c <xQueueGenericSend+0x200>)
 8003a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a44:	f002 faa2 	bl	8005f8c <vPortExitCritical>
				return pdPASS;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e063      	b.n	8003b14 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a52:	f002 fa9b 	bl	8005f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e05c      	b.n	8003b14 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 f8b7 	bl	8004bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a6e:	f002 fa8d 	bl	8005f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a72:	f000 fd71 	bl	8004558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a76:	f002 fa57 	bl	8005f28 <vPortEnterCritical>
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a86:	d103      	bne.n	8003a90 <xQueueGenericSend+0x174>
 8003a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a96:	b25b      	sxtb	r3, r3
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d103      	bne.n	8003aa6 <xQueueGenericSend+0x18a>
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003aa6:	f002 fa71 	bl	8005f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aaa:	1d3a      	adds	r2, r7, #4
 8003aac:	f107 0314 	add.w	r3, r7, #20
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 f8a6 	bl	8004c04 <xTaskCheckForTimeOut>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d124      	bne.n	8003b08 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003abe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ac0:	f000 faa4 	bl	800400c <prvIsQueueFull>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d018      	beq.n	8003afc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003acc:	3310      	adds	r3, #16
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 ffca 	bl	8004a6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ada:	f000 fa2f 	bl	8003f3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ade:	f000 fd49 	bl	8004574 <xTaskResumeAll>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f47f af7c 	bne.w	80039e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003aea:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <xQueueGenericSend+0x200>)
 8003aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	e772      	b.n	80039e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003afc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003afe:	f000 fa1d 	bl	8003f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b02:	f000 fd37 	bl	8004574 <xTaskResumeAll>
 8003b06:	e76c      	b.n	80039e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b0a:	f000 fa17 	bl	8003f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b0e:	f000 fd31 	bl	8004574 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3738      	adds	r7, #56	@ 0x38
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	e000ed04 	.word	0xe000ed04

08003b20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08e      	sub	sp, #56	@ 0x38
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <xQueueGenericSendFromISR+0x3e>
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <xQueueGenericSendFromISR+0x42>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <xQueueGenericSendFromISR+0x44>
 8003b62:	2300      	movs	r3, #0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	623b      	str	r3, [r7, #32]
}
 8003b7a:	bf00      	nop
 8003b7c:	bf00      	nop
 8003b7e:	e7fd      	b.n	8003b7c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d103      	bne.n	8003b8e <xQueueGenericSendFromISR+0x6e>
 8003b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <xQueueGenericSendFromISR+0x72>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <xQueueGenericSendFromISR+0x74>
 8003b92:	2300      	movs	r3, #0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10b      	bne.n	8003bb0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	61fb      	str	r3, [r7, #28]
}
 8003baa:	bf00      	nop
 8003bac:	bf00      	nop
 8003bae:	e7fd      	b.n	8003bac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bb0:	f002 fa9a 	bl	80060e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bb4:	f3ef 8211 	mrs	r2, BASEPRI
 8003bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	61ba      	str	r2, [r7, #24]
 8003bca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003bcc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d302      	bcc.n	8003be2 <xQueueGenericSendFromISR+0xc2>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d12c      	bne.n	8003c3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003be8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bf2:	f000 f913 	bl	8003e1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bf6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfe:	d112      	bne.n	8003c26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d016      	beq.n	8003c36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0a:	3324      	adds	r3, #36	@ 0x24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 ff7f 	bl	8004b10 <xTaskRemoveFromEventList>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00e      	beq.n	8003c36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e007      	b.n	8003c36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	b25a      	sxtb	r2, r3
 8003c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003c36:	2301      	movs	r3, #1
 8003c38:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003c3a:	e001      	b.n	8003c40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c42:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3738      	adds	r7, #56	@ 0x38
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	@ 0x30
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <xQueueReceive+0x32>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	623b      	str	r3, [r7, #32]
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <xQueueReceive+0x40>
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <xQueueReceive+0x44>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <xQueueReceive+0x46>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <xQueueReceive+0x62>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	61fb      	str	r3, [r7, #28]
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	e7fd      	b.n	8003cb6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cba:	f001 f99d 	bl	8004ff8 <xTaskGetSchedulerState>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <xQueueReceive+0x72>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <xQueueReceive+0x76>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <xQueueReceive+0x78>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <xQueueReceive+0x94>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	61bb      	str	r3, [r7, #24]
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cec:	f002 f91c 	bl	8005f28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01f      	beq.n	8003d3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d00:	f000 f8f6 	bl	8003ef0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	1e5a      	subs	r2, r3, #1
 8003d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00f      	beq.n	8003d34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d16:	3310      	adds	r3, #16
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fef9 	bl	8004b10 <xTaskRemoveFromEventList>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d24:	4b3c      	ldr	r3, [pc, #240]	@ (8003e18 <xQueueReceive+0x1c0>)
 8003d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d34:	f002 f92a 	bl	8005f8c <vPortExitCritical>
				return pdPASS;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e069      	b.n	8003e10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d103      	bne.n	8003d4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d42:	f002 f923 	bl	8005f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e062      	b.n	8003e10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d50:	f107 0310 	add.w	r3, r7, #16
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 ff3f 	bl	8004bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d5e:	f002 f915 	bl	8005f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d62:	f000 fbf9 	bl	8004558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d66:	f002 f8df 	bl	8005f28 <vPortEnterCritical>
 8003d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d70:	b25b      	sxtb	r3, r3
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d76:	d103      	bne.n	8003d80 <xQueueReceive+0x128>
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d86:	b25b      	sxtb	r3, r3
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d103      	bne.n	8003d96 <xQueueReceive+0x13e>
 8003d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d96:	f002 f8f9 	bl	8005f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d9a:	1d3a      	adds	r2, r7, #4
 8003d9c:	f107 0310 	add.w	r3, r7, #16
 8003da0:	4611      	mov	r1, r2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 ff2e 	bl	8004c04 <xTaskCheckForTimeOut>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d123      	bne.n	8003df6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003db0:	f000 f916 	bl	8003fe0 <prvIsQueueEmpty>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d017      	beq.n	8003dea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	3324      	adds	r3, #36	@ 0x24
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fe52 	bl	8004a6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dca:	f000 f8b7 	bl	8003f3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003dce:	f000 fbd1 	bl	8004574 <xTaskResumeAll>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d189      	bne.n	8003cec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e18 <xQueueReceive+0x1c0>)
 8003dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	e780      	b.n	8003cec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dec:	f000 f8a6 	bl	8003f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003df0:	f000 fbc0 	bl	8004574 <xTaskResumeAll>
 8003df4:	e77a      	b.n	8003cec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003df6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003df8:	f000 f8a0 	bl	8003f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dfc:	f000 fbba 	bl	8004574 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e02:	f000 f8ed 	bl	8003fe0 <prvIsQueueEmpty>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f43f af6f 	beq.w	8003cec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3730      	adds	r7, #48	@ 0x30
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	e000ed04 	.word	0xe000ed04

08003e1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10d      	bne.n	8003e56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d14d      	bne.n	8003ede <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 f8f4 	bl	8005034 <xTaskPriorityDisinherit>
 8003e4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	e043      	b.n	8003ede <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d119      	bne.n	8003e90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6858      	ldr	r0, [r3, #4]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	461a      	mov	r2, r3
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	f002 fdfd 	bl	8006a66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	441a      	add	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d32b      	bcc.n	8003ede <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	e026      	b.n	8003ede <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	68d8      	ldr	r0, [r3, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e98:	461a      	mov	r2, r3
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	f002 fde3 	bl	8006a66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	425b      	negs	r3, r3
 8003eaa:	441a      	add	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d207      	bcs.n	8003ecc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	425b      	negs	r3, r3
 8003ec6:	441a      	add	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d105      	bne.n	8003ede <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003ee6:	697b      	ldr	r3, [r7, #20]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d018      	beq.n	8003f34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	441a      	add	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d303      	bcc.n	8003f24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68d9      	ldr	r1, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6838      	ldr	r0, [r7, #0]
 8003f30:	f002 fd99 	bl	8006a66 <memcpy>
	}
}
 8003f34:	bf00      	nop
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f44:	f001 fff0 	bl	8005f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f50:	e011      	b.n	8003f76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d012      	beq.n	8003f80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3324      	adds	r3, #36	@ 0x24
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fdd6 	bl	8004b10 <xTaskRemoveFromEventList>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f6a:	f000 feaf 	bl	8004ccc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	dce9      	bgt.n	8003f52 <prvUnlockQueue+0x16>
 8003f7e:	e000      	b.n	8003f82 <prvUnlockQueue+0x46>
					break;
 8003f80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	22ff      	movs	r2, #255	@ 0xff
 8003f86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003f8a:	f001 ffff 	bl	8005f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f8e:	f001 ffcb 	bl	8005f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f9a:	e011      	b.n	8003fc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d012      	beq.n	8003fca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3310      	adds	r3, #16
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fdb1 	bl	8004b10 <xTaskRemoveFromEventList>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003fb4:	f000 fe8a 	bl	8004ccc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fb8:	7bbb      	ldrb	r3, [r7, #14]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	dce9      	bgt.n	8003f9c <prvUnlockQueue+0x60>
 8003fc8:	e000      	b.n	8003fcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003fca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	22ff      	movs	r2, #255	@ 0xff
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003fd4:	f001 ffda 	bl	8005f8c <vPortExitCritical>
}
 8003fd8:	bf00      	nop
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fe8:	f001 ff9e 	bl	8005f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	e001      	b.n	8003ffe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ffe:	f001 ffc5 	bl	8005f8c <vPortExitCritical>

	return xReturn;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004014:	f001 ff88 	bl	8005f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004020:	429a      	cmp	r2, r3
 8004022:	d102      	bne.n	800402a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004024:	2301      	movs	r3, #1
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	e001      	b.n	800402e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800402e:	f001 ffad 	bl	8005f8c <vPortExitCritical>

	return xReturn;
 8004032:	68fb      	ldr	r3, [r7, #12]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e014      	b.n	8004076 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800404c:	4a0f      	ldr	r2, [pc, #60]	@ (800408c <vQueueAddToRegistry+0x50>)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10b      	bne.n	8004070 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004058:	490c      	ldr	r1, [pc, #48]	@ (800408c <vQueueAddToRegistry+0x50>)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004062:	4a0a      	ldr	r2, [pc, #40]	@ (800408c <vQueueAddToRegistry+0x50>)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800406e:	e006      	b.n	800407e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b07      	cmp	r3, #7
 800407a:	d9e7      	bls.n	800404c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	200042c0 	.word	0x200042c0

08004090 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040a0:	f001 ff42 	bl	8005f28 <vPortEnterCritical>
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040aa:	b25b      	sxtb	r3, r3
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d103      	bne.n	80040ba <vQueueWaitForMessageRestricted+0x2a>
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040c0:	b25b      	sxtb	r3, r3
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c6:	d103      	bne.n	80040d0 <vQueueWaitForMessageRestricted+0x40>
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040d0:	f001 ff5c 	bl	8005f8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3324      	adds	r3, #36	@ 0x24
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fce7 	bl	8004ab8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040ea:	6978      	ldr	r0, [r7, #20]
 80040ec:	f7ff ff26 	bl	8003f3c <prvUnlockQueue>
	}
 80040f0:	bf00      	nop
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08c      	sub	sp, #48	@ 0x30
 80040fc:	af04      	add	r7, sp, #16
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	4613      	mov	r3, r2
 8004106:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004108:	88fb      	ldrh	r3, [r7, #6]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f002 f82d 	bl	800616c <pvPortMalloc>
 8004112:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00e      	beq.n	8004138 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800411a:	205c      	movs	r0, #92	@ 0x5c
 800411c:	f002 f826 	bl	800616c <pvPortMalloc>
 8004120:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	631a      	str	r2, [r3, #48]	@ 0x30
 800412e:	e005      	b.n	800413c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004130:	6978      	ldr	r0, [r7, #20]
 8004132:	f002 f8e3 	bl	80062fc <vPortFree>
 8004136:	e001      	b.n	800413c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d013      	beq.n	800416a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	2300      	movs	r3, #0
 8004146:	9303      	str	r3, [sp, #12]
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f80e 	bl	800417a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800415e:	69f8      	ldr	r0, [r7, #28]
 8004160:	f000 f89e 	bl	80042a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004164:	2301      	movs	r3, #1
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	e002      	b.n	8004170 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004170:	69bb      	ldr	r3, [r7, #24]
	}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b088      	sub	sp, #32
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	461a      	mov	r2, r3
 8004192:	21a5      	movs	r1, #165	@ 0xa5
 8004194:	f002 fb74 	bl	8006880 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041a2:	3b01      	subs	r3, #1
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	f023 0307 	bic.w	r3, r3, #7
 80041b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00b      	beq.n	80041d4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	617b      	str	r3, [r7, #20]
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01f      	beq.n	800421a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	e012      	b.n	8004206 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	7819      	ldrb	r1, [r3, #0]
 80041e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	3334      	adds	r3, #52	@ 0x34
 80041f0:	460a      	mov	r2, r1
 80041f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4413      	add	r3, r2
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d006      	beq.n	800420e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	3301      	adds	r3, #1
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2b09      	cmp	r3, #9
 800420a:	d9e9      	bls.n	80041e0 <prvInitialiseNewTask+0x66>
 800420c:	e000      	b.n	8004210 <prvInitialiseNewTask+0x96>
			{
				break;
 800420e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004218:	e003      	b.n	8004222 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004224:	2b04      	cmp	r3, #4
 8004226:	d901      	bls.n	800422c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004228:	2304      	movs	r3, #4
 800422a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004230:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004234:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004236:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8004238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423a:	2200      	movs	r2, #0
 800423c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	3304      	adds	r3, #4
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fa0c 	bl	8003660 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424a:	3318      	adds	r3, #24
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fa07 	bl	8003660 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004256:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425a:	f1c3 0205 	rsb	r2, r3, #5
 800425e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004260:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004266:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	2200      	movs	r2, #0
 800426c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800426e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004270:	2200      	movs	r2, #0
 8004272:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	68f9      	ldr	r1, [r7, #12]
 8004280:	69b8      	ldr	r0, [r7, #24]
 8004282:	f001 fd23 	bl	8005ccc <pxPortInitialiseStack>
 8004286:	4602      	mov	r2, r0
 8004288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800428c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004296:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004298:	bf00      	nop
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042a8:	f001 fe3e 	bl	8005f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004360 <prvAddNewTaskToReadyList+0xc0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004360 <prvAddNewTaskToReadyList+0xc0>)
 80042b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004364 <prvAddNewTaskToReadyList+0xc4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042be:	4a29      	ldr	r2, [pc, #164]	@ (8004364 <prvAddNewTaskToReadyList+0xc4>)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042c4:	4b26      	ldr	r3, [pc, #152]	@ (8004360 <prvAddNewTaskToReadyList+0xc0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d110      	bne.n	80042ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042cc:	f000 fd22 	bl	8004d14 <prvInitialiseTaskLists>
 80042d0:	e00d      	b.n	80042ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042d2:	4b25      	ldr	r3, [pc, #148]	@ (8004368 <prvAddNewTaskToReadyList+0xc8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042da:	4b22      	ldr	r3, [pc, #136]	@ (8004364 <prvAddNewTaskToReadyList+0xc4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d802      	bhi.n	80042ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004364 <prvAddNewTaskToReadyList+0xc4>)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042ee:	4b1f      	ldr	r3, [pc, #124]	@ (800436c <prvAddNewTaskToReadyList+0xcc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	4a1d      	ldr	r2, [pc, #116]	@ (800436c <prvAddNewTaskToReadyList+0xcc>)
 80042f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042f8:	4b1c      	ldr	r3, [pc, #112]	@ (800436c <prvAddNewTaskToReadyList+0xcc>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	2201      	movs	r2, #1
 8004306:	409a      	lsls	r2, r3
 8004308:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <prvAddNewTaskToReadyList+0xd0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4313      	orrs	r3, r2
 800430e:	4a18      	ldr	r2, [pc, #96]	@ (8004370 <prvAddNewTaskToReadyList+0xd0>)
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4a15      	ldr	r2, [pc, #84]	@ (8004374 <prvAddNewTaskToReadyList+0xd4>)
 8004320:	441a      	add	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3304      	adds	r3, #4
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f7ff f9a6 	bl	800367a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800432e:	f001 fe2d 	bl	8005f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004332:	4b0d      	ldr	r3, [pc, #52]	@ (8004368 <prvAddNewTaskToReadyList+0xc8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00e      	beq.n	8004358 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800433a:	4b0a      	ldr	r3, [pc, #40]	@ (8004364 <prvAddNewTaskToReadyList+0xc4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	429a      	cmp	r2, r3
 8004346:	d207      	bcs.n	8004358 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004348:	4b0b      	ldr	r3, [pc, #44]	@ (8004378 <prvAddNewTaskToReadyList+0xd8>)
 800434a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200043d8 	.word	0x200043d8
 8004364:	20004300 	.word	0x20004300
 8004368:	200043e4 	.word	0x200043e4
 800436c:	200043f4 	.word	0x200043f4
 8004370:	200043e0 	.word	0x200043e0
 8004374:	20004304 	.word	0x20004304
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d018      	beq.n	80043c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800438e:	4b14      	ldr	r3, [pc, #80]	@ (80043e0 <vTaskDelay+0x64>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <vTaskDelay+0x32>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	60bb      	str	r3, [r7, #8]
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	e7fd      	b.n	80043aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043ae:	f000 f8d3 	bl	8004558 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043b2:	2100      	movs	r1, #0
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f001 f905 	bl	80055c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043ba:	f000 f8db 	bl	8004574 <xTaskResumeAll>
 80043be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d107      	bne.n	80043d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80043c6:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <vTaskDelay+0x68>)
 80043c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20004400 	.word	0x20004400
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <eTaskGetState+0x2a>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	60bb      	str	r3, [r7, #8]
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	e7fd      	b.n	800440e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8004412:	4b24      	ldr	r3, [pc, #144]	@ (80044a4 <eTaskGetState+0xbc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	429a      	cmp	r2, r3
 800441a:	d102      	bne.n	8004422 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800441c:	2300      	movs	r3, #0
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e03a      	b.n	8004498 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8004422:	f001 fd81 	bl	8005f28 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800442c:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <eTaskGetState+0xc0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004432:	4b1e      	ldr	r3, [pc, #120]	@ (80044ac <eTaskGetState+0xc4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004438:	f001 fda8 	bl	8005f8c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	429a      	cmp	r2, r3
 8004442:	d003      	beq.n	800444c <eTaskGetState+0x64>
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	429a      	cmp	r2, r3
 800444a:	d102      	bne.n	8004452 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800444c:	2302      	movs	r3, #2
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e022      	b.n	8004498 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	4a16      	ldr	r2, [pc, #88]	@ (80044b0 <eTaskGetState+0xc8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d112      	bne.n	8004480 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10b      	bne.n	800447a <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	d102      	bne.n	8004474 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800446e:	2302      	movs	r3, #2
 8004470:	77fb      	strb	r3, [r7, #31]
 8004472:	e011      	b.n	8004498 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8004474:	2303      	movs	r3, #3
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e00e      	b.n	8004498 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800447a:	2302      	movs	r3, #2
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e00b      	b.n	8004498 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	4a0c      	ldr	r2, [pc, #48]	@ (80044b4 <eTaskGetState+0xcc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d002      	beq.n	800448e <eTaskGetState+0xa6>
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d102      	bne.n	8004494 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800448e:	2304      	movs	r3, #4
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e001      	b.n	8004498 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004494:	2301      	movs	r3, #1
 8004496:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004498:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20004300 	.word	0x20004300
 80044a8:	20004390 	.word	0x20004390
 80044ac:	20004394 	.word	0x20004394
 80044b0:	200043c4 	.word	0x200043c4
 80044b4:	200043ac 	.word	0x200043ac

080044b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80044be:	4b20      	ldr	r3, [pc, #128]	@ (8004540 <vTaskStartScheduler+0x88>)
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	2300      	movs	r3, #0
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	2300      	movs	r3, #0
 80044c8:	2282      	movs	r2, #130	@ 0x82
 80044ca:	491e      	ldr	r1, [pc, #120]	@ (8004544 <vTaskStartScheduler+0x8c>)
 80044cc:	481e      	ldr	r0, [pc, #120]	@ (8004548 <vTaskStartScheduler+0x90>)
 80044ce:	f7ff fe13 	bl	80040f8 <xTaskCreate>
 80044d2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d102      	bne.n	80044e0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80044da:	f001 f8d9 	bl	8005690 <xTimerCreateTimerTask>
 80044de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d118      	bne.n	8004518 <vTaskStartScheduler+0x60>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	60bb      	str	r3, [r7, #8]
}
 80044f8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044fa:	4b14      	ldr	r3, [pc, #80]	@ (800454c <vTaskStartScheduler+0x94>)
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004500:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004502:	4b13      	ldr	r3, [pc, #76]	@ (8004550 <vTaskStartScheduler+0x98>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004508:	4b12      	ldr	r3, [pc, #72]	@ (8004554 <vTaskStartScheduler+0x9c>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800450e:	f7fc f83f 	bl	8000590 <AppTimerStatsInit>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004512:	f001 fc65 	bl	8005de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004516:	e00f      	b.n	8004538 <vTaskStartScheduler+0x80>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d10b      	bne.n	8004538 <vTaskStartScheduler+0x80>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	607b      	str	r3, [r7, #4]
}
 8004532:	bf00      	nop
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <vTaskStartScheduler+0x7c>
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	200043fc 	.word	0x200043fc
 8004544:	08008280 	.word	0x08008280
 8004548:	08004ce5 	.word	0x08004ce5
 800454c:	200043f8 	.word	0x200043f8
 8004550:	200043e4 	.word	0x200043e4
 8004554:	200043dc 	.word	0x200043dc

08004558 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800455c:	4b04      	ldr	r3, [pc, #16]	@ (8004570 <vTaskSuspendAll+0x18>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	4a03      	ldr	r2, [pc, #12]	@ (8004570 <vTaskSuspendAll+0x18>)
 8004564:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	20004400 	.word	0x20004400

08004574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004582:	4b42      	ldr	r3, [pc, #264]	@ (800468c <xTaskResumeAll+0x118>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10b      	bne.n	80045a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	603b      	str	r3, [r7, #0]
}
 800459c:	bf00      	nop
 800459e:	bf00      	nop
 80045a0:	e7fd      	b.n	800459e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045a2:	f001 fcc1 	bl	8005f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045a6:	4b39      	ldr	r3, [pc, #228]	@ (800468c <xTaskResumeAll+0x118>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	4a37      	ldr	r2, [pc, #220]	@ (800468c <xTaskResumeAll+0x118>)
 80045ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b0:	4b36      	ldr	r3, [pc, #216]	@ (800468c <xTaskResumeAll+0x118>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d161      	bne.n	800467c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045b8:	4b35      	ldr	r3, [pc, #212]	@ (8004690 <xTaskResumeAll+0x11c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d05d      	beq.n	800467c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045c0:	e02e      	b.n	8004620 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c2:	4b34      	ldr	r3, [pc, #208]	@ (8004694 <xTaskResumeAll+0x120>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3318      	adds	r3, #24
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff f8b0 	bl	8003734 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff f8ab 	bl	8003734 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	2201      	movs	r2, #1
 80045e4:	409a      	lsls	r2, r3
 80045e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004698 <xTaskResumeAll+0x124>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004698 <xTaskResumeAll+0x124>)
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4a27      	ldr	r2, [pc, #156]	@ (800469c <xTaskResumeAll+0x128>)
 80045fe:	441a      	add	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f7ff f837 	bl	800367a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004610:	4b23      	ldr	r3, [pc, #140]	@ (80046a0 <xTaskResumeAll+0x12c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800461a:	4b22      	ldr	r3, [pc, #136]	@ (80046a4 <xTaskResumeAll+0x130>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004620:	4b1c      	ldr	r3, [pc, #112]	@ (8004694 <xTaskResumeAll+0x120>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1cc      	bne.n	80045c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800462e:	f000 fcc3 	bl	8004fb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004632:	4b1d      	ldr	r3, [pc, #116]	@ (80046a8 <xTaskResumeAll+0x134>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d010      	beq.n	8004660 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800463e:	f000 f8e3 	bl	8004808 <xTaskIncrementTick>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004648:	4b16      	ldr	r3, [pc, #88]	@ (80046a4 <xTaskResumeAll+0x130>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3b01      	subs	r3, #1
 8004652:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f1      	bne.n	800463e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800465a:	4b13      	ldr	r3, [pc, #76]	@ (80046a8 <xTaskResumeAll+0x134>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004660:	4b10      	ldr	r3, [pc, #64]	@ (80046a4 <xTaskResumeAll+0x130>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d009      	beq.n	800467c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004668:	2301      	movs	r3, #1
 800466a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800466c:	4b0f      	ldr	r3, [pc, #60]	@ (80046ac <xTaskResumeAll+0x138>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800467c:	f001 fc86 	bl	8005f8c <vPortExitCritical>

	return xAlreadyYielded;
 8004680:	68bb      	ldr	r3, [r7, #8]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20004400 	.word	0x20004400
 8004690:	200043d8 	.word	0x200043d8
 8004694:	20004398 	.word	0x20004398
 8004698:	200043e0 	.word	0x200043e0
 800469c:	20004304 	.word	0x20004304
 80046a0:	20004300 	.word	0x20004300
 80046a4:	200043ec 	.word	0x200043ec
 80046a8:	200043e8 	.word	0x200043e8
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046b6:	4b05      	ldr	r3, [pc, #20]	@ (80046cc <xTaskGetTickCount+0x1c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046bc:	687b      	ldr	r3, [r7, #4]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	200043dc 	.word	0x200043dc

080046d0 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <uxTaskGetNumberOfTasks+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	200043d8 	.word	0x200043d8

080046e8 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	2305      	movs	r3, #5
 80046fa:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80046fc:	f7ff ff2c 	bl	8004558 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8004700:	4b3b      	ldr	r3, [pc, #236]	@ (80047f0 <uxTaskGetSystemState+0x108>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	429a      	cmp	r2, r3
 8004708:	d36b      	bcc.n	80047e2 <uxTaskGetSystemState+0xfa>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	3b01      	subs	r3, #1
 800470e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4613      	mov	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1898      	adds	r0, r3, r2
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4a32      	ldr	r2, [pc, #200]	@ (80047f4 <uxTaskGetSystemState+0x10c>)
 800472c:	4413      	add	r3, r2
 800472e:	2201      	movs	r2, #1
 8004730:	4619      	mov	r1, r3
 8004732:	f000 fbc3 	bl	8004ebc <prvListTasksWithinSingleList>
 8004736:	4602      	mov	r2, r0
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	4413      	add	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e2      	bne.n	800470a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4613      	mov	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	4a28      	ldr	r2, [pc, #160]	@ (80047f8 <uxTaskGetSystemState+0x110>)
 8004756:	6811      	ldr	r1, [r2, #0]
 8004758:	2202      	movs	r2, #2
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fbae 	bl	8004ebc <prvListTasksWithinSingleList>
 8004760:	4602      	mov	r2, r0
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	4413      	add	r3, r2
 8004766:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4613      	mov	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	4a20      	ldr	r2, [pc, #128]	@ (80047fc <uxTaskGetSystemState+0x114>)
 800477a:	6811      	ldr	r1, [r2, #0]
 800477c:	2202      	movs	r2, #2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fb9c 	bl	8004ebc <prvListTasksWithinSingleList>
 8004784:	4602      	mov	r2, r0
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	4413      	add	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	461a      	mov	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	2204      	movs	r2, #4
 800479e:	4918      	ldr	r1, [pc, #96]	@ (8004800 <uxTaskGetSystemState+0x118>)
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fb8b 	bl	8004ebc <prvListTasksWithinSingleList>
 80047a6:	4602      	mov	r2, r0
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	4413      	add	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	461a      	mov	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	2203      	movs	r2, #3
 80047c0:	4910      	ldr	r1, [pc, #64]	@ (8004804 <uxTaskGetSystemState+0x11c>)
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fb7a 	bl	8004ebc <prvListTasksWithinSingleList>
 80047c8:	4602      	mov	r2, r0
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	4413      	add	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <uxTaskGetSystemState+0xfa>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80047d6:	f7fb fee7 	bl	80005a8 <AppTimerStatsValue>
 80047da:	4603      	mov	r3, r0
 80047dc:	461a      	mov	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80047e2:	f7ff fec7 	bl	8004574 <xTaskResumeAll>

		return uxTask;
 80047e6:	697b      	ldr	r3, [r7, #20]
	}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	200043d8 	.word	0x200043d8
 80047f4:	20004304 	.word	0x20004304
 80047f8:	20004390 	.word	0x20004390
 80047fc:	20004394 	.word	0x20004394
 8004800:	200043ac 	.word	0x200043ac
 8004804:	200043c4 	.word	0x200043c4

08004808 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004812:	4b4f      	ldr	r3, [pc, #316]	@ (8004950 <xTaskIncrementTick+0x148>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 8089 	bne.w	800492e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800481c:	4b4d      	ldr	r3, [pc, #308]	@ (8004954 <xTaskIncrementTick+0x14c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3301      	adds	r3, #1
 8004822:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004824:	4a4b      	ldr	r2, [pc, #300]	@ (8004954 <xTaskIncrementTick+0x14c>)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d121      	bne.n	8004874 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004830:	4b49      	ldr	r3, [pc, #292]	@ (8004958 <xTaskIncrementTick+0x150>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <xTaskIncrementTick+0x4a>
	__asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	603b      	str	r3, [r7, #0]
}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	e7fd      	b.n	800484e <xTaskIncrementTick+0x46>
 8004852:	4b41      	ldr	r3, [pc, #260]	@ (8004958 <xTaskIncrementTick+0x150>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	4b40      	ldr	r3, [pc, #256]	@ (800495c <xTaskIncrementTick+0x154>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a3e      	ldr	r2, [pc, #248]	@ (8004958 <xTaskIncrementTick+0x150>)
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4a3e      	ldr	r2, [pc, #248]	@ (800495c <xTaskIncrementTick+0x154>)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	4b3e      	ldr	r3, [pc, #248]	@ (8004960 <xTaskIncrementTick+0x158>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3301      	adds	r3, #1
 800486c:	4a3c      	ldr	r2, [pc, #240]	@ (8004960 <xTaskIncrementTick+0x158>)
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	f000 fba2 	bl	8004fb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004874:	4b3b      	ldr	r3, [pc, #236]	@ (8004964 <xTaskIncrementTick+0x15c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	429a      	cmp	r2, r3
 800487c:	d348      	bcc.n	8004910 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800487e:	4b36      	ldr	r3, [pc, #216]	@ (8004958 <xTaskIncrementTick+0x150>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d104      	bne.n	8004892 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004888:	4b36      	ldr	r3, [pc, #216]	@ (8004964 <xTaskIncrementTick+0x15c>)
 800488a:	f04f 32ff 	mov.w	r2, #4294967295
 800488e:	601a      	str	r2, [r3, #0]
					break;
 8004890:	e03e      	b.n	8004910 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004892:	4b31      	ldr	r3, [pc, #196]	@ (8004958 <xTaskIncrementTick+0x150>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d203      	bcs.n	80048b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004964 <xTaskIncrementTick+0x15c>)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048b0:	e02e      	b.n	8004910 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	3304      	adds	r3, #4
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe ff3c 	bl	8003734 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d004      	beq.n	80048ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	3318      	adds	r3, #24
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fe ff33 	bl	8003734 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d2:	2201      	movs	r2, #1
 80048d4:	409a      	lsls	r2, r3
 80048d6:	4b24      	ldr	r3, [pc, #144]	@ (8004968 <xTaskIncrementTick+0x160>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	4a22      	ldr	r2, [pc, #136]	@ (8004968 <xTaskIncrementTick+0x160>)
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4a1f      	ldr	r2, [pc, #124]	@ (800496c <xTaskIncrementTick+0x164>)
 80048ee:	441a      	add	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	3304      	adds	r3, #4
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7fe febf 	bl	800367a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004900:	4b1b      	ldr	r3, [pc, #108]	@ (8004970 <xTaskIncrementTick+0x168>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004906:	429a      	cmp	r2, r3
 8004908:	d3b9      	bcc.n	800487e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800490a:	2301      	movs	r3, #1
 800490c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800490e:	e7b6      	b.n	800487e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004910:	4b17      	ldr	r3, [pc, #92]	@ (8004970 <xTaskIncrementTick+0x168>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004916:	4915      	ldr	r1, [pc, #84]	@ (800496c <xTaskIncrementTick+0x164>)
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d907      	bls.n	8004938 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8004928:	2301      	movs	r3, #1
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e004      	b.n	8004938 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800492e:	4b11      	ldr	r3, [pc, #68]	@ (8004974 <xTaskIncrementTick+0x16c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3301      	adds	r3, #1
 8004934:	4a0f      	ldr	r2, [pc, #60]	@ (8004974 <xTaskIncrementTick+0x16c>)
 8004936:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004938:	4b0f      	ldr	r3, [pc, #60]	@ (8004978 <xTaskIncrementTick+0x170>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8004940:	2301      	movs	r3, #1
 8004942:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004944:	697b      	ldr	r3, [r7, #20]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20004400 	.word	0x20004400
 8004954:	200043dc 	.word	0x200043dc
 8004958:	20004390 	.word	0x20004390
 800495c:	20004394 	.word	0x20004394
 8004960:	200043f0 	.word	0x200043f0
 8004964:	200043f8 	.word	0x200043f8
 8004968:	200043e0 	.word	0x200043e0
 800496c:	20004304 	.word	0x20004304
 8004970:	20004300 	.word	0x20004300
 8004974:	200043e8 	.word	0x200043e8
 8004978:	200043ec 	.word	0x200043ec

0800497c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004982:	4b33      	ldr	r3, [pc, #204]	@ (8004a50 <vTaskSwitchContext+0xd4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800498a:	4b32      	ldr	r3, [pc, #200]	@ (8004a54 <vTaskSwitchContext+0xd8>)
 800498c:	2201      	movs	r2, #1
 800498e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004990:	e05a      	b.n	8004a48 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 8004992:	4b30      	ldr	r3, [pc, #192]	@ (8004a54 <vTaskSwitchContext+0xd8>)
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004998:	f7fb fe06 	bl	80005a8 <AppTimerStatsValue>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004a58 <vTaskSwitchContext+0xdc>)
 80049a2:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80049a4:	4b2c      	ldr	r3, [pc, #176]	@ (8004a58 <vTaskSwitchContext+0xdc>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b2c      	ldr	r3, [pc, #176]	@ (8004a5c <vTaskSwitchContext+0xe0>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d909      	bls.n	80049c4 <vTaskSwitchContext+0x48>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80049b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a60 <vTaskSwitchContext+0xe4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80049b6:	4a28      	ldr	r2, [pc, #160]	@ (8004a58 <vTaskSwitchContext+0xdc>)
 80049b8:	6810      	ldr	r0, [r2, #0]
 80049ba:	4a28      	ldr	r2, [pc, #160]	@ (8004a5c <vTaskSwitchContext+0xe0>)
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	1a82      	subs	r2, r0, r2
 80049c0:	440a      	add	r2, r1
 80049c2:	651a      	str	r2, [r3, #80]	@ 0x50
			ulTaskSwitchedInTime = ulTotalRunTime;
 80049c4:	4b24      	ldr	r3, [pc, #144]	@ (8004a58 <vTaskSwitchContext+0xdc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a24      	ldr	r2, [pc, #144]	@ (8004a5c <vTaskSwitchContext+0xe0>)
 80049ca:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049cc:	4b25      	ldr	r3, [pc, #148]	@ (8004a64 <vTaskSwitchContext+0xe8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	fab3 f383 	clz	r3, r3
 80049d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80049da:	7afb      	ldrb	r3, [r7, #11]
 80049dc:	f1c3 031f 	rsb	r3, r3, #31
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	4921      	ldr	r1, [pc, #132]	@ (8004a68 <vTaskSwitchContext+0xec>)
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <vTaskSwitchContext+0x92>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	607b      	str	r3, [r7, #4]
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <vTaskSwitchContext+0x8e>
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4a13      	ldr	r2, [pc, #76]	@ (8004a68 <vTaskSwitchContext+0xec>)
 8004a1a:	4413      	add	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	605a      	str	r2, [r3, #4]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d104      	bne.n	8004a3e <vTaskSwitchContext+0xc2>
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	605a      	str	r2, [r3, #4]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4a06      	ldr	r2, [pc, #24]	@ (8004a60 <vTaskSwitchContext+0xe4>)
 8004a46:	6013      	str	r3, [r2, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20004400 	.word	0x20004400
 8004a54:	200043ec 	.word	0x200043ec
 8004a58:	20004408 	.word	0x20004408
 8004a5c:	20004404 	.word	0x20004404
 8004a60:	20004300 	.word	0x20004300
 8004a64:	200043e0 	.word	0x200043e0
 8004a68:	20004304 	.word	0x20004304

08004a6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	60fb      	str	r3, [r7, #12]
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	e7fd      	b.n	8004a90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a94:	4b07      	ldr	r3, [pc, #28]	@ (8004ab4 <vTaskPlaceOnEventList+0x48>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3318      	adds	r3, #24
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7fe fe10 	bl	80036c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	6838      	ldr	r0, [r7, #0]
 8004aa6:	f000 fd8d 	bl	80055c4 <prvAddCurrentTaskToDelayedList>
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20004300 	.word	0x20004300

08004ab8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10b      	bne.n	8004ae2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	617b      	str	r3, [r7, #20]
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	e7fd      	b.n	8004ade <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8004b0c <vTaskPlaceOnEventListRestricted+0x54>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3318      	adds	r3, #24
 8004ae8:	4619      	mov	r1, r3
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7fe fdc5 	bl	800367a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295
 8004afa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	68b8      	ldr	r0, [r7, #8]
 8004b00:	f000 fd60 	bl	80055c4 <prvAddCurrentTaskToDelayedList>
	}
 8004b04:	bf00      	nop
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20004300 	.word	0x20004300

08004b10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10b      	bne.n	8004b3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60fb      	str	r3, [r7, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	e7fd      	b.n	8004b3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	3318      	adds	r3, #24
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe fdf6 	bl	8003734 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b48:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc0 <xTaskRemoveFromEventList+0xb0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d11c      	bne.n	8004b8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe fded 	bl	8003734 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	2201      	movs	r2, #1
 8004b60:	409a      	lsls	r2, r3
 8004b62:	4b18      	ldr	r3, [pc, #96]	@ (8004bc4 <xTaskRemoveFromEventList+0xb4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	4a16      	ldr	r2, [pc, #88]	@ (8004bc4 <xTaskRemoveFromEventList+0xb4>)
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4a13      	ldr	r2, [pc, #76]	@ (8004bc8 <xTaskRemoveFromEventList+0xb8>)
 8004b7a:	441a      	add	r2, r3
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f7fe fd79 	bl	800367a <vListInsertEnd>
 8004b88:	e005      	b.n	8004b96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	3318      	adds	r3, #24
 8004b8e:	4619      	mov	r1, r3
 8004b90:	480e      	ldr	r0, [pc, #56]	@ (8004bcc <xTaskRemoveFromEventList+0xbc>)
 8004b92:	f7fe fd72 	bl	800367a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd0 <xTaskRemoveFromEventList+0xc0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d905      	bls.n	8004bb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <xTaskRemoveFromEventList+0xc4>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e001      	b.n	8004bb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bb4:	697b      	ldr	r3, [r7, #20]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20004400 	.word	0x20004400
 8004bc4:	200043e0 	.word	0x200043e0
 8004bc8:	20004304 	.word	0x20004304
 8004bcc:	20004398 	.word	0x20004398
 8004bd0:	20004300 	.word	0x20004300
 8004bd4:	200043ec 	.word	0x200043ec

08004bd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004be0:	4b06      	ldr	r3, [pc, #24]	@ (8004bfc <vTaskInternalSetTimeOutState+0x24>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004be8:	4b05      	ldr	r3, [pc, #20]	@ (8004c00 <vTaskInternalSetTimeOutState+0x28>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	605a      	str	r2, [r3, #4]
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	200043f0 	.word	0x200043f0
 8004c00:	200043dc 	.word	0x200043dc

08004c04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10b      	bne.n	8004c2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	613b      	str	r3, [r7, #16]
}
 8004c26:	bf00      	nop
 8004c28:	bf00      	nop
 8004c2a:	e7fd      	b.n	8004c28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	60fb      	str	r3, [r7, #12]
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop
 8004c48:	e7fd      	b.n	8004c46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004c4a:	f001 f96d 	bl	8005f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc4 <xTaskCheckForTimeOut+0xc0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	d102      	bne.n	8004c6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	e023      	b.n	8004cb6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4b15      	ldr	r3, [pc, #84]	@ (8004cc8 <xTaskCheckForTimeOut+0xc4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d007      	beq.n	8004c8a <xTaskCheckForTimeOut+0x86>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d302      	bcc.n	8004c8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c84:	2301      	movs	r3, #1
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	e015      	b.n	8004cb6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d20b      	bcs.n	8004cac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	1ad2      	subs	r2, r2, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff ff99 	bl	8004bd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
 8004caa:	e004      	b.n	8004cb6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cb6:	f001 f969 	bl	8005f8c <vPortExitCritical>

	return xReturn;
 8004cba:	69fb      	ldr	r3, [r7, #28]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3720      	adds	r7, #32
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	200043dc 	.word	0x200043dc
 8004cc8:	200043f0 	.word	0x200043f0

08004ccc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cd0:	4b03      	ldr	r3, [pc, #12]	@ (8004ce0 <vTaskMissedYield+0x14>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
}
 8004cd6:	bf00      	nop
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	200043ec 	.word	0x200043ec

08004ce4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cec:	f000 f852 	bl	8004d94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cf0:	4b06      	ldr	r3, [pc, #24]	@ (8004d0c <prvIdleTask+0x28>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d9f9      	bls.n	8004cec <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cf8:	4b05      	ldr	r3, [pc, #20]	@ (8004d10 <prvIdleTask+0x2c>)
 8004cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d08:	e7f0      	b.n	8004cec <prvIdleTask+0x8>
 8004d0a:	bf00      	nop
 8004d0c:	20004304 	.word	0x20004304
 8004d10:	e000ed04 	.word	0xe000ed04

08004d14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	607b      	str	r3, [r7, #4]
 8004d1e:	e00c      	b.n	8004d3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4a12      	ldr	r2, [pc, #72]	@ (8004d74 <prvInitialiseTaskLists+0x60>)
 8004d2c:	4413      	add	r3, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fe fc76 	bl	8003620 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3301      	adds	r3, #1
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d9ef      	bls.n	8004d20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d40:	480d      	ldr	r0, [pc, #52]	@ (8004d78 <prvInitialiseTaskLists+0x64>)
 8004d42:	f7fe fc6d 	bl	8003620 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d46:	480d      	ldr	r0, [pc, #52]	@ (8004d7c <prvInitialiseTaskLists+0x68>)
 8004d48:	f7fe fc6a 	bl	8003620 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d4c:	480c      	ldr	r0, [pc, #48]	@ (8004d80 <prvInitialiseTaskLists+0x6c>)
 8004d4e:	f7fe fc67 	bl	8003620 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d52:	480c      	ldr	r0, [pc, #48]	@ (8004d84 <prvInitialiseTaskLists+0x70>)
 8004d54:	f7fe fc64 	bl	8003620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d58:	480b      	ldr	r0, [pc, #44]	@ (8004d88 <prvInitialiseTaskLists+0x74>)
 8004d5a:	f7fe fc61 	bl	8003620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d8c <prvInitialiseTaskLists+0x78>)
 8004d60:	4a05      	ldr	r2, [pc, #20]	@ (8004d78 <prvInitialiseTaskLists+0x64>)
 8004d62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d64:	4b0a      	ldr	r3, [pc, #40]	@ (8004d90 <prvInitialiseTaskLists+0x7c>)
 8004d66:	4a05      	ldr	r2, [pc, #20]	@ (8004d7c <prvInitialiseTaskLists+0x68>)
 8004d68:	601a      	str	r2, [r3, #0]
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20004304 	.word	0x20004304
 8004d78:	20004368 	.word	0x20004368
 8004d7c:	2000437c 	.word	0x2000437c
 8004d80:	20004398 	.word	0x20004398
 8004d84:	200043ac 	.word	0x200043ac
 8004d88:	200043c4 	.word	0x200043c4
 8004d8c:	20004390 	.word	0x20004390
 8004d90:	20004394 	.word	0x20004394

08004d94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d9a:	e019      	b.n	8004dd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d9c:	f001 f8c4 	bl	8005f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da0:	4b10      	ldr	r3, [pc, #64]	@ (8004de4 <prvCheckTasksWaitingTermination+0x50>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fe fcc1 	bl	8003734 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004db2:	4b0d      	ldr	r3, [pc, #52]	@ (8004de8 <prvCheckTasksWaitingTermination+0x54>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	4a0b      	ldr	r2, [pc, #44]	@ (8004de8 <prvCheckTasksWaitingTermination+0x54>)
 8004dba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004dec <prvCheckTasksWaitingTermination+0x58>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8004dec <prvCheckTasksWaitingTermination+0x58>)
 8004dc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dc6:	f001 f8e1 	bl	8005f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f8e4 	bl	8004f98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dd0:	4b06      	ldr	r3, [pc, #24]	@ (8004dec <prvCheckTasksWaitingTermination+0x58>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e1      	bne.n	8004d9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	200043ac 	.word	0x200043ac
 8004de8:	200043d8 	.word	0x200043d8
 8004dec:	200043c0 	.word	0x200043c0

08004df0 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d102      	bne.n	8004e0a <vTaskGetInfo+0x1a>
 8004e04:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb8 <vTaskGetInfo+0xc8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	e000      	b.n	8004e0c <vTaskGetInfo+0x1c>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	2b05      	cmp	r3, #5
 8004e4a:	d01a      	beq.n	8004e82 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb8 <vTaskGetInfo+0xc8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d103      	bne.n	8004e5e <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	731a      	strb	r2, [r3, #12]
 8004e5c:	e018      	b.n	8004e90 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d112      	bne.n	8004e90 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8004e6a:	f7ff fb75 	bl	8004558 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8004e7c:	f7ff fb7a 	bl	8004574 <xTaskResumeAll>
 8004e80:	e006      	b.n	8004e90 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8004e82:	6978      	ldr	r0, [r7, #20]
 8004e84:	f7ff fab0 	bl	80043e8 <eTaskGetState>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f860 	bl	8004f60 <prvTaskCheckFreeStackSpace>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8004ea8:	e002      	b.n	8004eb0 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2200      	movs	r2, #0
 8004eae:	841a      	strh	r2, [r3, #32]
	}
 8004eb0:	bf00      	nop
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20004300 	.word	0x20004300

08004ebc <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	@ 0x28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d03f      	beq.n	8004f56 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	623b      	str	r3, [r7, #32]
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	605a      	str	r2, [r3, #4]
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	3308      	adds	r3, #8
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d104      	bne.n	8004efa <prvListTasksWithinSingleList+0x3e>
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	605a      	str	r2, [r3, #4]
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	3308      	adds	r3, #8
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d104      	bne.n	8004f26 <prvListTasksWithinSingleList+0x6a>
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f30:	4613      	mov	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	461a      	mov	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1899      	adds	r1, r3, r2
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	2201      	movs	r2, #1
 8004f42:	6978      	ldr	r0, [r7, #20]
 8004f44:	f7ff ff54 	bl	8004df0 <vTaskGetInfo>
				uxTask++;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d1d5      	bne.n	8004f02 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3728      	adds	r7, #40	@ 0x28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004f6c:	e005      	b.n	8004f7a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3301      	adds	r3, #1
 8004f72:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3301      	adds	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2ba5      	cmp	r3, #165	@ 0xa5
 8004f80:	d0f5      	beq.n	8004f6e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	089b      	lsrs	r3, r3, #2
 8004f86:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	b29b      	uxth	r3, r3
	}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 f9a9 	bl	80062fc <vPortFree>
			vPortFree( pxTCB );
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f001 f9a6 	bl	80062fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff0 <prvResetNextTaskUnblockTime+0x38>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <prvResetNextTaskUnblockTime+0x3c>)
 8004fca:	f04f 32ff 	mov.w	r2, #4294967295
 8004fce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fd0:	e008      	b.n	8004fe4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd2:	4b07      	ldr	r3, [pc, #28]	@ (8004ff0 <prvResetNextTaskUnblockTime+0x38>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4a04      	ldr	r2, [pc, #16]	@ (8004ff4 <prvResetNextTaskUnblockTime+0x3c>)
 8004fe2:	6013      	str	r3, [r2, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20004390 	.word	0x20004390
 8004ff4:	200043f8 	.word	0x200043f8

08004ff8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <xTaskGetSchedulerState+0x34>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005006:	2301      	movs	r3, #1
 8005008:	607b      	str	r3, [r7, #4]
 800500a:	e008      	b.n	800501e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800500c:	4b08      	ldr	r3, [pc, #32]	@ (8005030 <xTaskGetSchedulerState+0x38>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d102      	bne.n	800501a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005014:	2302      	movs	r3, #2
 8005016:	607b      	str	r3, [r7, #4]
 8005018:	e001      	b.n	800501e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800501a:	2300      	movs	r3, #0
 800501c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800501e:	687b      	ldr	r3, [r7, #4]
	}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	200043e4 	.word	0x200043e4
 8005030:	20004400 	.word	0x20004400

08005034 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d070      	beq.n	800512c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800504a:	4b3b      	ldr	r3, [pc, #236]	@ (8005138 <xTaskPriorityDisinherit+0x104>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	429a      	cmp	r2, r3
 8005052:	d00b      	beq.n	800506c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	60fb      	str	r3, [r7, #12]
}
 8005066:	bf00      	nop
 8005068:	bf00      	nop
 800506a:	e7fd      	b.n	8005068 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60bb      	str	r3, [r7, #8]
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005090:	1e5a      	subs	r2, r3, #1
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800509e:	429a      	cmp	r2, r3
 80050a0:	d044      	beq.n	800512c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d140      	bne.n	800512c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe fb40 	bl	8003734 <uxListRemove>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d115      	bne.n	80050e6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050be:	491f      	ldr	r1, [pc, #124]	@ (800513c <xTaskPriorityDisinherit+0x108>)
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10a      	bne.n	80050e6 <xTaskPriorityDisinherit+0xb2>
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d4:	2201      	movs	r2, #1
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43da      	mvns	r2, r3
 80050dc:	4b18      	ldr	r3, [pc, #96]	@ (8005140 <xTaskPriorityDisinherit+0x10c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4013      	ands	r3, r2
 80050e2:	4a17      	ldr	r2, [pc, #92]	@ (8005140 <xTaskPriorityDisinherit+0x10c>)
 80050e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	f1c3 0205 	rsb	r2, r3, #5
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fe:	2201      	movs	r2, #1
 8005100:	409a      	lsls	r2, r3
 8005102:	4b0f      	ldr	r3, [pc, #60]	@ (8005140 <xTaskPriorityDisinherit+0x10c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4313      	orrs	r3, r2
 8005108:	4a0d      	ldr	r2, [pc, #52]	@ (8005140 <xTaskPriorityDisinherit+0x10c>)
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4a08      	ldr	r2, [pc, #32]	@ (800513c <xTaskPriorityDisinherit+0x108>)
 800511a:	441a      	add	r2, r3
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	3304      	adds	r3, #4
 8005120:	4619      	mov	r1, r3
 8005122:	4610      	mov	r0, r2
 8005124:	f7fe faa9 	bl	800367a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800512c:	697b      	ldr	r3, [r7, #20]
	}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20004300 	.word	0x20004300
 800513c:	20004304 	.word	0x20004304
 8005140:	200043e0 	.word	0x200043e0

08005144 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800514e:	6839      	ldr	r1, [r7, #0]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f001 fc80 	bl	8006a56 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fb f844 	bl	80001e4 <strlen>
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	e007      	b.n	8005170 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	2220      	movs	r2, #32
 8005168:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3301      	adds	r3, #1
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b08      	cmp	r3, #8
 8005174:	d9f4      	bls.n	8005160 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
	}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8005190:	b590      	push	{r4, r7, lr}
 8005192:	b089      	sub	sp, #36	@ 0x24
 8005194:	af02      	add	r7, sp, #8
 8005196:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800519e:	4b45      	ldr	r3, [pc, #276]	@ (80052b4 <vTaskList+0x124>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80051a4:	4b43      	ldr	r3, [pc, #268]	@ (80052b4 <vTaskList+0x124>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4613      	mov	r3, r2
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 ffdb 	bl	800616c <pvPortMalloc>
 80051b6:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d076      	beq.n	80052ac <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 80051be:	2200      	movs	r2, #0
 80051c0:	68f9      	ldr	r1, [r7, #12]
 80051c2:	68b8      	ldr	r0, [r7, #8]
 80051c4:	f7ff fa90 	bl	80046e8 <uxTaskGetSystemState>
 80051c8:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	e066      	b.n	800529e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	461a      	mov	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4413      	add	r3, r2
 80051e0:	7b1b      	ldrb	r3, [r3, #12]
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d81b      	bhi.n	800521e <vTaskList+0x8e>
 80051e6:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <vTaskList+0x5c>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	08005201 	.word	0x08005201
 80051f0:	08005207 	.word	0x08005207
 80051f4:	0800520d 	.word	0x0800520d
 80051f8:	08005213 	.word	0x08005213
 80051fc:	08005219 	.word	0x08005219
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8005200:	2358      	movs	r3, #88	@ 0x58
 8005202:	74fb      	strb	r3, [r7, #19]
										break;
 8005204:	e00e      	b.n	8005224 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8005206:	2352      	movs	r3, #82	@ 0x52
 8005208:	74fb      	strb	r3, [r7, #19]
										break;
 800520a:	e00b      	b.n	8005224 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800520c:	2342      	movs	r3, #66	@ 0x42
 800520e:	74fb      	strb	r3, [r7, #19]
										break;
 8005210:	e008      	b.n	8005224 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8005212:	2353      	movs	r3, #83	@ 0x53
 8005214:	74fb      	strb	r3, [r7, #19]
										break;
 8005216:	e005      	b.n	8005224 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8005218:	2344      	movs	r3, #68	@ 0x44
 800521a:	74fb      	strb	r3, [r7, #19]
										break;
 800521c:	e002      	b.n	8005224 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800521e:	2300      	movs	r3, #0
 8005220:	74fb      	strb	r3, [r7, #19]
										break;
 8005222:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	461a      	mov	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4413      	add	r3, r2
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff83 	bl	8005144 <prvWriteNameToBuffer>
 800523e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005240:	7cf9      	ldrb	r1, [r7, #19]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4613      	mov	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	461a      	mov	r2, r3
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	6918      	ldr	r0, [r3, #16]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4613      	mov	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	461a      	mov	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4413      	add	r3, r2
 8005264:	8c1b      	ldrh	r3, [r3, #32]
 8005266:	461c      	mov	r4, r3
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	461a      	mov	r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4413      	add	r3, r2
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	9400      	str	r4, [sp, #0]
 800527e:	4603      	mov	r3, r0
 8005280:	460a      	mov	r2, r1
 8005282:	490d      	ldr	r1, [pc, #52]	@ (80052b8 <vTaskList+0x128>)
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f001 fa5f 	bl	8006748 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fa ffaa 	bl	80001e4 <strlen>
 8005290:	4602      	mov	r2, r0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4413      	add	r3, r2
 8005296:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	3301      	adds	r3, #1
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d394      	bcc.n	80051d0 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80052a6:	68b8      	ldr	r0, [r7, #8]
 80052a8:	f001 f828 	bl	80062fc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052ac:	bf00      	nop
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd90      	pop	{r4, r7, pc}
 80052b4:	200043d8 	.word	0x200043d8
 80052b8:	08008288 	.word	0x08008288

080052bc <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80052ca:	4b3a      	ldr	r3, [pc, #232]	@ (80053b4 <vTaskGetRunTimeStats+0xf8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80052d0:	4b38      	ldr	r3, [pc, #224]	@ (80053b4 <vTaskGetRunTimeStats+0xf8>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 ff45 	bl	800616c <pvPortMalloc>
 80052e2:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d05f      	beq.n	80053aa <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80052ea:	f107 030c 	add.w	r3, r7, #12
 80052ee:	461a      	mov	r2, r3
 80052f0:	69b9      	ldr	r1, [r7, #24]
 80052f2:	6978      	ldr	r0, [r7, #20]
 80052f4:	f7ff f9f8 	bl	80046e8 <uxTaskGetSystemState>
 80052f8:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4a2e      	ldr	r2, [pc, #184]	@ (80053b8 <vTaskGetRunTimeStats+0xfc>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d04b      	beq.n	80053a4 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800530c:	2300      	movs	r3, #0
 800530e:	61fb      	str	r3, [r7, #28]
 8005310:	e044      	b.n	800539c <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	461a      	mov	r2, r3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	4413      	add	r3, r2
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	fbb2 f3f3 	udiv	r3, r2, r3
 800532a:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	4613      	mov	r3, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	461a      	mov	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	4413      	add	r3, r2
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff feff 	bl	8005144 <prvWriteNameToBuffer>
 8005346:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00e      	beq.n	800536c <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	461a      	mov	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	4413      	add	r3, r2
 800535e:	699a      	ldr	r2, [r3, #24]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4916      	ldr	r1, [pc, #88]	@ (80053bc <vTaskGetRunTimeStats+0x100>)
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 f9ef 	bl	8006748 <siprintf>
 800536a:	e00d      	b.n	8005388 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	4613      	mov	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	461a      	mov	r2, r3
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	4413      	add	r3, r2
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	461a      	mov	r2, r3
 8005380:	490f      	ldr	r1, [pc, #60]	@ (80053c0 <vTaskGetRunTimeStats+0x104>)
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f001 f9e0 	bl	8006748 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7fa ff2b 	bl	80001e4 <strlen>
 800538e:	4602      	mov	r2, r0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4413      	add	r3, r2
 8005394:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3301      	adds	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d3b6      	bcc.n	8005312 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80053a4:	6978      	ldr	r0, [r7, #20]
 80053a6:	f000 ffa9 	bl	80062fc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053aa:	bf00      	nop
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	200043d8 	.word	0x200043d8
 80053b8:	51eb851f 	.word	0x51eb851f
 80053bc:	08008298 	.word	0x08008298
 80053c0:	080082a4 	.word	0x080082a4

080053c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80053ce:	f000 fdab 	bl	8005f28 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80053d2:	4b1e      	ldr	r3, [pc, #120]	@ (800544c <ulTaskNotifyTake+0x88>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d113      	bne.n	8005404 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80053dc:	4b1b      	ldr	r3, [pc, #108]	@ (800544c <ulTaskNotifyTake+0x88>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00b      	beq.n	8005404 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053ec:	2101      	movs	r1, #1
 80053ee:	6838      	ldr	r0, [r7, #0]
 80053f0:	f000 f8e8 	bl	80055c4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80053f4:	4b16      	ldr	r3, [pc, #88]	@ (8005450 <ulTaskNotifyTake+0x8c>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005404:	f000 fdc2 	bl	8005f8c <vPortExitCritical>

		taskENTER_CRITICAL();
 8005408:	f000 fd8e 	bl	8005f28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800540c:	4b0f      	ldr	r3, [pc, #60]	@ (800544c <ulTaskNotifyTake+0x88>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005412:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00c      	beq.n	8005434 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005420:	4b0a      	ldr	r3, [pc, #40]	@ (800544c <ulTaskNotifyTake+0x88>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2200      	movs	r2, #0
 8005426:	655a      	str	r2, [r3, #84]	@ 0x54
 8005428:	e004      	b.n	8005434 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800542a:	4b08      	ldr	r3, [pc, #32]	@ (800544c <ulTaskNotifyTake+0x88>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	3a01      	subs	r2, #1
 8005432:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005434:	4b05      	ldr	r3, [pc, #20]	@ (800544c <ulTaskNotifyTake+0x88>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800543e:	f000 fda5 	bl	8005f8c <vPortExitCritical>

		return ulReturn;
 8005442:	68fb      	ldr	r3, [r7, #12]
	}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20004300 	.word	0x20004300
 8005450:	e000ed04 	.word	0xe000ed04

08005454 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08a      	sub	sp, #40	@ 0x28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4613      	mov	r3, r2
 8005462:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005464:	2301      	movs	r3, #1
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10b      	bne.n	8005486 <xTaskGenericNotify+0x32>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	61bb      	str	r3, [r7, #24]
}
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	e7fd      	b.n	8005482 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800548a:	f000 fd4d 	bl	8005f28 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80054a2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d827      	bhi.n	8005502 <xTaskGenericNotify+0xae>
 80054b2:	a201      	add	r2, pc, #4	@ (adr r2, 80054b8 <xTaskGenericNotify+0x64>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	08005525 	.word	0x08005525
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054db 	.word	0x080054db
 80054c4:	080054e7 	.word	0x080054e7
 80054c8:	080054ef 	.word	0x080054ef
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80054d8:	e027      	b.n	800552a <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80054e4:	e021      	b.n	800552a <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80054ec:	e01d      	b.n	800552a <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80054ee:	7ffb      	ldrb	r3, [r7, #31]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d003      	beq.n	80054fc <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80054fa:	e016      	b.n	800552a <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8005500:	e013      	b.n	800552a <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550a:	d00d      	beq.n	8005528 <xTaskGenericNotify+0xd4>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	617b      	str	r3, [r7, #20]
}
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	e7fd      	b.n	8005520 <xTaskGenericNotify+0xcc>
					break;
 8005524:	bf00      	nop
 8005526:	e000      	b.n	800552a <xTaskGenericNotify+0xd6>

					break;
 8005528:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800552a:	7ffb      	ldrb	r3, [r7, #31]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d13a      	bne.n	80055a6 <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	3304      	adds	r3, #4
 8005534:	4618      	mov	r0, r3
 8005536:	f7fe f8fd 	bl	8003734 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553e:	2201      	movs	r2, #1
 8005540:	409a      	lsls	r2, r3
 8005542:	4b1c      	ldr	r3, [pc, #112]	@ (80055b4 <xTaskGenericNotify+0x160>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4313      	orrs	r3, r2
 8005548:	4a1a      	ldr	r2, [pc, #104]	@ (80055b4 <xTaskGenericNotify+0x160>)
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4a17      	ldr	r2, [pc, #92]	@ (80055b8 <xTaskGenericNotify+0x164>)
 800555a:	441a      	add	r2, r3
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	3304      	adds	r3, #4
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f7fe f889 	bl	800367a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00b      	beq.n	8005588 <xTaskGenericNotify+0x134>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	613b      	str	r3, [r7, #16]
}
 8005582:	bf00      	nop
 8005584:	bf00      	nop
 8005586:	e7fd      	b.n	8005584 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558c:	4b0b      	ldr	r3, [pc, #44]	@ (80055bc <xTaskGenericNotify+0x168>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005592:	429a      	cmp	r2, r3
 8005594:	d907      	bls.n	80055a6 <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005596:	4b0a      	ldr	r3, [pc, #40]	@ (80055c0 <xTaskGenericNotify+0x16c>)
 8005598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80055a6:	f000 fcf1 	bl	8005f8c <vPortExitCritical>

		return xReturn;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3728      	adds	r7, #40	@ 0x28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	200043e0 	.word	0x200043e0
 80055b8:	20004304 	.word	0x20004304
 80055bc:	20004300 	.word	0x20004300
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055ce:	4b29      	ldr	r3, [pc, #164]	@ (8005674 <prvAddCurrentTaskToDelayedList+0xb0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055d4:	4b28      	ldr	r3, [pc, #160]	@ (8005678 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3304      	adds	r3, #4
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fe f8aa 	bl	8003734 <uxListRemove>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055e6:	4b24      	ldr	r3, [pc, #144]	@ (8005678 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	2201      	movs	r2, #1
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	43da      	mvns	r2, r3
 80055f4:	4b21      	ldr	r3, [pc, #132]	@ (800567c <prvAddCurrentTaskToDelayedList+0xb8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4013      	ands	r3, r2
 80055fa:	4a20      	ldr	r2, [pc, #128]	@ (800567c <prvAddCurrentTaskToDelayedList+0xb8>)
 80055fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d10a      	bne.n	800561c <prvAddCurrentTaskToDelayedList+0x58>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800560c:	4b1a      	ldr	r3, [pc, #104]	@ (8005678 <prvAddCurrentTaskToDelayedList+0xb4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3304      	adds	r3, #4
 8005612:	4619      	mov	r1, r3
 8005614:	481a      	ldr	r0, [pc, #104]	@ (8005680 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005616:	f7fe f830 	bl	800367a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800561a:	e026      	b.n	800566a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005624:	4b14      	ldr	r3, [pc, #80]	@ (8005678 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	429a      	cmp	r2, r3
 8005632:	d209      	bcs.n	8005648 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005634:	4b13      	ldr	r3, [pc, #76]	@ (8005684 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4b0f      	ldr	r3, [pc, #60]	@ (8005678 <prvAddCurrentTaskToDelayedList+0xb4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3304      	adds	r3, #4
 800563e:	4619      	mov	r1, r3
 8005640:	4610      	mov	r0, r2
 8005642:	f7fe f83e 	bl	80036c2 <vListInsert>
}
 8005646:	e010      	b.n	800566a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005648:	4b0f      	ldr	r3, [pc, #60]	@ (8005688 <prvAddCurrentTaskToDelayedList+0xc4>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <prvAddCurrentTaskToDelayedList+0xb4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3304      	adds	r3, #4
 8005652:	4619      	mov	r1, r3
 8005654:	4610      	mov	r0, r2
 8005656:	f7fe f834 	bl	80036c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800565a:	4b0c      	ldr	r3, [pc, #48]	@ (800568c <prvAddCurrentTaskToDelayedList+0xc8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	429a      	cmp	r2, r3
 8005662:	d202      	bcs.n	800566a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005664:	4a09      	ldr	r2, [pc, #36]	@ (800568c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6013      	str	r3, [r2, #0]
}
 800566a:	bf00      	nop
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	200043dc 	.word	0x200043dc
 8005678:	20004300 	.word	0x20004300
 800567c:	200043e0 	.word	0x200043e0
 8005680:	200043c4 	.word	0x200043c4
 8005684:	20004394 	.word	0x20004394
 8005688:	20004390 	.word	0x20004390
 800568c:	200043f8 	.word	0x200043f8

08005690 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005696:	2300      	movs	r3, #0
 8005698:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800569a:	f000 fae1 	bl	8005c60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800569e:	4b12      	ldr	r3, [pc, #72]	@ (80056e8 <xTimerCreateTimerTask+0x58>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00b      	beq.n	80056be <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80056a6:	4b11      	ldr	r3, [pc, #68]	@ (80056ec <xTimerCreateTimerTask+0x5c>)
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	2302      	movs	r3, #2
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	2300      	movs	r3, #0
 80056b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80056b4:	490e      	ldr	r1, [pc, #56]	@ (80056f0 <xTimerCreateTimerTask+0x60>)
 80056b6:	480f      	ldr	r0, [pc, #60]	@ (80056f4 <xTimerCreateTimerTask+0x64>)
 80056b8:	f7fe fd1e 	bl	80040f8 <xTaskCreate>
 80056bc:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10b      	bne.n	80056dc <xTimerCreateTimerTask+0x4c>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	603b      	str	r3, [r7, #0]
}
 80056d6:	bf00      	nop
 80056d8:	bf00      	nop
 80056da:	e7fd      	b.n	80056d8 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80056dc:	687b      	ldr	r3, [r7, #4]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	2000443c 	.word	0x2000443c
 80056ec:	20004440 	.word	0x20004440
 80056f0:	080082b0 	.word	0x080082b0
 80056f4:	08005831 	.word	0x08005831

080056f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	@ 0x28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005706:	2300      	movs	r3, #0
 8005708:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10b      	bne.n	8005728 <xTimerGenericCommand+0x30>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	623b      	str	r3, [r7, #32]
}
 8005722:	bf00      	nop
 8005724:	bf00      	nop
 8005726:	e7fd      	b.n	8005724 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005728:	4b19      	ldr	r3, [pc, #100]	@ (8005790 <xTimerGenericCommand+0x98>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d02a      	beq.n	8005786 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b05      	cmp	r3, #5
 8005740:	dc18      	bgt.n	8005774 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005742:	f7ff fc59 	bl	8004ff8 <xTaskGetSchedulerState>
 8005746:	4603      	mov	r3, r0
 8005748:	2b02      	cmp	r3, #2
 800574a:	d109      	bne.n	8005760 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800574c:	4b10      	ldr	r3, [pc, #64]	@ (8005790 <xTimerGenericCommand+0x98>)
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	f107 0114 	add.w	r1, r7, #20
 8005754:	2300      	movs	r3, #0
 8005756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005758:	f7fe f8e0 	bl	800391c <xQueueGenericSend>
 800575c:	6278      	str	r0, [r7, #36]	@ 0x24
 800575e:	e012      	b.n	8005786 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005760:	4b0b      	ldr	r3, [pc, #44]	@ (8005790 <xTimerGenericCommand+0x98>)
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	f107 0114 	add.w	r1, r7, #20
 8005768:	2300      	movs	r3, #0
 800576a:	2200      	movs	r2, #0
 800576c:	f7fe f8d6 	bl	800391c <xQueueGenericSend>
 8005770:	6278      	str	r0, [r7, #36]	@ 0x24
 8005772:	e008      	b.n	8005786 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005774:	4b06      	ldr	r3, [pc, #24]	@ (8005790 <xTimerGenericCommand+0x98>)
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	f107 0114 	add.w	r1, r7, #20
 800577c:	2300      	movs	r3, #0
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	f7fe f9ce 	bl	8003b20 <xQueueGenericSendFromISR>
 8005784:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005788:	4618      	mov	r0, r3
 800578a:	3728      	adds	r7, #40	@ 0x28
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	2000443c 	.word	0x2000443c

08005794 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af02      	add	r7, sp, #8
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800579e:	4b23      	ldr	r3, [pc, #140]	@ (800582c <prvProcessExpiredTimer+0x98>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fd ffc1 	bl	8003734 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d023      	beq.n	8005808 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	699a      	ldr	r2, [r3, #24]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	18d1      	adds	r1, r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	6978      	ldr	r0, [r7, #20]
 80057ce:	f000 f8d5 	bl	800597c <prvInsertTimerInActiveList>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d020      	beq.n	800581a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057d8:	2300      	movs	r3, #0
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	2300      	movs	r3, #0
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	2100      	movs	r1, #0
 80057e2:	6978      	ldr	r0, [r7, #20]
 80057e4:	f7ff ff88 	bl	80056f8 <xTimerGenericCommand>
 80057e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d114      	bne.n	800581a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	60fb      	str	r3, [r7, #12]
}
 8005802:	bf00      	nop
 8005804:	bf00      	nop
 8005806:	e7fd      	b.n	8005804 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800580e:	f023 0301 	bic.w	r3, r3, #1
 8005812:	b2da      	uxtb	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	6978      	ldr	r0, [r7, #20]
 8005820:	4798      	blx	r3
}
 8005822:	bf00      	nop
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20004434 	.word	0x20004434

08005830 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005838:	f107 0308 	add.w	r3, r7, #8
 800583c:	4618      	mov	r0, r3
 800583e:	f000 f859 	bl	80058f4 <prvGetNextExpireTime>
 8005842:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4619      	mov	r1, r3
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f805 	bl	8005858 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800584e:	f000 f8d7 	bl	8005a00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005852:	bf00      	nop
 8005854:	e7f0      	b.n	8005838 <prvTimerTask+0x8>
	...

08005858 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005862:	f7fe fe79 	bl	8004558 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005866:	f107 0308 	add.w	r3, r7, #8
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f866 	bl	800593c <prvSampleTimeNow>
 8005870:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d130      	bne.n	80058da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10a      	bne.n	8005894 <prvProcessTimerOrBlockTask+0x3c>
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	429a      	cmp	r2, r3
 8005884:	d806      	bhi.n	8005894 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005886:	f7fe fe75 	bl	8004574 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800588a:	68f9      	ldr	r1, [r7, #12]
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff ff81 	bl	8005794 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005892:	e024      	b.n	80058de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800589a:	4b13      	ldr	r3, [pc, #76]	@ (80058e8 <prvProcessTimerOrBlockTask+0x90>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <prvProcessTimerOrBlockTask+0x50>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <prvProcessTimerOrBlockTask+0x52>
 80058a8:	2300      	movs	r3, #0
 80058aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058ac:	4b0f      	ldr	r3, [pc, #60]	@ (80058ec <prvProcessTimerOrBlockTask+0x94>)
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	4619      	mov	r1, r3
 80058ba:	f7fe fbe9 	bl	8004090 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80058be:	f7fe fe59 	bl	8004574 <xTaskResumeAll>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80058c8:	4b09      	ldr	r3, [pc, #36]	@ (80058f0 <prvProcessTimerOrBlockTask+0x98>)
 80058ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	f3bf 8f6f 	isb	sy
}
 80058d8:	e001      	b.n	80058de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80058da:	f7fe fe4b 	bl	8004574 <xTaskResumeAll>
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20004438 	.word	0x20004438
 80058ec:	2000443c 	.word	0x2000443c
 80058f0:	e000ed04 	.word	0xe000ed04

080058f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005938 <prvGetNextExpireTime+0x44>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <prvGetNextExpireTime+0x16>
 8005906:	2201      	movs	r2, #1
 8005908:	e000      	b.n	800590c <prvGetNextExpireTime+0x18>
 800590a:	2200      	movs	r2, #0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d105      	bne.n	8005924 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005918:	4b07      	ldr	r3, [pc, #28]	@ (8005938 <prvGetNextExpireTime+0x44>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	e001      	b.n	8005928 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005928:	68fb      	ldr	r3, [r7, #12]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20004434 	.word	0x20004434

0800593c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005944:	f7fe feb4 	bl	80046b0 <xTaskGetTickCount>
 8005948:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800594a:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <prvSampleTimeNow+0x3c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	429a      	cmp	r2, r3
 8005952:	d205      	bcs.n	8005960 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005954:	f000 f91e 	bl	8005b94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e002      	b.n	8005966 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005966:	4a04      	ldr	r2, [pc, #16]	@ (8005978 <prvSampleTimeNow+0x3c>)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800596c:	68fb      	ldr	r3, [r7, #12]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20004444 	.word	0x20004444

0800597c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d812      	bhi.n	80059c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	1ad2      	subs	r2, r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d302      	bcc.n	80059b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80059b0:	2301      	movs	r3, #1
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e01b      	b.n	80059ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80059b6:	4b10      	ldr	r3, [pc, #64]	@ (80059f8 <prvInsertTimerInActiveList+0x7c>)
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3304      	adds	r3, #4
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f7fd fe7e 	bl	80036c2 <vListInsert>
 80059c6:	e012      	b.n	80059ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d206      	bcs.n	80059de <prvInsertTimerInActiveList+0x62>
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d302      	bcc.n	80059de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80059d8:	2301      	movs	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e007      	b.n	80059ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059de:	4b07      	ldr	r3, [pc, #28]	@ (80059fc <prvInsertTimerInActiveList+0x80>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f7fd fe6a 	bl	80036c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059ee:	697b      	ldr	r3, [r7, #20]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20004438 	.word	0x20004438
 80059fc:	20004434 	.word	0x20004434

08005a00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08c      	sub	sp, #48	@ 0x30
 8005a04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a06:	e0b2      	b.n	8005b6e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f2c0 80af 	blt.w	8005b6e <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fd fe87 	bl	8003734 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff ff87 	bl	800593c <prvSampleTimeNow>
 8005a2e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b09      	cmp	r3, #9
 8005a34:	f200 8098 	bhi.w	8005b68 <prvProcessReceivedCommands+0x168>
 8005a38:	a201      	add	r2, pc, #4	@ (adr r2, 8005a40 <prvProcessReceivedCommands+0x40>)
 8005a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3e:	bf00      	nop
 8005a40:	08005a69 	.word	0x08005a69
 8005a44:	08005a69 	.word	0x08005a69
 8005a48:	08005a69 	.word	0x08005a69
 8005a4c:	08005adf 	.word	0x08005adf
 8005a50:	08005af3 	.word	0x08005af3
 8005a54:	08005b3f 	.word	0x08005b3f
 8005a58:	08005a69 	.word	0x08005a69
 8005a5c:	08005a69 	.word	0x08005a69
 8005a60:	08005adf 	.word	0x08005adf
 8005a64:	08005af3 	.word	0x08005af3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	18d1      	adds	r1, r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6a3a      	ldr	r2, [r7, #32]
 8005a86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a88:	f7ff ff78 	bl	800597c <prvInsertTimerInActiveList>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d06c      	beq.n	8005b6c <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d061      	beq.n	8005b6c <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	441a      	add	r2, r3
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005aba:	f7ff fe1d 	bl	80056f8 <xTimerGenericCommand>
 8005abe:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d152      	bne.n	8005b6c <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	61bb      	str	r3, [r7, #24]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005af0:	e03d      	b.n	8005b6e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	617b      	str	r3, [r7, #20]
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop
 8005b28:	e7fd      	b.n	8005b26 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	18d1      	adds	r1, r2, r3
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	6a3a      	ldr	r2, [r7, #32]
 8005b36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b38:	f7ff ff20 	bl	800597c <prvInsertTimerInActiveList>
					break;
 8005b3c:	e017      	b.n	8005b6e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8005b4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b4e:	f000 fbd5 	bl	80062fc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b52:	e00c      	b.n	8005b6e <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b66:	e002      	b.n	8005b6e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8005b68:	bf00      	nop
 8005b6a:	e000      	b.n	8005b6e <prvProcessReceivedCommands+0x16e>
					break;
 8005b6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b6e:	4b08      	ldr	r3, [pc, #32]	@ (8005b90 <prvProcessReceivedCommands+0x190>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f107 0108 	add.w	r1, r7, #8
 8005b76:	2200      	movs	r2, #0
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe f86d 	bl	8003c58 <xQueueReceive>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f47f af41 	bne.w	8005a08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b86:	bf00      	nop
 8005b88:	bf00      	nop
 8005b8a:	3728      	adds	r7, #40	@ 0x28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	2000443c 	.word	0x2000443c

08005b94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b9a:	e049      	b.n	8005c30 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c58 <prvSwitchTimerLists+0xc4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8005c58 <prvSwitchTimerLists+0xc4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fd fdbd 	bl	8003734 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d02f      	beq.n	8005c30 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d90e      	bls.n	8005c00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bee:	4b1a      	ldr	r3, [pc, #104]	@ (8005c58 <prvSwitchTimerLists+0xc4>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f7fd fd62 	bl	80036c2 <vListInsert>
 8005bfe:	e017      	b.n	8005c30 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c00:	2300      	movs	r3, #0
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	2300      	movs	r3, #0
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	2100      	movs	r1, #0
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f7ff fd74 	bl	80056f8 <xTimerGenericCommand>
 8005c10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	603b      	str	r3, [r7, #0]
}
 8005c2a:	bf00      	nop
 8005c2c:	bf00      	nop
 8005c2e:	e7fd      	b.n	8005c2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c30:	4b09      	ldr	r3, [pc, #36]	@ (8005c58 <prvSwitchTimerLists+0xc4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1b0      	bne.n	8005b9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c3a:	4b07      	ldr	r3, [pc, #28]	@ (8005c58 <prvSwitchTimerLists+0xc4>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c40:	4b06      	ldr	r3, [pc, #24]	@ (8005c5c <prvSwitchTimerLists+0xc8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a04      	ldr	r2, [pc, #16]	@ (8005c58 <prvSwitchTimerLists+0xc4>)
 8005c46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c48:	4a04      	ldr	r2, [pc, #16]	@ (8005c5c <prvSwitchTimerLists+0xc8>)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	6013      	str	r3, [r2, #0]
}
 8005c4e:	bf00      	nop
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20004434 	.word	0x20004434
 8005c5c:	20004438 	.word	0x20004438

08005c60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c64:	f000 f960 	bl	8005f28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c68:	4b12      	ldr	r3, [pc, #72]	@ (8005cb4 <prvCheckForValidListAndQueue+0x54>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d11d      	bne.n	8005cac <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c70:	4811      	ldr	r0, [pc, #68]	@ (8005cb8 <prvCheckForValidListAndQueue+0x58>)
 8005c72:	f7fd fcd5 	bl	8003620 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c76:	4811      	ldr	r0, [pc, #68]	@ (8005cbc <prvCheckForValidListAndQueue+0x5c>)
 8005c78:	f7fd fcd2 	bl	8003620 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c7c:	4b10      	ldr	r3, [pc, #64]	@ (8005cc0 <prvCheckForValidListAndQueue+0x60>)
 8005c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb8 <prvCheckForValidListAndQueue+0x58>)
 8005c80:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c82:	4b10      	ldr	r3, [pc, #64]	@ (8005cc4 <prvCheckForValidListAndQueue+0x64>)
 8005c84:	4a0d      	ldr	r2, [pc, #52]	@ (8005cbc <prvCheckForValidListAndQueue+0x5c>)
 8005c86:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005c88:	2200      	movs	r2, #0
 8005c8a:	210c      	movs	r1, #12
 8005c8c:	200a      	movs	r0, #10
 8005c8e:	f7fd fde5 	bl	800385c <xQueueGenericCreate>
 8005c92:	4603      	mov	r3, r0
 8005c94:	4a07      	ldr	r2, [pc, #28]	@ (8005cb4 <prvCheckForValidListAndQueue+0x54>)
 8005c96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c98:	4b06      	ldr	r3, [pc, #24]	@ (8005cb4 <prvCheckForValidListAndQueue+0x54>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ca0:	4b04      	ldr	r3, [pc, #16]	@ (8005cb4 <prvCheckForValidListAndQueue+0x54>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4908      	ldr	r1, [pc, #32]	@ (8005cc8 <prvCheckForValidListAndQueue+0x68>)
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fe f9c8 	bl	800403c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cac:	f000 f96e 	bl	8005f8c <vPortExitCritical>
}
 8005cb0:	bf00      	nop
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	2000443c 	.word	0x2000443c
 8005cb8:	2000440c 	.word	0x2000440c
 8005cbc:	20004420 	.word	0x20004420
 8005cc0:	20004434 	.word	0x20004434
 8005cc4:	20004438 	.word	0x20004438
 8005cc8:	080082b8 	.word	0x080082b8

08005ccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3b04      	subs	r3, #4
 8005cdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3b04      	subs	r3, #4
 8005cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f023 0201 	bic.w	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3b04      	subs	r3, #4
 8005cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8005d30 <pxPortInitialiseStack+0x64>)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3b14      	subs	r3, #20
 8005d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3b04      	subs	r3, #4
 8005d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f06f 0202 	mvn.w	r2, #2
 8005d1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3b20      	subs	r3, #32
 8005d20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d22:	68fb      	ldr	r3, [r7, #12]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	08005d35 	.word	0x08005d35

08005d34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d3e:	4b13      	ldr	r3, [pc, #76]	@ (8005d8c <prvTaskExitError+0x58>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d00b      	beq.n	8005d60 <prvTaskExitError+0x2c>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	60fb      	str	r3, [r7, #12]
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <prvTaskExitError+0x28>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	60bb      	str	r3, [r7, #8]
}
 8005d72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d74:	bf00      	nop
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0fc      	beq.n	8005d76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d7c:	bf00      	nop
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	20000014 	.word	0x20000014

08005d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d90:	4b07      	ldr	r3, [pc, #28]	@ (8005db0 <pxCurrentTCBConst2>)
 8005d92:	6819      	ldr	r1, [r3, #0]
 8005d94:	6808      	ldr	r0, [r1, #0]
 8005d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9a:	f380 8809 	msr	PSP, r0
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f380 8811 	msr	BASEPRI, r0
 8005daa:	4770      	bx	lr
 8005dac:	f3af 8000 	nop.w

08005db0 <pxCurrentTCBConst2>:
 8005db0:	20004300 	.word	0x20004300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop

08005db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005db8:	4808      	ldr	r0, [pc, #32]	@ (8005ddc <prvPortStartFirstTask+0x24>)
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	6800      	ldr	r0, [r0, #0]
 8005dbe:	f380 8808 	msr	MSP, r0
 8005dc2:	f04f 0000 	mov.w	r0, #0
 8005dc6:	f380 8814 	msr	CONTROL, r0
 8005dca:	b662      	cpsie	i
 8005dcc:	b661      	cpsie	f
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	df00      	svc	0
 8005dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dda:	bf00      	nop
 8005ddc:	e000ed08 	.word	0xe000ed08

08005de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005de6:	4b47      	ldr	r3, [pc, #284]	@ (8005f04 <xPortStartScheduler+0x124>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a47      	ldr	r2, [pc, #284]	@ (8005f08 <xPortStartScheduler+0x128>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10b      	bne.n	8005e08 <xPortStartScheduler+0x28>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	613b      	str	r3, [r7, #16]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e08:	4b3e      	ldr	r3, [pc, #248]	@ (8005f04 <xPortStartScheduler+0x124>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f0c <xPortStartScheduler+0x12c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d10b      	bne.n	8005e2a <xPortStartScheduler+0x4a>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60fb      	str	r3, [r7, #12]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e2a:	4b39      	ldr	r3, [pc, #228]	@ (8005f10 <xPortStartScheduler+0x130>)
 8005e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	22ff      	movs	r2, #255	@ 0xff
 8005e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	4b31      	ldr	r3, [pc, #196]	@ (8005f14 <xPortStartScheduler+0x134>)
 8005e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e52:	4b31      	ldr	r3, [pc, #196]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005e54:	2207      	movs	r2, #7
 8005e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e58:	e009      	b.n	8005e6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	4a2d      	ldr	r2, [pc, #180]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e76:	2b80      	cmp	r3, #128	@ 0x80
 8005e78:	d0ef      	beq.n	8005e5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e7a:	4b27      	ldr	r3, [pc, #156]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f1c3 0307 	rsb	r3, r3, #7
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d00b      	beq.n	8005e9e <xPortStartScheduler+0xbe>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60bb      	str	r3, [r7, #8]
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005eb0:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ebc:	4b17      	ldr	r3, [pc, #92]	@ (8005f1c <xPortStartScheduler+0x13c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a16      	ldr	r2, [pc, #88]	@ (8005f1c <xPortStartScheduler+0x13c>)
 8005ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ec8:	4b14      	ldr	r3, [pc, #80]	@ (8005f1c <xPortStartScheduler+0x13c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a13      	ldr	r2, [pc, #76]	@ (8005f1c <xPortStartScheduler+0x13c>)
 8005ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ed4:	f000 f8da 	bl	800608c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ed8:	4b11      	ldr	r3, [pc, #68]	@ (8005f20 <xPortStartScheduler+0x140>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ede:	f000 f8f9 	bl	80060d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ee2:	4b10      	ldr	r3, [pc, #64]	@ (8005f24 <xPortStartScheduler+0x144>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8005f24 <xPortStartScheduler+0x144>)
 8005ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005eee:	f7ff ff63 	bl	8005db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ef2:	f7fe fd43 	bl	800497c <vTaskSwitchContext>
	prvTaskExitError();
 8005ef6:	f7ff ff1d 	bl	8005d34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	e000ed00 	.word	0xe000ed00
 8005f08:	410fc271 	.word	0x410fc271
 8005f0c:	410fc270 	.word	0x410fc270
 8005f10:	e000e400 	.word	0xe000e400
 8005f14:	20004448 	.word	0x20004448
 8005f18:	2000444c 	.word	0x2000444c
 8005f1c:	e000ed20 	.word	0xe000ed20
 8005f20:	20000014 	.word	0x20000014
 8005f24:	e000ef34 	.word	0xe000ef34

08005f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
}
 8005f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f42:	4b10      	ldr	r3, [pc, #64]	@ (8005f84 <vPortEnterCritical+0x5c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3301      	adds	r3, #1
 8005f48:	4a0e      	ldr	r2, [pc, #56]	@ (8005f84 <vPortEnterCritical+0x5c>)
 8005f4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <vPortEnterCritical+0x5c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d110      	bne.n	8005f76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f54:	4b0c      	ldr	r3, [pc, #48]	@ (8005f88 <vPortEnterCritical+0x60>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00b      	beq.n	8005f76 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	603b      	str	r3, [r7, #0]
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	e7fd      	b.n	8005f72 <vPortEnterCritical+0x4a>
	}
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000014 	.word	0x20000014
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f92:	4b12      	ldr	r3, [pc, #72]	@ (8005fdc <vPortExitCritical+0x50>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10b      	bne.n	8005fb2 <vPortExitCritical+0x26>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	607b      	str	r3, [r7, #4]
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	e7fd      	b.n	8005fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fdc <vPortExitCritical+0x50>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	4a08      	ldr	r2, [pc, #32]	@ (8005fdc <vPortExitCritical+0x50>)
 8005fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fbc:	4b07      	ldr	r3, [pc, #28]	@ (8005fdc <vPortExitCritical+0x50>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d105      	bne.n	8005fd0 <vPortExitCritical+0x44>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f383 8811 	msr	BASEPRI, r3
}
 8005fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	20000014 	.word	0x20000014

08005fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fe0:	f3ef 8009 	mrs	r0, PSP
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4b15      	ldr	r3, [pc, #84]	@ (8006040 <pxCurrentTCBConst>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	f01e 0f10 	tst.w	lr, #16
 8005ff0:	bf08      	it	eq
 8005ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006004:	f380 8811 	msr	BASEPRI, r0
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f7fe fcb4 	bl	800497c <vTaskSwitchContext>
 8006014:	f04f 0000 	mov.w	r0, #0
 8006018:	f380 8811 	msr	BASEPRI, r0
 800601c:	bc09      	pop	{r0, r3}
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	6808      	ldr	r0, [r1, #0]
 8006022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006026:	f01e 0f10 	tst.w	lr, #16
 800602a:	bf08      	it	eq
 800602c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006030:	f380 8809 	msr	PSP, r0
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	f3af 8000 	nop.w

08006040 <pxCurrentTCBConst>:
 8006040:	20004300 	.word	0x20004300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	607b      	str	r3, [r7, #4]
}
 8006060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006062:	f7fe fbd1 	bl	8004808 <xTaskIncrementTick>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800606c:	4b06      	ldr	r3, [pc, #24]	@ (8006088 <SysTick_Handler+0x40>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	2300      	movs	r3, #0
 8006076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f383 8811 	msr	BASEPRI, r3
}
 800607e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006090:	4b0b      	ldr	r3, [pc, #44]	@ (80060c0 <vPortSetupTimerInterrupt+0x34>)
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006096:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <vPortSetupTimerInterrupt+0x38>)
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800609c:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <vPortSetupTimerInterrupt+0x3c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0a      	ldr	r2, [pc, #40]	@ (80060cc <vPortSetupTimerInterrupt+0x40>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	099b      	lsrs	r3, r3, #6
 80060a8:	4a09      	ldr	r2, [pc, #36]	@ (80060d0 <vPortSetupTimerInterrupt+0x44>)
 80060aa:	3b01      	subs	r3, #1
 80060ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ae:	4b04      	ldr	r3, [pc, #16]	@ (80060c0 <vPortSetupTimerInterrupt+0x34>)
 80060b0:	2207      	movs	r2, #7
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	e000e010 	.word	0xe000e010
 80060c4:	e000e018 	.word	0xe000e018
 80060c8:	20000008 	.word	0x20000008
 80060cc:	10624dd3 	.word	0x10624dd3
 80060d0:	e000e014 	.word	0xe000e014

080060d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80060e4 <vPortEnableVFP+0x10>
 80060d8:	6801      	ldr	r1, [r0, #0]
 80060da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80060de:	6001      	str	r1, [r0, #0]
 80060e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060e2:	bf00      	nop
 80060e4:	e000ed88 	.word	0xe000ed88

080060e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ee:	f3ef 8305 	mrs	r3, IPSR
 80060f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d915      	bls.n	8006126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060fa:	4a18      	ldr	r2, [pc, #96]	@ (800615c <vPortValidateInterruptPriority+0x74>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006104:	4b16      	ldr	r3, [pc, #88]	@ (8006160 <vPortValidateInterruptPriority+0x78>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	7afa      	ldrb	r2, [r7, #11]
 800610a:	429a      	cmp	r2, r3
 800610c:	d20b      	bcs.n	8006126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
}
 8006120:	bf00      	nop
 8006122:	bf00      	nop
 8006124:	e7fd      	b.n	8006122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006126:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <vPortValidateInterruptPriority+0x7c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800612e:	4b0e      	ldr	r3, [pc, #56]	@ (8006168 <vPortValidateInterruptPriority+0x80>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d90b      	bls.n	800614e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	603b      	str	r3, [r7, #0]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <vPortValidateInterruptPriority+0x62>
	}
 800614e:	bf00      	nop
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	e000e3f0 	.word	0xe000e3f0
 8006160:	20004448 	.word	0x20004448
 8006164:	e000ed0c 	.word	0xe000ed0c
 8006168:	2000444c 	.word	0x2000444c

0800616c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	@ 0x28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006174:	2300      	movs	r3, #0
 8006176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006178:	f7fe f9ee 	bl	8004558 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800617c:	4b5a      	ldr	r3, [pc, #360]	@ (80062e8 <pvPortMalloc+0x17c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006184:	f000 f92e 	bl	80063e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006188:	4b58      	ldr	r3, [pc, #352]	@ (80062ec <pvPortMalloc+0x180>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4013      	ands	r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	f040 8090 	bne.w	80062b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01e      	beq.n	80061da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800619c:	2208      	movs	r2, #8
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4413      	add	r3, r2
 80061a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d015      	beq.n	80061da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f023 0307 	bic.w	r3, r3, #7
 80061b4:	3308      	adds	r3, #8
 80061b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f003 0307 	and.w	r3, r3, #7
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <pvPortMalloc+0x6e>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	617b      	str	r3, [r7, #20]
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	e7fd      	b.n	80061d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d06a      	beq.n	80062b6 <pvPortMalloc+0x14a>
 80061e0:	4b43      	ldr	r3, [pc, #268]	@ (80062f0 <pvPortMalloc+0x184>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d865      	bhi.n	80062b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061ea:	4b42      	ldr	r3, [pc, #264]	@ (80062f4 <pvPortMalloc+0x188>)
 80061ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061ee:	4b41      	ldr	r3, [pc, #260]	@ (80062f4 <pvPortMalloc+0x188>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061f4:	e004      	b.n	8006200 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	d903      	bls.n	8006212 <pvPortMalloc+0xa6>
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f1      	bne.n	80061f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006212:	4b35      	ldr	r3, [pc, #212]	@ (80062e8 <pvPortMalloc+0x17c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006218:	429a      	cmp	r2, r3
 800621a:	d04c      	beq.n	80062b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2208      	movs	r2, #8
 8006222:	4413      	add	r3, r2
 8006224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	1ad2      	subs	r2, r2, r3
 8006236:	2308      	movs	r3, #8
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	429a      	cmp	r2, r3
 800623c:	d920      	bls.n	8006280 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800623e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4413      	add	r3, r2
 8006244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <pvPortMalloc+0xfc>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	613b      	str	r3, [r7, #16]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800627a:	69b8      	ldr	r0, [r7, #24]
 800627c:	f000 f914 	bl	80064a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006280:	4b1b      	ldr	r3, [pc, #108]	@ (80062f0 <pvPortMalloc+0x184>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	4a19      	ldr	r2, [pc, #100]	@ (80062f0 <pvPortMalloc+0x184>)
 800628c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800628e:	4b18      	ldr	r3, [pc, #96]	@ (80062f0 <pvPortMalloc+0x184>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b19      	ldr	r3, [pc, #100]	@ (80062f8 <pvPortMalloc+0x18c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d203      	bcs.n	80062a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800629a:	4b15      	ldr	r3, [pc, #84]	@ (80062f0 <pvPortMalloc+0x184>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a16      	ldr	r2, [pc, #88]	@ (80062f8 <pvPortMalloc+0x18c>)
 80062a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4b11      	ldr	r3, [pc, #68]	@ (80062ec <pvPortMalloc+0x180>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062b6:	f7fe f95d 	bl	8004574 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00b      	beq.n	80062dc <pvPortMalloc+0x170>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	60fb      	str	r3, [r7, #12]
}
 80062d6:	bf00      	nop
 80062d8:	bf00      	nop
 80062da:	e7fd      	b.n	80062d8 <pvPortMalloc+0x16c>
	return pvReturn;
 80062dc:	69fb      	ldr	r3, [r7, #28]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3728      	adds	r7, #40	@ 0x28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20017058 	.word	0x20017058
 80062ec:	20017064 	.word	0x20017064
 80062f0:	2001705c 	.word	0x2001705c
 80062f4:	20017050 	.word	0x20017050
 80062f8:	20017060 	.word	0x20017060

080062fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d04a      	beq.n	80063a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800630e:	2308      	movs	r3, #8
 8006310:	425b      	negs	r3, r3
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4413      	add	r3, r2
 8006316:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	4b22      	ldr	r3, [pc, #136]	@ (80063ac <vPortFree+0xb0>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4013      	ands	r3, r2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <vPortFree+0x46>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	60fb      	str	r3, [r7, #12]
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	e7fd      	b.n	800633e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00b      	beq.n	8006362 <vPortFree+0x66>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	60bb      	str	r3, [r7, #8]
}
 800635c:	bf00      	nop
 800635e:	bf00      	nop
 8006360:	e7fd      	b.n	800635e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	4b11      	ldr	r3, [pc, #68]	@ (80063ac <vPortFree+0xb0>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d019      	beq.n	80063a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d115      	bne.n	80063a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <vPortFree+0xb0>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	43db      	mvns	r3, r3
 8006382:	401a      	ands	r2, r3
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006388:	f7fe f8e6 	bl	8004558 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	4b07      	ldr	r3, [pc, #28]	@ (80063b0 <vPortFree+0xb4>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4413      	add	r3, r2
 8006396:	4a06      	ldr	r2, [pc, #24]	@ (80063b0 <vPortFree+0xb4>)
 8006398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800639a:	6938      	ldr	r0, [r7, #16]
 800639c:	f000 f884 	bl	80064a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80063a0:	f7fe f8e8 	bl	8004574 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063a4:	bf00      	nop
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20017064 	.word	0x20017064
 80063b0:	2001705c 	.word	0x2001705c

080063b4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80063b8:	4b03      	ldr	r3, [pc, #12]	@ (80063c8 <xPortGetFreeHeapSize+0x14>)
 80063ba:	681b      	ldr	r3, [r3, #0]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	2001705c 	.word	0x2001705c

080063cc <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 80063d0:	4b03      	ldr	r3, [pc, #12]	@ (80063e0 <xPortGetMinimumEverFreeHeapSize+0x14>)
 80063d2:	681b      	ldr	r3, [r3, #0]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20017060 	.word	0x20017060

080063e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ea:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80063ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063f0:	4b27      	ldr	r3, [pc, #156]	@ (8006490 <prvHeapInit+0xac>)
 80063f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3307      	adds	r3, #7
 8006402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0307 	bic.w	r3, r3, #7
 800640a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	4a1f      	ldr	r2, [pc, #124]	@ (8006490 <prvHeapInit+0xac>)
 8006414:	4413      	add	r3, r2
 8006416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800641c:	4a1d      	ldr	r2, [pc, #116]	@ (8006494 <prvHeapInit+0xb0>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006422:	4b1c      	ldr	r3, [pc, #112]	@ (8006494 <prvHeapInit+0xb0>)
 8006424:	2200      	movs	r2, #0
 8006426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	4413      	add	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006430:	2208      	movs	r2, #8
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4a15      	ldr	r2, [pc, #84]	@ (8006498 <prvHeapInit+0xb4>)
 8006444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006446:	4b14      	ldr	r3, [pc, #80]	@ (8006498 <prvHeapInit+0xb4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800644e:	4b12      	ldr	r3, [pc, #72]	@ (8006498 <prvHeapInit+0xb4>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006464:	4b0c      	ldr	r3, [pc, #48]	@ (8006498 <prvHeapInit+0xb4>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a0a      	ldr	r2, [pc, #40]	@ (800649c <prvHeapInit+0xb8>)
 8006472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	4a09      	ldr	r2, [pc, #36]	@ (80064a0 <prvHeapInit+0xbc>)
 800647a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800647c:	4b09      	ldr	r3, [pc, #36]	@ (80064a4 <prvHeapInit+0xc0>)
 800647e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006482:	601a      	str	r2, [r3, #0]
}
 8006484:	bf00      	nop
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	20004450 	.word	0x20004450
 8006494:	20017050 	.word	0x20017050
 8006498:	20017058 	.word	0x20017058
 800649c:	20017060 	.word	0x20017060
 80064a0:	2001705c 	.word	0x2001705c
 80064a4:	20017064 	.word	0x20017064

080064a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064b0:	4b28      	ldr	r3, [pc, #160]	@ (8006554 <prvInsertBlockIntoFreeList+0xac>)
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e002      	b.n	80064bc <prvInsertBlockIntoFreeList+0x14>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d8f7      	bhi.n	80064b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4413      	add	r3, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d108      	bne.n	80064ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	441a      	add	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	441a      	add	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d118      	bne.n	8006530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4b15      	ldr	r3, [pc, #84]	@ (8006558 <prvInsertBlockIntoFreeList+0xb0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d00d      	beq.n	8006526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	441a      	add	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	e008      	b.n	8006538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006526:	4b0c      	ldr	r3, [pc, #48]	@ (8006558 <prvInsertBlockIntoFreeList+0xb0>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e003      	b.n	8006538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	d002      	beq.n	8006546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20017050 	.word	0x20017050
 8006558:	20017058 	.word	0x20017058

0800655c <std>:
 800655c:	2300      	movs	r3, #0
 800655e:	b510      	push	{r4, lr}
 8006560:	4604      	mov	r4, r0
 8006562:	e9c0 3300 	strd	r3, r3, [r0]
 8006566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800656a:	6083      	str	r3, [r0, #8]
 800656c:	8181      	strh	r1, [r0, #12]
 800656e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006570:	81c2      	strh	r2, [r0, #14]
 8006572:	6183      	str	r3, [r0, #24]
 8006574:	4619      	mov	r1, r3
 8006576:	2208      	movs	r2, #8
 8006578:	305c      	adds	r0, #92	@ 0x5c
 800657a:	f000 f981 	bl	8006880 <memset>
 800657e:	4b0d      	ldr	r3, [pc, #52]	@ (80065b4 <std+0x58>)
 8006580:	6263      	str	r3, [r4, #36]	@ 0x24
 8006582:	4b0d      	ldr	r3, [pc, #52]	@ (80065b8 <std+0x5c>)
 8006584:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006586:	4b0d      	ldr	r3, [pc, #52]	@ (80065bc <std+0x60>)
 8006588:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800658a:	4b0d      	ldr	r3, [pc, #52]	@ (80065c0 <std+0x64>)
 800658c:	6323      	str	r3, [r4, #48]	@ 0x30
 800658e:	4b0d      	ldr	r3, [pc, #52]	@ (80065c4 <std+0x68>)
 8006590:	6224      	str	r4, [r4, #32]
 8006592:	429c      	cmp	r4, r3
 8006594:	d006      	beq.n	80065a4 <std+0x48>
 8006596:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800659a:	4294      	cmp	r4, r2
 800659c:	d002      	beq.n	80065a4 <std+0x48>
 800659e:	33d0      	adds	r3, #208	@ 0xd0
 80065a0:	429c      	cmp	r4, r3
 80065a2:	d105      	bne.n	80065b0 <std+0x54>
 80065a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ac:	f000 ba50 	b.w	8006a50 <__retarget_lock_init_recursive>
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	bf00      	nop
 80065b4:	08006789 	.word	0x08006789
 80065b8:	080067ab 	.word	0x080067ab
 80065bc:	080067e3 	.word	0x080067e3
 80065c0:	08006807 	.word	0x08006807
 80065c4:	20017068 	.word	0x20017068

080065c8 <stdio_exit_handler>:
 80065c8:	4a02      	ldr	r2, [pc, #8]	@ (80065d4 <stdio_exit_handler+0xc>)
 80065ca:	4903      	ldr	r1, [pc, #12]	@ (80065d8 <stdio_exit_handler+0x10>)
 80065cc:	4803      	ldr	r0, [pc, #12]	@ (80065dc <stdio_exit_handler+0x14>)
 80065ce:	f000 b869 	b.w	80066a4 <_fwalk_sglue>
 80065d2:	bf00      	nop
 80065d4:	20000018 	.word	0x20000018
 80065d8:	08007395 	.word	0x08007395
 80065dc:	20000028 	.word	0x20000028

080065e0 <cleanup_stdio>:
 80065e0:	6841      	ldr	r1, [r0, #4]
 80065e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006614 <cleanup_stdio+0x34>)
 80065e4:	4299      	cmp	r1, r3
 80065e6:	b510      	push	{r4, lr}
 80065e8:	4604      	mov	r4, r0
 80065ea:	d001      	beq.n	80065f0 <cleanup_stdio+0x10>
 80065ec:	f000 fed2 	bl	8007394 <_fflush_r>
 80065f0:	68a1      	ldr	r1, [r4, #8]
 80065f2:	4b09      	ldr	r3, [pc, #36]	@ (8006618 <cleanup_stdio+0x38>)
 80065f4:	4299      	cmp	r1, r3
 80065f6:	d002      	beq.n	80065fe <cleanup_stdio+0x1e>
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fecb 	bl	8007394 <_fflush_r>
 80065fe:	68e1      	ldr	r1, [r4, #12]
 8006600:	4b06      	ldr	r3, [pc, #24]	@ (800661c <cleanup_stdio+0x3c>)
 8006602:	4299      	cmp	r1, r3
 8006604:	d004      	beq.n	8006610 <cleanup_stdio+0x30>
 8006606:	4620      	mov	r0, r4
 8006608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800660c:	f000 bec2 	b.w	8007394 <_fflush_r>
 8006610:	bd10      	pop	{r4, pc}
 8006612:	bf00      	nop
 8006614:	20017068 	.word	0x20017068
 8006618:	200170d0 	.word	0x200170d0
 800661c:	20017138 	.word	0x20017138

08006620 <global_stdio_init.part.0>:
 8006620:	b510      	push	{r4, lr}
 8006622:	4b0b      	ldr	r3, [pc, #44]	@ (8006650 <global_stdio_init.part.0+0x30>)
 8006624:	4c0b      	ldr	r4, [pc, #44]	@ (8006654 <global_stdio_init.part.0+0x34>)
 8006626:	4a0c      	ldr	r2, [pc, #48]	@ (8006658 <global_stdio_init.part.0+0x38>)
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	4620      	mov	r0, r4
 800662c:	2200      	movs	r2, #0
 800662e:	2104      	movs	r1, #4
 8006630:	f7ff ff94 	bl	800655c <std>
 8006634:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006638:	2201      	movs	r2, #1
 800663a:	2109      	movs	r1, #9
 800663c:	f7ff ff8e 	bl	800655c <std>
 8006640:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006644:	2202      	movs	r2, #2
 8006646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800664a:	2112      	movs	r1, #18
 800664c:	f7ff bf86 	b.w	800655c <std>
 8006650:	200171a0 	.word	0x200171a0
 8006654:	20017068 	.word	0x20017068
 8006658:	080065c9 	.word	0x080065c9

0800665c <__sfp_lock_acquire>:
 800665c:	4801      	ldr	r0, [pc, #4]	@ (8006664 <__sfp_lock_acquire+0x8>)
 800665e:	f000 b9f8 	b.w	8006a52 <__retarget_lock_acquire_recursive>
 8006662:	bf00      	nop
 8006664:	200171a9 	.word	0x200171a9

08006668 <__sfp_lock_release>:
 8006668:	4801      	ldr	r0, [pc, #4]	@ (8006670 <__sfp_lock_release+0x8>)
 800666a:	f000 b9f3 	b.w	8006a54 <__retarget_lock_release_recursive>
 800666e:	bf00      	nop
 8006670:	200171a9 	.word	0x200171a9

08006674 <__sinit>:
 8006674:	b510      	push	{r4, lr}
 8006676:	4604      	mov	r4, r0
 8006678:	f7ff fff0 	bl	800665c <__sfp_lock_acquire>
 800667c:	6a23      	ldr	r3, [r4, #32]
 800667e:	b11b      	cbz	r3, 8006688 <__sinit+0x14>
 8006680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006684:	f7ff bff0 	b.w	8006668 <__sfp_lock_release>
 8006688:	4b04      	ldr	r3, [pc, #16]	@ (800669c <__sinit+0x28>)
 800668a:	6223      	str	r3, [r4, #32]
 800668c:	4b04      	ldr	r3, [pc, #16]	@ (80066a0 <__sinit+0x2c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1f5      	bne.n	8006680 <__sinit+0xc>
 8006694:	f7ff ffc4 	bl	8006620 <global_stdio_init.part.0>
 8006698:	e7f2      	b.n	8006680 <__sinit+0xc>
 800669a:	bf00      	nop
 800669c:	080065e1 	.word	0x080065e1
 80066a0:	200171a0 	.word	0x200171a0

080066a4 <_fwalk_sglue>:
 80066a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a8:	4607      	mov	r7, r0
 80066aa:	4688      	mov	r8, r1
 80066ac:	4614      	mov	r4, r2
 80066ae:	2600      	movs	r6, #0
 80066b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066b4:	f1b9 0901 	subs.w	r9, r9, #1
 80066b8:	d505      	bpl.n	80066c6 <_fwalk_sglue+0x22>
 80066ba:	6824      	ldr	r4, [r4, #0]
 80066bc:	2c00      	cmp	r4, #0
 80066be:	d1f7      	bne.n	80066b0 <_fwalk_sglue+0xc>
 80066c0:	4630      	mov	r0, r6
 80066c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066c6:	89ab      	ldrh	r3, [r5, #12]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d907      	bls.n	80066dc <_fwalk_sglue+0x38>
 80066cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066d0:	3301      	adds	r3, #1
 80066d2:	d003      	beq.n	80066dc <_fwalk_sglue+0x38>
 80066d4:	4629      	mov	r1, r5
 80066d6:	4638      	mov	r0, r7
 80066d8:	47c0      	blx	r8
 80066da:	4306      	orrs	r6, r0
 80066dc:	3568      	adds	r5, #104	@ 0x68
 80066de:	e7e9      	b.n	80066b4 <_fwalk_sglue+0x10>

080066e0 <sniprintf>:
 80066e0:	b40c      	push	{r2, r3}
 80066e2:	b530      	push	{r4, r5, lr}
 80066e4:	4b17      	ldr	r3, [pc, #92]	@ (8006744 <sniprintf+0x64>)
 80066e6:	1e0c      	subs	r4, r1, #0
 80066e8:	681d      	ldr	r5, [r3, #0]
 80066ea:	b09d      	sub	sp, #116	@ 0x74
 80066ec:	da08      	bge.n	8006700 <sniprintf+0x20>
 80066ee:	238b      	movs	r3, #139	@ 0x8b
 80066f0:	602b      	str	r3, [r5, #0]
 80066f2:	f04f 30ff 	mov.w	r0, #4294967295
 80066f6:	b01d      	add	sp, #116	@ 0x74
 80066f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066fc:	b002      	add	sp, #8
 80066fe:	4770      	bx	lr
 8006700:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006704:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006708:	bf14      	ite	ne
 800670a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800670e:	4623      	moveq	r3, r4
 8006710:	9304      	str	r3, [sp, #16]
 8006712:	9307      	str	r3, [sp, #28]
 8006714:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006718:	9002      	str	r0, [sp, #8]
 800671a:	9006      	str	r0, [sp, #24]
 800671c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006720:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006722:	ab21      	add	r3, sp, #132	@ 0x84
 8006724:	a902      	add	r1, sp, #8
 8006726:	4628      	mov	r0, r5
 8006728:	9301      	str	r3, [sp, #4]
 800672a:	f000 fb25 	bl	8006d78 <_svfiprintf_r>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	bfbc      	itt	lt
 8006732:	238b      	movlt	r3, #139	@ 0x8b
 8006734:	602b      	strlt	r3, [r5, #0]
 8006736:	2c00      	cmp	r4, #0
 8006738:	d0dd      	beq.n	80066f6 <sniprintf+0x16>
 800673a:	9b02      	ldr	r3, [sp, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	e7d9      	b.n	80066f6 <sniprintf+0x16>
 8006742:	bf00      	nop
 8006744:	20000024 	.word	0x20000024

08006748 <siprintf>:
 8006748:	b40e      	push	{r1, r2, r3}
 800674a:	b500      	push	{lr}
 800674c:	b09c      	sub	sp, #112	@ 0x70
 800674e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006750:	9002      	str	r0, [sp, #8]
 8006752:	9006      	str	r0, [sp, #24]
 8006754:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006758:	4809      	ldr	r0, [pc, #36]	@ (8006780 <siprintf+0x38>)
 800675a:	9107      	str	r1, [sp, #28]
 800675c:	9104      	str	r1, [sp, #16]
 800675e:	4909      	ldr	r1, [pc, #36]	@ (8006784 <siprintf+0x3c>)
 8006760:	f853 2b04 	ldr.w	r2, [r3], #4
 8006764:	9105      	str	r1, [sp, #20]
 8006766:	6800      	ldr	r0, [r0, #0]
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	a902      	add	r1, sp, #8
 800676c:	f000 fb04 	bl	8006d78 <_svfiprintf_r>
 8006770:	9b02      	ldr	r3, [sp, #8]
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	b01c      	add	sp, #112	@ 0x70
 8006778:	f85d eb04 	ldr.w	lr, [sp], #4
 800677c:	b003      	add	sp, #12
 800677e:	4770      	bx	lr
 8006780:	20000024 	.word	0x20000024
 8006784:	ffff0208 	.word	0xffff0208

08006788 <__sread>:
 8006788:	b510      	push	{r4, lr}
 800678a:	460c      	mov	r4, r1
 800678c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006790:	f000 f910 	bl	80069b4 <_read_r>
 8006794:	2800      	cmp	r0, #0
 8006796:	bfab      	itete	ge
 8006798:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800679a:	89a3      	ldrhlt	r3, [r4, #12]
 800679c:	181b      	addge	r3, r3, r0
 800679e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067a2:	bfac      	ite	ge
 80067a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067a6:	81a3      	strhlt	r3, [r4, #12]
 80067a8:	bd10      	pop	{r4, pc}

080067aa <__swrite>:
 80067aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ae:	461f      	mov	r7, r3
 80067b0:	898b      	ldrh	r3, [r1, #12]
 80067b2:	05db      	lsls	r3, r3, #23
 80067b4:	4605      	mov	r5, r0
 80067b6:	460c      	mov	r4, r1
 80067b8:	4616      	mov	r6, r2
 80067ba:	d505      	bpl.n	80067c8 <__swrite+0x1e>
 80067bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c0:	2302      	movs	r3, #2
 80067c2:	2200      	movs	r2, #0
 80067c4:	f000 f8e4 	bl	8006990 <_lseek_r>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067d2:	81a3      	strh	r3, [r4, #12]
 80067d4:	4632      	mov	r2, r6
 80067d6:	463b      	mov	r3, r7
 80067d8:	4628      	mov	r0, r5
 80067da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067de:	f000 b8fb 	b.w	80069d8 <_write_r>

080067e2 <__sseek>:
 80067e2:	b510      	push	{r4, lr}
 80067e4:	460c      	mov	r4, r1
 80067e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ea:	f000 f8d1 	bl	8006990 <_lseek_r>
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	bf15      	itete	ne
 80067f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80067f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067fe:	81a3      	strheq	r3, [r4, #12]
 8006800:	bf18      	it	ne
 8006802:	81a3      	strhne	r3, [r4, #12]
 8006804:	bd10      	pop	{r4, pc}

08006806 <__sclose>:
 8006806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680a:	f000 b8b1 	b.w	8006970 <_close_r>

0800680e <_vsniprintf_r>:
 800680e:	b530      	push	{r4, r5, lr}
 8006810:	4614      	mov	r4, r2
 8006812:	2c00      	cmp	r4, #0
 8006814:	b09b      	sub	sp, #108	@ 0x6c
 8006816:	4605      	mov	r5, r0
 8006818:	461a      	mov	r2, r3
 800681a:	da05      	bge.n	8006828 <_vsniprintf_r+0x1a>
 800681c:	238b      	movs	r3, #139	@ 0x8b
 800681e:	6003      	str	r3, [r0, #0]
 8006820:	f04f 30ff 	mov.w	r0, #4294967295
 8006824:	b01b      	add	sp, #108	@ 0x6c
 8006826:	bd30      	pop	{r4, r5, pc}
 8006828:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800682c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006830:	bf14      	ite	ne
 8006832:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006836:	4623      	moveq	r3, r4
 8006838:	9302      	str	r3, [sp, #8]
 800683a:	9305      	str	r3, [sp, #20]
 800683c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006840:	9100      	str	r1, [sp, #0]
 8006842:	9104      	str	r1, [sp, #16]
 8006844:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006848:	4669      	mov	r1, sp
 800684a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800684c:	f000 fa94 	bl	8006d78 <_svfiprintf_r>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	bfbc      	itt	lt
 8006854:	238b      	movlt	r3, #139	@ 0x8b
 8006856:	602b      	strlt	r3, [r5, #0]
 8006858:	2c00      	cmp	r4, #0
 800685a:	d0e3      	beq.n	8006824 <_vsniprintf_r+0x16>
 800685c:	9b00      	ldr	r3, [sp, #0]
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	e7df      	b.n	8006824 <_vsniprintf_r+0x16>

08006864 <vsniprintf>:
 8006864:	b507      	push	{r0, r1, r2, lr}
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	4613      	mov	r3, r2
 800686a:	460a      	mov	r2, r1
 800686c:	4601      	mov	r1, r0
 800686e:	4803      	ldr	r0, [pc, #12]	@ (800687c <vsniprintf+0x18>)
 8006870:	6800      	ldr	r0, [r0, #0]
 8006872:	f7ff ffcc 	bl	800680e <_vsniprintf_r>
 8006876:	b003      	add	sp, #12
 8006878:	f85d fb04 	ldr.w	pc, [sp], #4
 800687c:	20000024 	.word	0x20000024

08006880 <memset>:
 8006880:	4402      	add	r2, r0
 8006882:	4603      	mov	r3, r0
 8006884:	4293      	cmp	r3, r2
 8006886:	d100      	bne.n	800688a <memset+0xa>
 8006888:	4770      	bx	lr
 800688a:	f803 1b01 	strb.w	r1, [r3], #1
 800688e:	e7f9      	b.n	8006884 <memset+0x4>

08006890 <strncpy>:
 8006890:	b510      	push	{r4, lr}
 8006892:	3901      	subs	r1, #1
 8006894:	4603      	mov	r3, r0
 8006896:	b132      	cbz	r2, 80068a6 <strncpy+0x16>
 8006898:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800689c:	f803 4b01 	strb.w	r4, [r3], #1
 80068a0:	3a01      	subs	r2, #1
 80068a2:	2c00      	cmp	r4, #0
 80068a4:	d1f7      	bne.n	8006896 <strncpy+0x6>
 80068a6:	441a      	add	r2, r3
 80068a8:	2100      	movs	r1, #0
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d100      	bne.n	80068b0 <strncpy+0x20>
 80068ae:	bd10      	pop	{r4, pc}
 80068b0:	f803 1b01 	strb.w	r1, [r3], #1
 80068b4:	e7f9      	b.n	80068aa <strncpy+0x1a>
	...

080068b8 <strtok>:
 80068b8:	4b16      	ldr	r3, [pc, #88]	@ (8006914 <strtok+0x5c>)
 80068ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068be:	681f      	ldr	r7, [r3, #0]
 80068c0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80068c2:	4605      	mov	r5, r0
 80068c4:	460e      	mov	r6, r1
 80068c6:	b9ec      	cbnz	r4, 8006904 <strtok+0x4c>
 80068c8:	2050      	movs	r0, #80	@ 0x50
 80068ca:	f000 f943 	bl	8006b54 <malloc>
 80068ce:	4602      	mov	r2, r0
 80068d0:	6478      	str	r0, [r7, #68]	@ 0x44
 80068d2:	b920      	cbnz	r0, 80068de <strtok+0x26>
 80068d4:	4b10      	ldr	r3, [pc, #64]	@ (8006918 <strtok+0x60>)
 80068d6:	4811      	ldr	r0, [pc, #68]	@ (800691c <strtok+0x64>)
 80068d8:	215b      	movs	r1, #91	@ 0x5b
 80068da:	f000 f8d3 	bl	8006a84 <__assert_func>
 80068de:	e9c0 4400 	strd	r4, r4, [r0]
 80068e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80068e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80068ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80068ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80068f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80068f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80068fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80068fe:	6184      	str	r4, [r0, #24]
 8006900:	7704      	strb	r4, [r0, #28]
 8006902:	6244      	str	r4, [r0, #36]	@ 0x24
 8006904:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	2301      	movs	r3, #1
 800690c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006910:	f000 b806 	b.w	8006920 <__strtok_r>
 8006914:	20000024 	.word	0x20000024
 8006918:	08008348 	.word	0x08008348
 800691c:	0800835f 	.word	0x0800835f

08006920 <__strtok_r>:
 8006920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006922:	4604      	mov	r4, r0
 8006924:	b908      	cbnz	r0, 800692a <__strtok_r+0xa>
 8006926:	6814      	ldr	r4, [r2, #0]
 8006928:	b144      	cbz	r4, 800693c <__strtok_r+0x1c>
 800692a:	4620      	mov	r0, r4
 800692c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006930:	460f      	mov	r7, r1
 8006932:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006936:	b91e      	cbnz	r6, 8006940 <__strtok_r+0x20>
 8006938:	b965      	cbnz	r5, 8006954 <__strtok_r+0x34>
 800693a:	6015      	str	r5, [r2, #0]
 800693c:	2000      	movs	r0, #0
 800693e:	e005      	b.n	800694c <__strtok_r+0x2c>
 8006940:	42b5      	cmp	r5, r6
 8006942:	d1f6      	bne.n	8006932 <__strtok_r+0x12>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f0      	bne.n	800692a <__strtok_r+0xa>
 8006948:	6014      	str	r4, [r2, #0]
 800694a:	7003      	strb	r3, [r0, #0]
 800694c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800694e:	461c      	mov	r4, r3
 8006950:	e00c      	b.n	800696c <__strtok_r+0x4c>
 8006952:	b915      	cbnz	r5, 800695a <__strtok_r+0x3a>
 8006954:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006958:	460e      	mov	r6, r1
 800695a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800695e:	42ab      	cmp	r3, r5
 8006960:	d1f7      	bne.n	8006952 <__strtok_r+0x32>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0f3      	beq.n	800694e <__strtok_r+0x2e>
 8006966:	2300      	movs	r3, #0
 8006968:	f804 3c01 	strb.w	r3, [r4, #-1]
 800696c:	6014      	str	r4, [r2, #0]
 800696e:	e7ed      	b.n	800694c <__strtok_r+0x2c>

08006970 <_close_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4d06      	ldr	r5, [pc, #24]	@ (800698c <_close_r+0x1c>)
 8006974:	2300      	movs	r3, #0
 8006976:	4604      	mov	r4, r0
 8006978:	4608      	mov	r0, r1
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	f7fa fec8 	bl	8001710 <_close>
 8006980:	1c43      	adds	r3, r0, #1
 8006982:	d102      	bne.n	800698a <_close_r+0x1a>
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	b103      	cbz	r3, 800698a <_close_r+0x1a>
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	bd38      	pop	{r3, r4, r5, pc}
 800698c:	200171a4 	.word	0x200171a4

08006990 <_lseek_r>:
 8006990:	b538      	push	{r3, r4, r5, lr}
 8006992:	4d07      	ldr	r5, [pc, #28]	@ (80069b0 <_lseek_r+0x20>)
 8006994:	4604      	mov	r4, r0
 8006996:	4608      	mov	r0, r1
 8006998:	4611      	mov	r1, r2
 800699a:	2200      	movs	r2, #0
 800699c:	602a      	str	r2, [r5, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	f7fa fedd 	bl	800175e <_lseek>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d102      	bne.n	80069ae <_lseek_r+0x1e>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	b103      	cbz	r3, 80069ae <_lseek_r+0x1e>
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	200171a4 	.word	0x200171a4

080069b4 <_read_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4d07      	ldr	r5, [pc, #28]	@ (80069d4 <_read_r+0x20>)
 80069b8:	4604      	mov	r4, r0
 80069ba:	4608      	mov	r0, r1
 80069bc:	4611      	mov	r1, r2
 80069be:	2200      	movs	r2, #0
 80069c0:	602a      	str	r2, [r5, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f7fa fe6b 	bl	800169e <_read>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_read_r+0x1e>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_read_r+0x1e>
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	200171a4 	.word	0x200171a4

080069d8 <_write_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4d07      	ldr	r5, [pc, #28]	@ (80069f8 <_write_r+0x20>)
 80069dc:	4604      	mov	r4, r0
 80069de:	4608      	mov	r0, r1
 80069e0:	4611      	mov	r1, r2
 80069e2:	2200      	movs	r2, #0
 80069e4:	602a      	str	r2, [r5, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f7fa fe76 	bl	80016d8 <_write>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d102      	bne.n	80069f6 <_write_r+0x1e>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	b103      	cbz	r3, 80069f6 <_write_r+0x1e>
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	200171a4 	.word	0x200171a4

080069fc <__errno>:
 80069fc:	4b01      	ldr	r3, [pc, #4]	@ (8006a04 <__errno+0x8>)
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	20000024 	.word	0x20000024

08006a08 <__libc_init_array>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8006a40 <__libc_init_array+0x38>)
 8006a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8006a44 <__libc_init_array+0x3c>)
 8006a0e:	1b64      	subs	r4, r4, r5
 8006a10:	10a4      	asrs	r4, r4, #2
 8006a12:	2600      	movs	r6, #0
 8006a14:	42a6      	cmp	r6, r4
 8006a16:	d109      	bne.n	8006a2c <__libc_init_array+0x24>
 8006a18:	4d0b      	ldr	r5, [pc, #44]	@ (8006a48 <__libc_init_array+0x40>)
 8006a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8006a4c <__libc_init_array+0x44>)
 8006a1c:	f000 fff8 	bl	8007a10 <_init>
 8006a20:	1b64      	subs	r4, r4, r5
 8006a22:	10a4      	asrs	r4, r4, #2
 8006a24:	2600      	movs	r6, #0
 8006a26:	42a6      	cmp	r6, r4
 8006a28:	d105      	bne.n	8006a36 <__libc_init_array+0x2e>
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a30:	4798      	blx	r3
 8006a32:	3601      	adds	r6, #1
 8006a34:	e7ee      	b.n	8006a14 <__libc_init_array+0xc>
 8006a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3a:	4798      	blx	r3
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	e7f2      	b.n	8006a26 <__libc_init_array+0x1e>
 8006a40:	08008430 	.word	0x08008430
 8006a44:	08008430 	.word	0x08008430
 8006a48:	08008430 	.word	0x08008430
 8006a4c:	08008434 	.word	0x08008434

08006a50 <__retarget_lock_init_recursive>:
 8006a50:	4770      	bx	lr

08006a52 <__retarget_lock_acquire_recursive>:
 8006a52:	4770      	bx	lr

08006a54 <__retarget_lock_release_recursive>:
 8006a54:	4770      	bx	lr

08006a56 <strcpy>:
 8006a56:	4603      	mov	r3, r0
 8006a58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a5c:	f803 2b01 	strb.w	r2, [r3], #1
 8006a60:	2a00      	cmp	r2, #0
 8006a62:	d1f9      	bne.n	8006a58 <strcpy+0x2>
 8006a64:	4770      	bx	lr

08006a66 <memcpy>:
 8006a66:	440a      	add	r2, r1
 8006a68:	4291      	cmp	r1, r2
 8006a6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a6e:	d100      	bne.n	8006a72 <memcpy+0xc>
 8006a70:	4770      	bx	lr
 8006a72:	b510      	push	{r4, lr}
 8006a74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a7c:	4291      	cmp	r1, r2
 8006a7e:	d1f9      	bne.n	8006a74 <memcpy+0xe>
 8006a80:	bd10      	pop	{r4, pc}
	...

08006a84 <__assert_func>:
 8006a84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a86:	4614      	mov	r4, r2
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4b09      	ldr	r3, [pc, #36]	@ (8006ab0 <__assert_func+0x2c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4605      	mov	r5, r0
 8006a90:	68d8      	ldr	r0, [r3, #12]
 8006a92:	b954      	cbnz	r4, 8006aaa <__assert_func+0x26>
 8006a94:	4b07      	ldr	r3, [pc, #28]	@ (8006ab4 <__assert_func+0x30>)
 8006a96:	461c      	mov	r4, r3
 8006a98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a9c:	9100      	str	r1, [sp, #0]
 8006a9e:	462b      	mov	r3, r5
 8006aa0:	4905      	ldr	r1, [pc, #20]	@ (8006ab8 <__assert_func+0x34>)
 8006aa2:	f000 fc9f 	bl	80073e4 <fiprintf>
 8006aa6:	f000 fcd9 	bl	800745c <abort>
 8006aaa:	4b04      	ldr	r3, [pc, #16]	@ (8006abc <__assert_func+0x38>)
 8006aac:	e7f4      	b.n	8006a98 <__assert_func+0x14>
 8006aae:	bf00      	nop
 8006ab0:	20000024 	.word	0x20000024
 8006ab4:	080083f4 	.word	0x080083f4
 8006ab8:	080083c6 	.word	0x080083c6
 8006abc:	080083b9 	.word	0x080083b9

08006ac0 <_free_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	d041      	beq.n	8006b4c <_free_r+0x8c>
 8006ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006acc:	1f0c      	subs	r4, r1, #4
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bfb8      	it	lt
 8006ad2:	18e4      	addlt	r4, r4, r3
 8006ad4:	f000 f8e8 	bl	8006ca8 <__malloc_lock>
 8006ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8006b50 <_free_r+0x90>)
 8006ada:	6813      	ldr	r3, [r2, #0]
 8006adc:	b933      	cbnz	r3, 8006aec <_free_r+0x2c>
 8006ade:	6063      	str	r3, [r4, #4]
 8006ae0:	6014      	str	r4, [r2, #0]
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ae8:	f000 b8e4 	b.w	8006cb4 <__malloc_unlock>
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	d908      	bls.n	8006b02 <_free_r+0x42>
 8006af0:	6820      	ldr	r0, [r4, #0]
 8006af2:	1821      	adds	r1, r4, r0
 8006af4:	428b      	cmp	r3, r1
 8006af6:	bf01      	itttt	eq
 8006af8:	6819      	ldreq	r1, [r3, #0]
 8006afa:	685b      	ldreq	r3, [r3, #4]
 8006afc:	1809      	addeq	r1, r1, r0
 8006afe:	6021      	streq	r1, [r4, #0]
 8006b00:	e7ed      	b.n	8006ade <_free_r+0x1e>
 8006b02:	461a      	mov	r2, r3
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	b10b      	cbz	r3, 8006b0c <_free_r+0x4c>
 8006b08:	42a3      	cmp	r3, r4
 8006b0a:	d9fa      	bls.n	8006b02 <_free_r+0x42>
 8006b0c:	6811      	ldr	r1, [r2, #0]
 8006b0e:	1850      	adds	r0, r2, r1
 8006b10:	42a0      	cmp	r0, r4
 8006b12:	d10b      	bne.n	8006b2c <_free_r+0x6c>
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	4401      	add	r1, r0
 8006b18:	1850      	adds	r0, r2, r1
 8006b1a:	4283      	cmp	r3, r0
 8006b1c:	6011      	str	r1, [r2, #0]
 8006b1e:	d1e0      	bne.n	8006ae2 <_free_r+0x22>
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	6053      	str	r3, [r2, #4]
 8006b26:	4408      	add	r0, r1
 8006b28:	6010      	str	r0, [r2, #0]
 8006b2a:	e7da      	b.n	8006ae2 <_free_r+0x22>
 8006b2c:	d902      	bls.n	8006b34 <_free_r+0x74>
 8006b2e:	230c      	movs	r3, #12
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	e7d6      	b.n	8006ae2 <_free_r+0x22>
 8006b34:	6820      	ldr	r0, [r4, #0]
 8006b36:	1821      	adds	r1, r4, r0
 8006b38:	428b      	cmp	r3, r1
 8006b3a:	bf04      	itt	eq
 8006b3c:	6819      	ldreq	r1, [r3, #0]
 8006b3e:	685b      	ldreq	r3, [r3, #4]
 8006b40:	6063      	str	r3, [r4, #4]
 8006b42:	bf04      	itt	eq
 8006b44:	1809      	addeq	r1, r1, r0
 8006b46:	6021      	streq	r1, [r4, #0]
 8006b48:	6054      	str	r4, [r2, #4]
 8006b4a:	e7ca      	b.n	8006ae2 <_free_r+0x22>
 8006b4c:	bd38      	pop	{r3, r4, r5, pc}
 8006b4e:	bf00      	nop
 8006b50:	200171b0 	.word	0x200171b0

08006b54 <malloc>:
 8006b54:	4b02      	ldr	r3, [pc, #8]	@ (8006b60 <malloc+0xc>)
 8006b56:	4601      	mov	r1, r0
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	f000 b825 	b.w	8006ba8 <_malloc_r>
 8006b5e:	bf00      	nop
 8006b60:	20000024 	.word	0x20000024

08006b64 <sbrk_aligned>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4e0f      	ldr	r6, [pc, #60]	@ (8006ba4 <sbrk_aligned+0x40>)
 8006b68:	460c      	mov	r4, r1
 8006b6a:	6831      	ldr	r1, [r6, #0]
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	b911      	cbnz	r1, 8006b76 <sbrk_aligned+0x12>
 8006b70:	f000 fc64 	bl	800743c <_sbrk_r>
 8006b74:	6030      	str	r0, [r6, #0]
 8006b76:	4621      	mov	r1, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f000 fc5f 	bl	800743c <_sbrk_r>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d103      	bne.n	8006b8a <sbrk_aligned+0x26>
 8006b82:	f04f 34ff 	mov.w	r4, #4294967295
 8006b86:	4620      	mov	r0, r4
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	1cc4      	adds	r4, r0, #3
 8006b8c:	f024 0403 	bic.w	r4, r4, #3
 8006b90:	42a0      	cmp	r0, r4
 8006b92:	d0f8      	beq.n	8006b86 <sbrk_aligned+0x22>
 8006b94:	1a21      	subs	r1, r4, r0
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 fc50 	bl	800743c <_sbrk_r>
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d1f2      	bne.n	8006b86 <sbrk_aligned+0x22>
 8006ba0:	e7ef      	b.n	8006b82 <sbrk_aligned+0x1e>
 8006ba2:	bf00      	nop
 8006ba4:	200171ac 	.word	0x200171ac

08006ba8 <_malloc_r>:
 8006ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bac:	1ccd      	adds	r5, r1, #3
 8006bae:	f025 0503 	bic.w	r5, r5, #3
 8006bb2:	3508      	adds	r5, #8
 8006bb4:	2d0c      	cmp	r5, #12
 8006bb6:	bf38      	it	cc
 8006bb8:	250c      	movcc	r5, #12
 8006bba:	2d00      	cmp	r5, #0
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	db01      	blt.n	8006bc4 <_malloc_r+0x1c>
 8006bc0:	42a9      	cmp	r1, r5
 8006bc2:	d904      	bls.n	8006bce <_malloc_r+0x26>
 8006bc4:	230c      	movs	r3, #12
 8006bc6:	6033      	str	r3, [r6, #0]
 8006bc8:	2000      	movs	r0, #0
 8006bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ca4 <_malloc_r+0xfc>
 8006bd2:	f000 f869 	bl	8006ca8 <__malloc_lock>
 8006bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8006bda:	461c      	mov	r4, r3
 8006bdc:	bb44      	cbnz	r4, 8006c30 <_malloc_r+0x88>
 8006bde:	4629      	mov	r1, r5
 8006be0:	4630      	mov	r0, r6
 8006be2:	f7ff ffbf 	bl	8006b64 <sbrk_aligned>
 8006be6:	1c43      	adds	r3, r0, #1
 8006be8:	4604      	mov	r4, r0
 8006bea:	d158      	bne.n	8006c9e <_malloc_r+0xf6>
 8006bec:	f8d8 4000 	ldr.w	r4, [r8]
 8006bf0:	4627      	mov	r7, r4
 8006bf2:	2f00      	cmp	r7, #0
 8006bf4:	d143      	bne.n	8006c7e <_malloc_r+0xd6>
 8006bf6:	2c00      	cmp	r4, #0
 8006bf8:	d04b      	beq.n	8006c92 <_malloc_r+0xea>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	4630      	mov	r0, r6
 8006c00:	eb04 0903 	add.w	r9, r4, r3
 8006c04:	f000 fc1a 	bl	800743c <_sbrk_r>
 8006c08:	4581      	cmp	r9, r0
 8006c0a:	d142      	bne.n	8006c92 <_malloc_r+0xea>
 8006c0c:	6821      	ldr	r1, [r4, #0]
 8006c0e:	1a6d      	subs	r5, r5, r1
 8006c10:	4629      	mov	r1, r5
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7ff ffa6 	bl	8006b64 <sbrk_aligned>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d03a      	beq.n	8006c92 <_malloc_r+0xea>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	442b      	add	r3, r5
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	f8d8 3000 	ldr.w	r3, [r8]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	bb62      	cbnz	r2, 8006c84 <_malloc_r+0xdc>
 8006c2a:	f8c8 7000 	str.w	r7, [r8]
 8006c2e:	e00f      	b.n	8006c50 <_malloc_r+0xa8>
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	1b52      	subs	r2, r2, r5
 8006c34:	d420      	bmi.n	8006c78 <_malloc_r+0xd0>
 8006c36:	2a0b      	cmp	r2, #11
 8006c38:	d917      	bls.n	8006c6a <_malloc_r+0xc2>
 8006c3a:	1961      	adds	r1, r4, r5
 8006c3c:	42a3      	cmp	r3, r4
 8006c3e:	6025      	str	r5, [r4, #0]
 8006c40:	bf18      	it	ne
 8006c42:	6059      	strne	r1, [r3, #4]
 8006c44:	6863      	ldr	r3, [r4, #4]
 8006c46:	bf08      	it	eq
 8006c48:	f8c8 1000 	streq.w	r1, [r8]
 8006c4c:	5162      	str	r2, [r4, r5]
 8006c4e:	604b      	str	r3, [r1, #4]
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 f82f 	bl	8006cb4 <__malloc_unlock>
 8006c56:	f104 000b 	add.w	r0, r4, #11
 8006c5a:	1d23      	adds	r3, r4, #4
 8006c5c:	f020 0007 	bic.w	r0, r0, #7
 8006c60:	1ac2      	subs	r2, r0, r3
 8006c62:	bf1c      	itt	ne
 8006c64:	1a1b      	subne	r3, r3, r0
 8006c66:	50a3      	strne	r3, [r4, r2]
 8006c68:	e7af      	b.n	8006bca <_malloc_r+0x22>
 8006c6a:	6862      	ldr	r2, [r4, #4]
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	bf0c      	ite	eq
 8006c70:	f8c8 2000 	streq.w	r2, [r8]
 8006c74:	605a      	strne	r2, [r3, #4]
 8006c76:	e7eb      	b.n	8006c50 <_malloc_r+0xa8>
 8006c78:	4623      	mov	r3, r4
 8006c7a:	6864      	ldr	r4, [r4, #4]
 8006c7c:	e7ae      	b.n	8006bdc <_malloc_r+0x34>
 8006c7e:	463c      	mov	r4, r7
 8006c80:	687f      	ldr	r7, [r7, #4]
 8006c82:	e7b6      	b.n	8006bf2 <_malloc_r+0x4a>
 8006c84:	461a      	mov	r2, r3
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	42a3      	cmp	r3, r4
 8006c8a:	d1fb      	bne.n	8006c84 <_malloc_r+0xdc>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	6053      	str	r3, [r2, #4]
 8006c90:	e7de      	b.n	8006c50 <_malloc_r+0xa8>
 8006c92:	230c      	movs	r3, #12
 8006c94:	6033      	str	r3, [r6, #0]
 8006c96:	4630      	mov	r0, r6
 8006c98:	f000 f80c 	bl	8006cb4 <__malloc_unlock>
 8006c9c:	e794      	b.n	8006bc8 <_malloc_r+0x20>
 8006c9e:	6005      	str	r5, [r0, #0]
 8006ca0:	e7d6      	b.n	8006c50 <_malloc_r+0xa8>
 8006ca2:	bf00      	nop
 8006ca4:	200171b0 	.word	0x200171b0

08006ca8 <__malloc_lock>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	@ (8006cb0 <__malloc_lock+0x8>)
 8006caa:	f7ff bed2 	b.w	8006a52 <__retarget_lock_acquire_recursive>
 8006cae:	bf00      	nop
 8006cb0:	200171a8 	.word	0x200171a8

08006cb4 <__malloc_unlock>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	@ (8006cbc <__malloc_unlock+0x8>)
 8006cb6:	f7ff becd 	b.w	8006a54 <__retarget_lock_release_recursive>
 8006cba:	bf00      	nop
 8006cbc:	200171a8 	.word	0x200171a8

08006cc0 <__ssputs_r>:
 8006cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	688e      	ldr	r6, [r1, #8]
 8006cc6:	461f      	mov	r7, r3
 8006cc8:	42be      	cmp	r6, r7
 8006cca:	680b      	ldr	r3, [r1, #0]
 8006ccc:	4682      	mov	sl, r0
 8006cce:	460c      	mov	r4, r1
 8006cd0:	4690      	mov	r8, r2
 8006cd2:	d82d      	bhi.n	8006d30 <__ssputs_r+0x70>
 8006cd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006cdc:	d026      	beq.n	8006d2c <__ssputs_r+0x6c>
 8006cde:	6965      	ldr	r5, [r4, #20]
 8006ce0:	6909      	ldr	r1, [r1, #16]
 8006ce2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ce6:	eba3 0901 	sub.w	r9, r3, r1
 8006cea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cee:	1c7b      	adds	r3, r7, #1
 8006cf0:	444b      	add	r3, r9
 8006cf2:	106d      	asrs	r5, r5, #1
 8006cf4:	429d      	cmp	r5, r3
 8006cf6:	bf38      	it	cc
 8006cf8:	461d      	movcc	r5, r3
 8006cfa:	0553      	lsls	r3, r2, #21
 8006cfc:	d527      	bpl.n	8006d4e <__ssputs_r+0x8e>
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f7ff ff52 	bl	8006ba8 <_malloc_r>
 8006d04:	4606      	mov	r6, r0
 8006d06:	b360      	cbz	r0, 8006d62 <__ssputs_r+0xa2>
 8006d08:	6921      	ldr	r1, [r4, #16]
 8006d0a:	464a      	mov	r2, r9
 8006d0c:	f7ff feab 	bl	8006a66 <memcpy>
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d1a:	81a3      	strh	r3, [r4, #12]
 8006d1c:	6126      	str	r6, [r4, #16]
 8006d1e:	6165      	str	r5, [r4, #20]
 8006d20:	444e      	add	r6, r9
 8006d22:	eba5 0509 	sub.w	r5, r5, r9
 8006d26:	6026      	str	r6, [r4, #0]
 8006d28:	60a5      	str	r5, [r4, #8]
 8006d2a:	463e      	mov	r6, r7
 8006d2c:	42be      	cmp	r6, r7
 8006d2e:	d900      	bls.n	8006d32 <__ssputs_r+0x72>
 8006d30:	463e      	mov	r6, r7
 8006d32:	6820      	ldr	r0, [r4, #0]
 8006d34:	4632      	mov	r2, r6
 8006d36:	4641      	mov	r1, r8
 8006d38:	f000 fb66 	bl	8007408 <memmove>
 8006d3c:	68a3      	ldr	r3, [r4, #8]
 8006d3e:	1b9b      	subs	r3, r3, r6
 8006d40:	60a3      	str	r3, [r4, #8]
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	4433      	add	r3, r6
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	2000      	movs	r0, #0
 8006d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d4e:	462a      	mov	r2, r5
 8006d50:	f000 fb8b 	bl	800746a <_realloc_r>
 8006d54:	4606      	mov	r6, r0
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d1e0      	bne.n	8006d1c <__ssputs_r+0x5c>
 8006d5a:	6921      	ldr	r1, [r4, #16]
 8006d5c:	4650      	mov	r0, sl
 8006d5e:	f7ff feaf 	bl	8006ac0 <_free_r>
 8006d62:	230c      	movs	r3, #12
 8006d64:	f8ca 3000 	str.w	r3, [sl]
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	e7e9      	b.n	8006d4a <__ssputs_r+0x8a>
	...

08006d78 <_svfiprintf_r>:
 8006d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	4698      	mov	r8, r3
 8006d7e:	898b      	ldrh	r3, [r1, #12]
 8006d80:	061b      	lsls	r3, r3, #24
 8006d82:	b09d      	sub	sp, #116	@ 0x74
 8006d84:	4607      	mov	r7, r0
 8006d86:	460d      	mov	r5, r1
 8006d88:	4614      	mov	r4, r2
 8006d8a:	d510      	bpl.n	8006dae <_svfiprintf_r+0x36>
 8006d8c:	690b      	ldr	r3, [r1, #16]
 8006d8e:	b973      	cbnz	r3, 8006dae <_svfiprintf_r+0x36>
 8006d90:	2140      	movs	r1, #64	@ 0x40
 8006d92:	f7ff ff09 	bl	8006ba8 <_malloc_r>
 8006d96:	6028      	str	r0, [r5, #0]
 8006d98:	6128      	str	r0, [r5, #16]
 8006d9a:	b930      	cbnz	r0, 8006daa <_svfiprintf_r+0x32>
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	b01d      	add	sp, #116	@ 0x74
 8006da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006daa:	2340      	movs	r3, #64	@ 0x40
 8006dac:	616b      	str	r3, [r5, #20]
 8006dae:	2300      	movs	r3, #0
 8006db0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006db2:	2320      	movs	r3, #32
 8006db4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dbc:	2330      	movs	r3, #48	@ 0x30
 8006dbe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f5c <_svfiprintf_r+0x1e4>
 8006dc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dc6:	f04f 0901 	mov.w	r9, #1
 8006dca:	4623      	mov	r3, r4
 8006dcc:	469a      	mov	sl, r3
 8006dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dd2:	b10a      	cbz	r2, 8006dd8 <_svfiprintf_r+0x60>
 8006dd4:	2a25      	cmp	r2, #37	@ 0x25
 8006dd6:	d1f9      	bne.n	8006dcc <_svfiprintf_r+0x54>
 8006dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8006ddc:	d00b      	beq.n	8006df6 <_svfiprintf_r+0x7e>
 8006dde:	465b      	mov	r3, fp
 8006de0:	4622      	mov	r2, r4
 8006de2:	4629      	mov	r1, r5
 8006de4:	4638      	mov	r0, r7
 8006de6:	f7ff ff6b 	bl	8006cc0 <__ssputs_r>
 8006dea:	3001      	adds	r0, #1
 8006dec:	f000 80a7 	beq.w	8006f3e <_svfiprintf_r+0x1c6>
 8006df0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006df2:	445a      	add	r2, fp
 8006df4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006df6:	f89a 3000 	ldrb.w	r3, [sl]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 809f 	beq.w	8006f3e <_svfiprintf_r+0x1c6>
 8006e00:	2300      	movs	r3, #0
 8006e02:	f04f 32ff 	mov.w	r2, #4294967295
 8006e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e0a:	f10a 0a01 	add.w	sl, sl, #1
 8006e0e:	9304      	str	r3, [sp, #16]
 8006e10:	9307      	str	r3, [sp, #28]
 8006e12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e16:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e18:	4654      	mov	r4, sl
 8006e1a:	2205      	movs	r2, #5
 8006e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e20:	484e      	ldr	r0, [pc, #312]	@ (8006f5c <_svfiprintf_r+0x1e4>)
 8006e22:	f7f9 f9ed 	bl	8000200 <memchr>
 8006e26:	9a04      	ldr	r2, [sp, #16]
 8006e28:	b9d8      	cbnz	r0, 8006e62 <_svfiprintf_r+0xea>
 8006e2a:	06d0      	lsls	r0, r2, #27
 8006e2c:	bf44      	itt	mi
 8006e2e:	2320      	movmi	r3, #32
 8006e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e34:	0711      	lsls	r1, r2, #28
 8006e36:	bf44      	itt	mi
 8006e38:	232b      	movmi	r3, #43	@ 0x2b
 8006e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e44:	d015      	beq.n	8006e72 <_svfiprintf_r+0xfa>
 8006e46:	9a07      	ldr	r2, [sp, #28]
 8006e48:	4654      	mov	r4, sl
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	f04f 0c0a 	mov.w	ip, #10
 8006e50:	4621      	mov	r1, r4
 8006e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e56:	3b30      	subs	r3, #48	@ 0x30
 8006e58:	2b09      	cmp	r3, #9
 8006e5a:	d94b      	bls.n	8006ef4 <_svfiprintf_r+0x17c>
 8006e5c:	b1b0      	cbz	r0, 8006e8c <_svfiprintf_r+0x114>
 8006e5e:	9207      	str	r2, [sp, #28]
 8006e60:	e014      	b.n	8006e8c <_svfiprintf_r+0x114>
 8006e62:	eba0 0308 	sub.w	r3, r0, r8
 8006e66:	fa09 f303 	lsl.w	r3, r9, r3
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	46a2      	mov	sl, r4
 8006e70:	e7d2      	b.n	8006e18 <_svfiprintf_r+0xa0>
 8006e72:	9b03      	ldr	r3, [sp, #12]
 8006e74:	1d19      	adds	r1, r3, #4
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	9103      	str	r1, [sp, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	bfbb      	ittet	lt
 8006e7e:	425b      	neglt	r3, r3
 8006e80:	f042 0202 	orrlt.w	r2, r2, #2
 8006e84:	9307      	strge	r3, [sp, #28]
 8006e86:	9307      	strlt	r3, [sp, #28]
 8006e88:	bfb8      	it	lt
 8006e8a:	9204      	strlt	r2, [sp, #16]
 8006e8c:	7823      	ldrb	r3, [r4, #0]
 8006e8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e90:	d10a      	bne.n	8006ea8 <_svfiprintf_r+0x130>
 8006e92:	7863      	ldrb	r3, [r4, #1]
 8006e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e96:	d132      	bne.n	8006efe <_svfiprintf_r+0x186>
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	1d1a      	adds	r2, r3, #4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	9203      	str	r2, [sp, #12]
 8006ea0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ea4:	3402      	adds	r4, #2
 8006ea6:	9305      	str	r3, [sp, #20]
 8006ea8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f6c <_svfiprintf_r+0x1f4>
 8006eac:	7821      	ldrb	r1, [r4, #0]
 8006eae:	2203      	movs	r2, #3
 8006eb0:	4650      	mov	r0, sl
 8006eb2:	f7f9 f9a5 	bl	8000200 <memchr>
 8006eb6:	b138      	cbz	r0, 8006ec8 <_svfiprintf_r+0x150>
 8006eb8:	9b04      	ldr	r3, [sp, #16]
 8006eba:	eba0 000a 	sub.w	r0, r0, sl
 8006ebe:	2240      	movs	r2, #64	@ 0x40
 8006ec0:	4082      	lsls	r2, r0
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	3401      	adds	r4, #1
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ecc:	4824      	ldr	r0, [pc, #144]	@ (8006f60 <_svfiprintf_r+0x1e8>)
 8006ece:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ed2:	2206      	movs	r2, #6
 8006ed4:	f7f9 f994 	bl	8000200 <memchr>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d036      	beq.n	8006f4a <_svfiprintf_r+0x1d2>
 8006edc:	4b21      	ldr	r3, [pc, #132]	@ (8006f64 <_svfiprintf_r+0x1ec>)
 8006ede:	bb1b      	cbnz	r3, 8006f28 <_svfiprintf_r+0x1b0>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	3307      	adds	r3, #7
 8006ee4:	f023 0307 	bic.w	r3, r3, #7
 8006ee8:	3308      	adds	r3, #8
 8006eea:	9303      	str	r3, [sp, #12]
 8006eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eee:	4433      	add	r3, r6
 8006ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ef2:	e76a      	b.n	8006dca <_svfiprintf_r+0x52>
 8006ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef8:	460c      	mov	r4, r1
 8006efa:	2001      	movs	r0, #1
 8006efc:	e7a8      	b.n	8006e50 <_svfiprintf_r+0xd8>
 8006efe:	2300      	movs	r3, #0
 8006f00:	3401      	adds	r4, #1
 8006f02:	9305      	str	r3, [sp, #20]
 8006f04:	4619      	mov	r1, r3
 8006f06:	f04f 0c0a 	mov.w	ip, #10
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f10:	3a30      	subs	r2, #48	@ 0x30
 8006f12:	2a09      	cmp	r2, #9
 8006f14:	d903      	bls.n	8006f1e <_svfiprintf_r+0x1a6>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0c6      	beq.n	8006ea8 <_svfiprintf_r+0x130>
 8006f1a:	9105      	str	r1, [sp, #20]
 8006f1c:	e7c4      	b.n	8006ea8 <_svfiprintf_r+0x130>
 8006f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f22:	4604      	mov	r4, r0
 8006f24:	2301      	movs	r3, #1
 8006f26:	e7f0      	b.n	8006f0a <_svfiprintf_r+0x192>
 8006f28:	ab03      	add	r3, sp, #12
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	462a      	mov	r2, r5
 8006f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f68 <_svfiprintf_r+0x1f0>)
 8006f30:	a904      	add	r1, sp, #16
 8006f32:	4638      	mov	r0, r7
 8006f34:	f3af 8000 	nop.w
 8006f38:	1c42      	adds	r2, r0, #1
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	d1d6      	bne.n	8006eec <_svfiprintf_r+0x174>
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	065b      	lsls	r3, r3, #25
 8006f42:	f53f af2d 	bmi.w	8006da0 <_svfiprintf_r+0x28>
 8006f46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f48:	e72c      	b.n	8006da4 <_svfiprintf_r+0x2c>
 8006f4a:	ab03      	add	r3, sp, #12
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	462a      	mov	r2, r5
 8006f50:	4b05      	ldr	r3, [pc, #20]	@ (8006f68 <_svfiprintf_r+0x1f0>)
 8006f52:	a904      	add	r1, sp, #16
 8006f54:	4638      	mov	r0, r7
 8006f56:	f000 f879 	bl	800704c <_printf_i>
 8006f5a:	e7ed      	b.n	8006f38 <_svfiprintf_r+0x1c0>
 8006f5c:	080083f5 	.word	0x080083f5
 8006f60:	080083ff 	.word	0x080083ff
 8006f64:	00000000 	.word	0x00000000
 8006f68:	08006cc1 	.word	0x08006cc1
 8006f6c:	080083fb 	.word	0x080083fb

08006f70 <_printf_common>:
 8006f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f74:	4616      	mov	r6, r2
 8006f76:	4698      	mov	r8, r3
 8006f78:	688a      	ldr	r2, [r1, #8]
 8006f7a:	690b      	ldr	r3, [r1, #16]
 8006f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f80:	4293      	cmp	r3, r2
 8006f82:	bfb8      	it	lt
 8006f84:	4613      	movlt	r3, r2
 8006f86:	6033      	str	r3, [r6, #0]
 8006f88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	b10a      	cbz	r2, 8006f96 <_printf_common+0x26>
 8006f92:	3301      	adds	r3, #1
 8006f94:	6033      	str	r3, [r6, #0]
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	0699      	lsls	r1, r3, #26
 8006f9a:	bf42      	ittt	mi
 8006f9c:	6833      	ldrmi	r3, [r6, #0]
 8006f9e:	3302      	addmi	r3, #2
 8006fa0:	6033      	strmi	r3, [r6, #0]
 8006fa2:	6825      	ldr	r5, [r4, #0]
 8006fa4:	f015 0506 	ands.w	r5, r5, #6
 8006fa8:	d106      	bne.n	8006fb8 <_printf_common+0x48>
 8006faa:	f104 0a19 	add.w	sl, r4, #25
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	6832      	ldr	r2, [r6, #0]
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	dc26      	bgt.n	8007006 <_printf_common+0x96>
 8006fb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fbc:	6822      	ldr	r2, [r4, #0]
 8006fbe:	3b00      	subs	r3, #0
 8006fc0:	bf18      	it	ne
 8006fc2:	2301      	movne	r3, #1
 8006fc4:	0692      	lsls	r2, r2, #26
 8006fc6:	d42b      	bmi.n	8007020 <_printf_common+0xb0>
 8006fc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fcc:	4641      	mov	r1, r8
 8006fce:	4638      	mov	r0, r7
 8006fd0:	47c8      	blx	r9
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	d01e      	beq.n	8007014 <_printf_common+0xa4>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	6922      	ldr	r2, [r4, #16]
 8006fda:	f003 0306 	and.w	r3, r3, #6
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	bf02      	ittt	eq
 8006fe2:	68e5      	ldreq	r5, [r4, #12]
 8006fe4:	6833      	ldreq	r3, [r6, #0]
 8006fe6:	1aed      	subeq	r5, r5, r3
 8006fe8:	68a3      	ldr	r3, [r4, #8]
 8006fea:	bf0c      	ite	eq
 8006fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ff0:	2500      	movne	r5, #0
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	bfc4      	itt	gt
 8006ff6:	1a9b      	subgt	r3, r3, r2
 8006ff8:	18ed      	addgt	r5, r5, r3
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	341a      	adds	r4, #26
 8006ffe:	42b5      	cmp	r5, r6
 8007000:	d11a      	bne.n	8007038 <_printf_common+0xc8>
 8007002:	2000      	movs	r0, #0
 8007004:	e008      	b.n	8007018 <_printf_common+0xa8>
 8007006:	2301      	movs	r3, #1
 8007008:	4652      	mov	r2, sl
 800700a:	4641      	mov	r1, r8
 800700c:	4638      	mov	r0, r7
 800700e:	47c8      	blx	r9
 8007010:	3001      	adds	r0, #1
 8007012:	d103      	bne.n	800701c <_printf_common+0xac>
 8007014:	f04f 30ff 	mov.w	r0, #4294967295
 8007018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701c:	3501      	adds	r5, #1
 800701e:	e7c6      	b.n	8006fae <_printf_common+0x3e>
 8007020:	18e1      	adds	r1, r4, r3
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	2030      	movs	r0, #48	@ 0x30
 8007026:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800702a:	4422      	add	r2, r4
 800702c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007030:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007034:	3302      	adds	r3, #2
 8007036:	e7c7      	b.n	8006fc8 <_printf_common+0x58>
 8007038:	2301      	movs	r3, #1
 800703a:	4622      	mov	r2, r4
 800703c:	4641      	mov	r1, r8
 800703e:	4638      	mov	r0, r7
 8007040:	47c8      	blx	r9
 8007042:	3001      	adds	r0, #1
 8007044:	d0e6      	beq.n	8007014 <_printf_common+0xa4>
 8007046:	3601      	adds	r6, #1
 8007048:	e7d9      	b.n	8006ffe <_printf_common+0x8e>
	...

0800704c <_printf_i>:
 800704c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007050:	7e0f      	ldrb	r7, [r1, #24]
 8007052:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007054:	2f78      	cmp	r7, #120	@ 0x78
 8007056:	4691      	mov	r9, r2
 8007058:	4680      	mov	r8, r0
 800705a:	460c      	mov	r4, r1
 800705c:	469a      	mov	sl, r3
 800705e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007062:	d807      	bhi.n	8007074 <_printf_i+0x28>
 8007064:	2f62      	cmp	r7, #98	@ 0x62
 8007066:	d80a      	bhi.n	800707e <_printf_i+0x32>
 8007068:	2f00      	cmp	r7, #0
 800706a:	f000 80d2 	beq.w	8007212 <_printf_i+0x1c6>
 800706e:	2f58      	cmp	r7, #88	@ 0x58
 8007070:	f000 80b9 	beq.w	80071e6 <_printf_i+0x19a>
 8007074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007078:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800707c:	e03a      	b.n	80070f4 <_printf_i+0xa8>
 800707e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007082:	2b15      	cmp	r3, #21
 8007084:	d8f6      	bhi.n	8007074 <_printf_i+0x28>
 8007086:	a101      	add	r1, pc, #4	@ (adr r1, 800708c <_printf_i+0x40>)
 8007088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800708c:	080070e5 	.word	0x080070e5
 8007090:	080070f9 	.word	0x080070f9
 8007094:	08007075 	.word	0x08007075
 8007098:	08007075 	.word	0x08007075
 800709c:	08007075 	.word	0x08007075
 80070a0:	08007075 	.word	0x08007075
 80070a4:	080070f9 	.word	0x080070f9
 80070a8:	08007075 	.word	0x08007075
 80070ac:	08007075 	.word	0x08007075
 80070b0:	08007075 	.word	0x08007075
 80070b4:	08007075 	.word	0x08007075
 80070b8:	080071f9 	.word	0x080071f9
 80070bc:	08007123 	.word	0x08007123
 80070c0:	080071b3 	.word	0x080071b3
 80070c4:	08007075 	.word	0x08007075
 80070c8:	08007075 	.word	0x08007075
 80070cc:	0800721b 	.word	0x0800721b
 80070d0:	08007075 	.word	0x08007075
 80070d4:	08007123 	.word	0x08007123
 80070d8:	08007075 	.word	0x08007075
 80070dc:	08007075 	.word	0x08007075
 80070e0:	080071bb 	.word	0x080071bb
 80070e4:	6833      	ldr	r3, [r6, #0]
 80070e6:	1d1a      	adds	r2, r3, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6032      	str	r2, [r6, #0]
 80070ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070f4:	2301      	movs	r3, #1
 80070f6:	e09d      	b.n	8007234 <_printf_i+0x1e8>
 80070f8:	6833      	ldr	r3, [r6, #0]
 80070fa:	6820      	ldr	r0, [r4, #0]
 80070fc:	1d19      	adds	r1, r3, #4
 80070fe:	6031      	str	r1, [r6, #0]
 8007100:	0606      	lsls	r6, r0, #24
 8007102:	d501      	bpl.n	8007108 <_printf_i+0xbc>
 8007104:	681d      	ldr	r5, [r3, #0]
 8007106:	e003      	b.n	8007110 <_printf_i+0xc4>
 8007108:	0645      	lsls	r5, r0, #25
 800710a:	d5fb      	bpl.n	8007104 <_printf_i+0xb8>
 800710c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007110:	2d00      	cmp	r5, #0
 8007112:	da03      	bge.n	800711c <_printf_i+0xd0>
 8007114:	232d      	movs	r3, #45	@ 0x2d
 8007116:	426d      	negs	r5, r5
 8007118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800711c:	4859      	ldr	r0, [pc, #356]	@ (8007284 <_printf_i+0x238>)
 800711e:	230a      	movs	r3, #10
 8007120:	e011      	b.n	8007146 <_printf_i+0xfa>
 8007122:	6821      	ldr	r1, [r4, #0]
 8007124:	6833      	ldr	r3, [r6, #0]
 8007126:	0608      	lsls	r0, r1, #24
 8007128:	f853 5b04 	ldr.w	r5, [r3], #4
 800712c:	d402      	bmi.n	8007134 <_printf_i+0xe8>
 800712e:	0649      	lsls	r1, r1, #25
 8007130:	bf48      	it	mi
 8007132:	b2ad      	uxthmi	r5, r5
 8007134:	2f6f      	cmp	r7, #111	@ 0x6f
 8007136:	4853      	ldr	r0, [pc, #332]	@ (8007284 <_printf_i+0x238>)
 8007138:	6033      	str	r3, [r6, #0]
 800713a:	bf14      	ite	ne
 800713c:	230a      	movne	r3, #10
 800713e:	2308      	moveq	r3, #8
 8007140:	2100      	movs	r1, #0
 8007142:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007146:	6866      	ldr	r6, [r4, #4]
 8007148:	60a6      	str	r6, [r4, #8]
 800714a:	2e00      	cmp	r6, #0
 800714c:	bfa2      	ittt	ge
 800714e:	6821      	ldrge	r1, [r4, #0]
 8007150:	f021 0104 	bicge.w	r1, r1, #4
 8007154:	6021      	strge	r1, [r4, #0]
 8007156:	b90d      	cbnz	r5, 800715c <_printf_i+0x110>
 8007158:	2e00      	cmp	r6, #0
 800715a:	d04b      	beq.n	80071f4 <_printf_i+0x1a8>
 800715c:	4616      	mov	r6, r2
 800715e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007162:	fb03 5711 	mls	r7, r3, r1, r5
 8007166:	5dc7      	ldrb	r7, [r0, r7]
 8007168:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800716c:	462f      	mov	r7, r5
 800716e:	42bb      	cmp	r3, r7
 8007170:	460d      	mov	r5, r1
 8007172:	d9f4      	bls.n	800715e <_printf_i+0x112>
 8007174:	2b08      	cmp	r3, #8
 8007176:	d10b      	bne.n	8007190 <_printf_i+0x144>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	07df      	lsls	r7, r3, #31
 800717c:	d508      	bpl.n	8007190 <_printf_i+0x144>
 800717e:	6923      	ldr	r3, [r4, #16]
 8007180:	6861      	ldr	r1, [r4, #4]
 8007182:	4299      	cmp	r1, r3
 8007184:	bfde      	ittt	le
 8007186:	2330      	movle	r3, #48	@ 0x30
 8007188:	f806 3c01 	strble.w	r3, [r6, #-1]
 800718c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007190:	1b92      	subs	r2, r2, r6
 8007192:	6122      	str	r2, [r4, #16]
 8007194:	f8cd a000 	str.w	sl, [sp]
 8007198:	464b      	mov	r3, r9
 800719a:	aa03      	add	r2, sp, #12
 800719c:	4621      	mov	r1, r4
 800719e:	4640      	mov	r0, r8
 80071a0:	f7ff fee6 	bl	8006f70 <_printf_common>
 80071a4:	3001      	adds	r0, #1
 80071a6:	d14a      	bne.n	800723e <_printf_i+0x1f2>
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ac:	b004      	add	sp, #16
 80071ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	f043 0320 	orr.w	r3, r3, #32
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	4833      	ldr	r0, [pc, #204]	@ (8007288 <_printf_i+0x23c>)
 80071bc:	2778      	movs	r7, #120	@ 0x78
 80071be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	6831      	ldr	r1, [r6, #0]
 80071c6:	061f      	lsls	r7, r3, #24
 80071c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80071cc:	d402      	bmi.n	80071d4 <_printf_i+0x188>
 80071ce:	065f      	lsls	r7, r3, #25
 80071d0:	bf48      	it	mi
 80071d2:	b2ad      	uxthmi	r5, r5
 80071d4:	6031      	str	r1, [r6, #0]
 80071d6:	07d9      	lsls	r1, r3, #31
 80071d8:	bf44      	itt	mi
 80071da:	f043 0320 	orrmi.w	r3, r3, #32
 80071de:	6023      	strmi	r3, [r4, #0]
 80071e0:	b11d      	cbz	r5, 80071ea <_printf_i+0x19e>
 80071e2:	2310      	movs	r3, #16
 80071e4:	e7ac      	b.n	8007140 <_printf_i+0xf4>
 80071e6:	4827      	ldr	r0, [pc, #156]	@ (8007284 <_printf_i+0x238>)
 80071e8:	e7e9      	b.n	80071be <_printf_i+0x172>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	f023 0320 	bic.w	r3, r3, #32
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	e7f6      	b.n	80071e2 <_printf_i+0x196>
 80071f4:	4616      	mov	r6, r2
 80071f6:	e7bd      	b.n	8007174 <_printf_i+0x128>
 80071f8:	6833      	ldr	r3, [r6, #0]
 80071fa:	6825      	ldr	r5, [r4, #0]
 80071fc:	6961      	ldr	r1, [r4, #20]
 80071fe:	1d18      	adds	r0, r3, #4
 8007200:	6030      	str	r0, [r6, #0]
 8007202:	062e      	lsls	r6, r5, #24
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	d501      	bpl.n	800720c <_printf_i+0x1c0>
 8007208:	6019      	str	r1, [r3, #0]
 800720a:	e002      	b.n	8007212 <_printf_i+0x1c6>
 800720c:	0668      	lsls	r0, r5, #25
 800720e:	d5fb      	bpl.n	8007208 <_printf_i+0x1bc>
 8007210:	8019      	strh	r1, [r3, #0]
 8007212:	2300      	movs	r3, #0
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	4616      	mov	r6, r2
 8007218:	e7bc      	b.n	8007194 <_printf_i+0x148>
 800721a:	6833      	ldr	r3, [r6, #0]
 800721c:	1d1a      	adds	r2, r3, #4
 800721e:	6032      	str	r2, [r6, #0]
 8007220:	681e      	ldr	r6, [r3, #0]
 8007222:	6862      	ldr	r2, [r4, #4]
 8007224:	2100      	movs	r1, #0
 8007226:	4630      	mov	r0, r6
 8007228:	f7f8 ffea 	bl	8000200 <memchr>
 800722c:	b108      	cbz	r0, 8007232 <_printf_i+0x1e6>
 800722e:	1b80      	subs	r0, r0, r6
 8007230:	6060      	str	r0, [r4, #4]
 8007232:	6863      	ldr	r3, [r4, #4]
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	2300      	movs	r3, #0
 8007238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800723c:	e7aa      	b.n	8007194 <_printf_i+0x148>
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	4632      	mov	r2, r6
 8007242:	4649      	mov	r1, r9
 8007244:	4640      	mov	r0, r8
 8007246:	47d0      	blx	sl
 8007248:	3001      	adds	r0, #1
 800724a:	d0ad      	beq.n	80071a8 <_printf_i+0x15c>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	079b      	lsls	r3, r3, #30
 8007250:	d413      	bmi.n	800727a <_printf_i+0x22e>
 8007252:	68e0      	ldr	r0, [r4, #12]
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	4298      	cmp	r0, r3
 8007258:	bfb8      	it	lt
 800725a:	4618      	movlt	r0, r3
 800725c:	e7a6      	b.n	80071ac <_printf_i+0x160>
 800725e:	2301      	movs	r3, #1
 8007260:	4632      	mov	r2, r6
 8007262:	4649      	mov	r1, r9
 8007264:	4640      	mov	r0, r8
 8007266:	47d0      	blx	sl
 8007268:	3001      	adds	r0, #1
 800726a:	d09d      	beq.n	80071a8 <_printf_i+0x15c>
 800726c:	3501      	adds	r5, #1
 800726e:	68e3      	ldr	r3, [r4, #12]
 8007270:	9903      	ldr	r1, [sp, #12]
 8007272:	1a5b      	subs	r3, r3, r1
 8007274:	42ab      	cmp	r3, r5
 8007276:	dcf2      	bgt.n	800725e <_printf_i+0x212>
 8007278:	e7eb      	b.n	8007252 <_printf_i+0x206>
 800727a:	2500      	movs	r5, #0
 800727c:	f104 0619 	add.w	r6, r4, #25
 8007280:	e7f5      	b.n	800726e <_printf_i+0x222>
 8007282:	bf00      	nop
 8007284:	08008406 	.word	0x08008406
 8007288:	08008417 	.word	0x08008417

0800728c <__sflush_r>:
 800728c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007294:	0716      	lsls	r6, r2, #28
 8007296:	4605      	mov	r5, r0
 8007298:	460c      	mov	r4, r1
 800729a:	d454      	bmi.n	8007346 <__sflush_r+0xba>
 800729c:	684b      	ldr	r3, [r1, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	dc02      	bgt.n	80072a8 <__sflush_r+0x1c>
 80072a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dd48      	ble.n	800733a <__sflush_r+0xae>
 80072a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072aa:	2e00      	cmp	r6, #0
 80072ac:	d045      	beq.n	800733a <__sflush_r+0xae>
 80072ae:	2300      	movs	r3, #0
 80072b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072b4:	682f      	ldr	r7, [r5, #0]
 80072b6:	6a21      	ldr	r1, [r4, #32]
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	d030      	beq.n	800731e <__sflush_r+0x92>
 80072bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	0759      	lsls	r1, r3, #29
 80072c2:	d505      	bpl.n	80072d0 <__sflush_r+0x44>
 80072c4:	6863      	ldr	r3, [r4, #4]
 80072c6:	1ad2      	subs	r2, r2, r3
 80072c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072ca:	b10b      	cbz	r3, 80072d0 <__sflush_r+0x44>
 80072cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	2300      	movs	r3, #0
 80072d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072d4:	6a21      	ldr	r1, [r4, #32]
 80072d6:	4628      	mov	r0, r5
 80072d8:	47b0      	blx	r6
 80072da:	1c43      	adds	r3, r0, #1
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	d106      	bne.n	80072ee <__sflush_r+0x62>
 80072e0:	6829      	ldr	r1, [r5, #0]
 80072e2:	291d      	cmp	r1, #29
 80072e4:	d82b      	bhi.n	800733e <__sflush_r+0xb2>
 80072e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007390 <__sflush_r+0x104>)
 80072e8:	410a      	asrs	r2, r1
 80072ea:	07d6      	lsls	r6, r2, #31
 80072ec:	d427      	bmi.n	800733e <__sflush_r+0xb2>
 80072ee:	2200      	movs	r2, #0
 80072f0:	6062      	str	r2, [r4, #4]
 80072f2:	04d9      	lsls	r1, r3, #19
 80072f4:	6922      	ldr	r2, [r4, #16]
 80072f6:	6022      	str	r2, [r4, #0]
 80072f8:	d504      	bpl.n	8007304 <__sflush_r+0x78>
 80072fa:	1c42      	adds	r2, r0, #1
 80072fc:	d101      	bne.n	8007302 <__sflush_r+0x76>
 80072fe:	682b      	ldr	r3, [r5, #0]
 8007300:	b903      	cbnz	r3, 8007304 <__sflush_r+0x78>
 8007302:	6560      	str	r0, [r4, #84]	@ 0x54
 8007304:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007306:	602f      	str	r7, [r5, #0]
 8007308:	b1b9      	cbz	r1, 800733a <__sflush_r+0xae>
 800730a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800730e:	4299      	cmp	r1, r3
 8007310:	d002      	beq.n	8007318 <__sflush_r+0x8c>
 8007312:	4628      	mov	r0, r5
 8007314:	f7ff fbd4 	bl	8006ac0 <_free_r>
 8007318:	2300      	movs	r3, #0
 800731a:	6363      	str	r3, [r4, #52]	@ 0x34
 800731c:	e00d      	b.n	800733a <__sflush_r+0xae>
 800731e:	2301      	movs	r3, #1
 8007320:	4628      	mov	r0, r5
 8007322:	47b0      	blx	r6
 8007324:	4602      	mov	r2, r0
 8007326:	1c50      	adds	r0, r2, #1
 8007328:	d1c9      	bne.n	80072be <__sflush_r+0x32>
 800732a:	682b      	ldr	r3, [r5, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0c6      	beq.n	80072be <__sflush_r+0x32>
 8007330:	2b1d      	cmp	r3, #29
 8007332:	d001      	beq.n	8007338 <__sflush_r+0xac>
 8007334:	2b16      	cmp	r3, #22
 8007336:	d11e      	bne.n	8007376 <__sflush_r+0xea>
 8007338:	602f      	str	r7, [r5, #0]
 800733a:	2000      	movs	r0, #0
 800733c:	e022      	b.n	8007384 <__sflush_r+0xf8>
 800733e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007342:	b21b      	sxth	r3, r3
 8007344:	e01b      	b.n	800737e <__sflush_r+0xf2>
 8007346:	690f      	ldr	r7, [r1, #16]
 8007348:	2f00      	cmp	r7, #0
 800734a:	d0f6      	beq.n	800733a <__sflush_r+0xae>
 800734c:	0793      	lsls	r3, r2, #30
 800734e:	680e      	ldr	r6, [r1, #0]
 8007350:	bf08      	it	eq
 8007352:	694b      	ldreq	r3, [r1, #20]
 8007354:	600f      	str	r7, [r1, #0]
 8007356:	bf18      	it	ne
 8007358:	2300      	movne	r3, #0
 800735a:	eba6 0807 	sub.w	r8, r6, r7
 800735e:	608b      	str	r3, [r1, #8]
 8007360:	f1b8 0f00 	cmp.w	r8, #0
 8007364:	dde9      	ble.n	800733a <__sflush_r+0xae>
 8007366:	6a21      	ldr	r1, [r4, #32]
 8007368:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800736a:	4643      	mov	r3, r8
 800736c:	463a      	mov	r2, r7
 800736e:	4628      	mov	r0, r5
 8007370:	47b0      	blx	r6
 8007372:	2800      	cmp	r0, #0
 8007374:	dc08      	bgt.n	8007388 <__sflush_r+0xfc>
 8007376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800737a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800737e:	81a3      	strh	r3, [r4, #12]
 8007380:	f04f 30ff 	mov.w	r0, #4294967295
 8007384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007388:	4407      	add	r7, r0
 800738a:	eba8 0800 	sub.w	r8, r8, r0
 800738e:	e7e7      	b.n	8007360 <__sflush_r+0xd4>
 8007390:	dfbffffe 	.word	0xdfbffffe

08007394 <_fflush_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	690b      	ldr	r3, [r1, #16]
 8007398:	4605      	mov	r5, r0
 800739a:	460c      	mov	r4, r1
 800739c:	b913      	cbnz	r3, 80073a4 <_fflush_r+0x10>
 800739e:	2500      	movs	r5, #0
 80073a0:	4628      	mov	r0, r5
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	b118      	cbz	r0, 80073ae <_fflush_r+0x1a>
 80073a6:	6a03      	ldr	r3, [r0, #32]
 80073a8:	b90b      	cbnz	r3, 80073ae <_fflush_r+0x1a>
 80073aa:	f7ff f963 	bl	8006674 <__sinit>
 80073ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0f3      	beq.n	800739e <_fflush_r+0xa>
 80073b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073b8:	07d0      	lsls	r0, r2, #31
 80073ba:	d404      	bmi.n	80073c6 <_fflush_r+0x32>
 80073bc:	0599      	lsls	r1, r3, #22
 80073be:	d402      	bmi.n	80073c6 <_fflush_r+0x32>
 80073c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073c2:	f7ff fb46 	bl	8006a52 <__retarget_lock_acquire_recursive>
 80073c6:	4628      	mov	r0, r5
 80073c8:	4621      	mov	r1, r4
 80073ca:	f7ff ff5f 	bl	800728c <__sflush_r>
 80073ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073d0:	07da      	lsls	r2, r3, #31
 80073d2:	4605      	mov	r5, r0
 80073d4:	d4e4      	bmi.n	80073a0 <_fflush_r+0xc>
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	059b      	lsls	r3, r3, #22
 80073da:	d4e1      	bmi.n	80073a0 <_fflush_r+0xc>
 80073dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073de:	f7ff fb39 	bl	8006a54 <__retarget_lock_release_recursive>
 80073e2:	e7dd      	b.n	80073a0 <_fflush_r+0xc>

080073e4 <fiprintf>:
 80073e4:	b40e      	push	{r1, r2, r3}
 80073e6:	b503      	push	{r0, r1, lr}
 80073e8:	4601      	mov	r1, r0
 80073ea:	ab03      	add	r3, sp, #12
 80073ec:	4805      	ldr	r0, [pc, #20]	@ (8007404 <fiprintf+0x20>)
 80073ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f2:	6800      	ldr	r0, [r0, #0]
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	f000 f88f 	bl	8007518 <_vfiprintf_r>
 80073fa:	b002      	add	sp, #8
 80073fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007400:	b003      	add	sp, #12
 8007402:	4770      	bx	lr
 8007404:	20000024 	.word	0x20000024

08007408 <memmove>:
 8007408:	4288      	cmp	r0, r1
 800740a:	b510      	push	{r4, lr}
 800740c:	eb01 0402 	add.w	r4, r1, r2
 8007410:	d902      	bls.n	8007418 <memmove+0x10>
 8007412:	4284      	cmp	r4, r0
 8007414:	4623      	mov	r3, r4
 8007416:	d807      	bhi.n	8007428 <memmove+0x20>
 8007418:	1e43      	subs	r3, r0, #1
 800741a:	42a1      	cmp	r1, r4
 800741c:	d008      	beq.n	8007430 <memmove+0x28>
 800741e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007422:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007426:	e7f8      	b.n	800741a <memmove+0x12>
 8007428:	4402      	add	r2, r0
 800742a:	4601      	mov	r1, r0
 800742c:	428a      	cmp	r2, r1
 800742e:	d100      	bne.n	8007432 <memmove+0x2a>
 8007430:	bd10      	pop	{r4, pc}
 8007432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800743a:	e7f7      	b.n	800742c <memmove+0x24>

0800743c <_sbrk_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4d06      	ldr	r5, [pc, #24]	@ (8007458 <_sbrk_r+0x1c>)
 8007440:	2300      	movs	r3, #0
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	f7fa f996 	bl	8001778 <_sbrk>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_sbrk_r+0x1a>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_sbrk_r+0x1a>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	200171a4 	.word	0x200171a4

0800745c <abort>:
 800745c:	b508      	push	{r3, lr}
 800745e:	2006      	movs	r0, #6
 8007460:	f000 fa2e 	bl	80078c0 <raise>
 8007464:	2001      	movs	r0, #1
 8007466:	f7fa f90f 	bl	8001688 <_exit>

0800746a <_realloc_r>:
 800746a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800746e:	4680      	mov	r8, r0
 8007470:	4615      	mov	r5, r2
 8007472:	460c      	mov	r4, r1
 8007474:	b921      	cbnz	r1, 8007480 <_realloc_r+0x16>
 8007476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800747a:	4611      	mov	r1, r2
 800747c:	f7ff bb94 	b.w	8006ba8 <_malloc_r>
 8007480:	b92a      	cbnz	r2, 800748e <_realloc_r+0x24>
 8007482:	f7ff fb1d 	bl	8006ac0 <_free_r>
 8007486:	2400      	movs	r4, #0
 8007488:	4620      	mov	r0, r4
 800748a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800748e:	f000 fa33 	bl	80078f8 <_malloc_usable_size_r>
 8007492:	4285      	cmp	r5, r0
 8007494:	4606      	mov	r6, r0
 8007496:	d802      	bhi.n	800749e <_realloc_r+0x34>
 8007498:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800749c:	d8f4      	bhi.n	8007488 <_realloc_r+0x1e>
 800749e:	4629      	mov	r1, r5
 80074a0:	4640      	mov	r0, r8
 80074a2:	f7ff fb81 	bl	8006ba8 <_malloc_r>
 80074a6:	4607      	mov	r7, r0
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d0ec      	beq.n	8007486 <_realloc_r+0x1c>
 80074ac:	42b5      	cmp	r5, r6
 80074ae:	462a      	mov	r2, r5
 80074b0:	4621      	mov	r1, r4
 80074b2:	bf28      	it	cs
 80074b4:	4632      	movcs	r2, r6
 80074b6:	f7ff fad6 	bl	8006a66 <memcpy>
 80074ba:	4621      	mov	r1, r4
 80074bc:	4640      	mov	r0, r8
 80074be:	f7ff faff 	bl	8006ac0 <_free_r>
 80074c2:	463c      	mov	r4, r7
 80074c4:	e7e0      	b.n	8007488 <_realloc_r+0x1e>

080074c6 <__sfputc_r>:
 80074c6:	6893      	ldr	r3, [r2, #8]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	b410      	push	{r4}
 80074ce:	6093      	str	r3, [r2, #8]
 80074d0:	da08      	bge.n	80074e4 <__sfputc_r+0x1e>
 80074d2:	6994      	ldr	r4, [r2, #24]
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	db01      	blt.n	80074dc <__sfputc_r+0x16>
 80074d8:	290a      	cmp	r1, #10
 80074da:	d103      	bne.n	80074e4 <__sfputc_r+0x1e>
 80074dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074e0:	f000 b932 	b.w	8007748 <__swbuf_r>
 80074e4:	6813      	ldr	r3, [r2, #0]
 80074e6:	1c58      	adds	r0, r3, #1
 80074e8:	6010      	str	r0, [r2, #0]
 80074ea:	7019      	strb	r1, [r3, #0]
 80074ec:	4608      	mov	r0, r1
 80074ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <__sfputs_r>:
 80074f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f6:	4606      	mov	r6, r0
 80074f8:	460f      	mov	r7, r1
 80074fa:	4614      	mov	r4, r2
 80074fc:	18d5      	adds	r5, r2, r3
 80074fe:	42ac      	cmp	r4, r5
 8007500:	d101      	bne.n	8007506 <__sfputs_r+0x12>
 8007502:	2000      	movs	r0, #0
 8007504:	e007      	b.n	8007516 <__sfputs_r+0x22>
 8007506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800750a:	463a      	mov	r2, r7
 800750c:	4630      	mov	r0, r6
 800750e:	f7ff ffda 	bl	80074c6 <__sfputc_r>
 8007512:	1c43      	adds	r3, r0, #1
 8007514:	d1f3      	bne.n	80074fe <__sfputs_r+0xa>
 8007516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007518 <_vfiprintf_r>:
 8007518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751c:	460d      	mov	r5, r1
 800751e:	b09d      	sub	sp, #116	@ 0x74
 8007520:	4614      	mov	r4, r2
 8007522:	4698      	mov	r8, r3
 8007524:	4606      	mov	r6, r0
 8007526:	b118      	cbz	r0, 8007530 <_vfiprintf_r+0x18>
 8007528:	6a03      	ldr	r3, [r0, #32]
 800752a:	b90b      	cbnz	r3, 8007530 <_vfiprintf_r+0x18>
 800752c:	f7ff f8a2 	bl	8006674 <__sinit>
 8007530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007532:	07d9      	lsls	r1, r3, #31
 8007534:	d405      	bmi.n	8007542 <_vfiprintf_r+0x2a>
 8007536:	89ab      	ldrh	r3, [r5, #12]
 8007538:	059a      	lsls	r2, r3, #22
 800753a:	d402      	bmi.n	8007542 <_vfiprintf_r+0x2a>
 800753c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800753e:	f7ff fa88 	bl	8006a52 <__retarget_lock_acquire_recursive>
 8007542:	89ab      	ldrh	r3, [r5, #12]
 8007544:	071b      	lsls	r3, r3, #28
 8007546:	d501      	bpl.n	800754c <_vfiprintf_r+0x34>
 8007548:	692b      	ldr	r3, [r5, #16]
 800754a:	b99b      	cbnz	r3, 8007574 <_vfiprintf_r+0x5c>
 800754c:	4629      	mov	r1, r5
 800754e:	4630      	mov	r0, r6
 8007550:	f000 f938 	bl	80077c4 <__swsetup_r>
 8007554:	b170      	cbz	r0, 8007574 <_vfiprintf_r+0x5c>
 8007556:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007558:	07dc      	lsls	r4, r3, #31
 800755a:	d504      	bpl.n	8007566 <_vfiprintf_r+0x4e>
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	b01d      	add	sp, #116	@ 0x74
 8007562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007566:	89ab      	ldrh	r3, [r5, #12]
 8007568:	0598      	lsls	r0, r3, #22
 800756a:	d4f7      	bmi.n	800755c <_vfiprintf_r+0x44>
 800756c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800756e:	f7ff fa71 	bl	8006a54 <__retarget_lock_release_recursive>
 8007572:	e7f3      	b.n	800755c <_vfiprintf_r+0x44>
 8007574:	2300      	movs	r3, #0
 8007576:	9309      	str	r3, [sp, #36]	@ 0x24
 8007578:	2320      	movs	r3, #32
 800757a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800757e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007582:	2330      	movs	r3, #48	@ 0x30
 8007584:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007734 <_vfiprintf_r+0x21c>
 8007588:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800758c:	f04f 0901 	mov.w	r9, #1
 8007590:	4623      	mov	r3, r4
 8007592:	469a      	mov	sl, r3
 8007594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007598:	b10a      	cbz	r2, 800759e <_vfiprintf_r+0x86>
 800759a:	2a25      	cmp	r2, #37	@ 0x25
 800759c:	d1f9      	bne.n	8007592 <_vfiprintf_r+0x7a>
 800759e:	ebba 0b04 	subs.w	fp, sl, r4
 80075a2:	d00b      	beq.n	80075bc <_vfiprintf_r+0xa4>
 80075a4:	465b      	mov	r3, fp
 80075a6:	4622      	mov	r2, r4
 80075a8:	4629      	mov	r1, r5
 80075aa:	4630      	mov	r0, r6
 80075ac:	f7ff ffa2 	bl	80074f4 <__sfputs_r>
 80075b0:	3001      	adds	r0, #1
 80075b2:	f000 80a7 	beq.w	8007704 <_vfiprintf_r+0x1ec>
 80075b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075b8:	445a      	add	r2, fp
 80075ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80075bc:	f89a 3000 	ldrb.w	r3, [sl]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 809f 	beq.w	8007704 <_vfiprintf_r+0x1ec>
 80075c6:	2300      	movs	r3, #0
 80075c8:	f04f 32ff 	mov.w	r2, #4294967295
 80075cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075d0:	f10a 0a01 	add.w	sl, sl, #1
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	9307      	str	r3, [sp, #28]
 80075d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80075de:	4654      	mov	r4, sl
 80075e0:	2205      	movs	r2, #5
 80075e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e6:	4853      	ldr	r0, [pc, #332]	@ (8007734 <_vfiprintf_r+0x21c>)
 80075e8:	f7f8 fe0a 	bl	8000200 <memchr>
 80075ec:	9a04      	ldr	r2, [sp, #16]
 80075ee:	b9d8      	cbnz	r0, 8007628 <_vfiprintf_r+0x110>
 80075f0:	06d1      	lsls	r1, r2, #27
 80075f2:	bf44      	itt	mi
 80075f4:	2320      	movmi	r3, #32
 80075f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075fa:	0713      	lsls	r3, r2, #28
 80075fc:	bf44      	itt	mi
 80075fe:	232b      	movmi	r3, #43	@ 0x2b
 8007600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007604:	f89a 3000 	ldrb.w	r3, [sl]
 8007608:	2b2a      	cmp	r3, #42	@ 0x2a
 800760a:	d015      	beq.n	8007638 <_vfiprintf_r+0x120>
 800760c:	9a07      	ldr	r2, [sp, #28]
 800760e:	4654      	mov	r4, sl
 8007610:	2000      	movs	r0, #0
 8007612:	f04f 0c0a 	mov.w	ip, #10
 8007616:	4621      	mov	r1, r4
 8007618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800761c:	3b30      	subs	r3, #48	@ 0x30
 800761e:	2b09      	cmp	r3, #9
 8007620:	d94b      	bls.n	80076ba <_vfiprintf_r+0x1a2>
 8007622:	b1b0      	cbz	r0, 8007652 <_vfiprintf_r+0x13a>
 8007624:	9207      	str	r2, [sp, #28]
 8007626:	e014      	b.n	8007652 <_vfiprintf_r+0x13a>
 8007628:	eba0 0308 	sub.w	r3, r0, r8
 800762c:	fa09 f303 	lsl.w	r3, r9, r3
 8007630:	4313      	orrs	r3, r2
 8007632:	9304      	str	r3, [sp, #16]
 8007634:	46a2      	mov	sl, r4
 8007636:	e7d2      	b.n	80075de <_vfiprintf_r+0xc6>
 8007638:	9b03      	ldr	r3, [sp, #12]
 800763a:	1d19      	adds	r1, r3, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	9103      	str	r1, [sp, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	bfbb      	ittet	lt
 8007644:	425b      	neglt	r3, r3
 8007646:	f042 0202 	orrlt.w	r2, r2, #2
 800764a:	9307      	strge	r3, [sp, #28]
 800764c:	9307      	strlt	r3, [sp, #28]
 800764e:	bfb8      	it	lt
 8007650:	9204      	strlt	r2, [sp, #16]
 8007652:	7823      	ldrb	r3, [r4, #0]
 8007654:	2b2e      	cmp	r3, #46	@ 0x2e
 8007656:	d10a      	bne.n	800766e <_vfiprintf_r+0x156>
 8007658:	7863      	ldrb	r3, [r4, #1]
 800765a:	2b2a      	cmp	r3, #42	@ 0x2a
 800765c:	d132      	bne.n	80076c4 <_vfiprintf_r+0x1ac>
 800765e:	9b03      	ldr	r3, [sp, #12]
 8007660:	1d1a      	adds	r2, r3, #4
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	9203      	str	r2, [sp, #12]
 8007666:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800766a:	3402      	adds	r4, #2
 800766c:	9305      	str	r3, [sp, #20]
 800766e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007744 <_vfiprintf_r+0x22c>
 8007672:	7821      	ldrb	r1, [r4, #0]
 8007674:	2203      	movs	r2, #3
 8007676:	4650      	mov	r0, sl
 8007678:	f7f8 fdc2 	bl	8000200 <memchr>
 800767c:	b138      	cbz	r0, 800768e <_vfiprintf_r+0x176>
 800767e:	9b04      	ldr	r3, [sp, #16]
 8007680:	eba0 000a 	sub.w	r0, r0, sl
 8007684:	2240      	movs	r2, #64	@ 0x40
 8007686:	4082      	lsls	r2, r0
 8007688:	4313      	orrs	r3, r2
 800768a:	3401      	adds	r4, #1
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007692:	4829      	ldr	r0, [pc, #164]	@ (8007738 <_vfiprintf_r+0x220>)
 8007694:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007698:	2206      	movs	r2, #6
 800769a:	f7f8 fdb1 	bl	8000200 <memchr>
 800769e:	2800      	cmp	r0, #0
 80076a0:	d03f      	beq.n	8007722 <_vfiprintf_r+0x20a>
 80076a2:	4b26      	ldr	r3, [pc, #152]	@ (800773c <_vfiprintf_r+0x224>)
 80076a4:	bb1b      	cbnz	r3, 80076ee <_vfiprintf_r+0x1d6>
 80076a6:	9b03      	ldr	r3, [sp, #12]
 80076a8:	3307      	adds	r3, #7
 80076aa:	f023 0307 	bic.w	r3, r3, #7
 80076ae:	3308      	adds	r3, #8
 80076b0:	9303      	str	r3, [sp, #12]
 80076b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b4:	443b      	add	r3, r7
 80076b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076b8:	e76a      	b.n	8007590 <_vfiprintf_r+0x78>
 80076ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80076be:	460c      	mov	r4, r1
 80076c0:	2001      	movs	r0, #1
 80076c2:	e7a8      	b.n	8007616 <_vfiprintf_r+0xfe>
 80076c4:	2300      	movs	r3, #0
 80076c6:	3401      	adds	r4, #1
 80076c8:	9305      	str	r3, [sp, #20]
 80076ca:	4619      	mov	r1, r3
 80076cc:	f04f 0c0a 	mov.w	ip, #10
 80076d0:	4620      	mov	r0, r4
 80076d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076d6:	3a30      	subs	r2, #48	@ 0x30
 80076d8:	2a09      	cmp	r2, #9
 80076da:	d903      	bls.n	80076e4 <_vfiprintf_r+0x1cc>
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0c6      	beq.n	800766e <_vfiprintf_r+0x156>
 80076e0:	9105      	str	r1, [sp, #20]
 80076e2:	e7c4      	b.n	800766e <_vfiprintf_r+0x156>
 80076e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80076e8:	4604      	mov	r4, r0
 80076ea:	2301      	movs	r3, #1
 80076ec:	e7f0      	b.n	80076d0 <_vfiprintf_r+0x1b8>
 80076ee:	ab03      	add	r3, sp, #12
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	462a      	mov	r2, r5
 80076f4:	4b12      	ldr	r3, [pc, #72]	@ (8007740 <_vfiprintf_r+0x228>)
 80076f6:	a904      	add	r1, sp, #16
 80076f8:	4630      	mov	r0, r6
 80076fa:	f3af 8000 	nop.w
 80076fe:	4607      	mov	r7, r0
 8007700:	1c78      	adds	r0, r7, #1
 8007702:	d1d6      	bne.n	80076b2 <_vfiprintf_r+0x19a>
 8007704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007706:	07d9      	lsls	r1, r3, #31
 8007708:	d405      	bmi.n	8007716 <_vfiprintf_r+0x1fe>
 800770a:	89ab      	ldrh	r3, [r5, #12]
 800770c:	059a      	lsls	r2, r3, #22
 800770e:	d402      	bmi.n	8007716 <_vfiprintf_r+0x1fe>
 8007710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007712:	f7ff f99f 	bl	8006a54 <__retarget_lock_release_recursive>
 8007716:	89ab      	ldrh	r3, [r5, #12]
 8007718:	065b      	lsls	r3, r3, #25
 800771a:	f53f af1f 	bmi.w	800755c <_vfiprintf_r+0x44>
 800771e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007720:	e71e      	b.n	8007560 <_vfiprintf_r+0x48>
 8007722:	ab03      	add	r3, sp, #12
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	462a      	mov	r2, r5
 8007728:	4b05      	ldr	r3, [pc, #20]	@ (8007740 <_vfiprintf_r+0x228>)
 800772a:	a904      	add	r1, sp, #16
 800772c:	4630      	mov	r0, r6
 800772e:	f7ff fc8d 	bl	800704c <_printf_i>
 8007732:	e7e4      	b.n	80076fe <_vfiprintf_r+0x1e6>
 8007734:	080083f5 	.word	0x080083f5
 8007738:	080083ff 	.word	0x080083ff
 800773c:	00000000 	.word	0x00000000
 8007740:	080074f5 	.word	0x080074f5
 8007744:	080083fb 	.word	0x080083fb

08007748 <__swbuf_r>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	460e      	mov	r6, r1
 800774c:	4614      	mov	r4, r2
 800774e:	4605      	mov	r5, r0
 8007750:	b118      	cbz	r0, 800775a <__swbuf_r+0x12>
 8007752:	6a03      	ldr	r3, [r0, #32]
 8007754:	b90b      	cbnz	r3, 800775a <__swbuf_r+0x12>
 8007756:	f7fe ff8d 	bl	8006674 <__sinit>
 800775a:	69a3      	ldr	r3, [r4, #24]
 800775c:	60a3      	str	r3, [r4, #8]
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	071a      	lsls	r2, r3, #28
 8007762:	d501      	bpl.n	8007768 <__swbuf_r+0x20>
 8007764:	6923      	ldr	r3, [r4, #16]
 8007766:	b943      	cbnz	r3, 800777a <__swbuf_r+0x32>
 8007768:	4621      	mov	r1, r4
 800776a:	4628      	mov	r0, r5
 800776c:	f000 f82a 	bl	80077c4 <__swsetup_r>
 8007770:	b118      	cbz	r0, 800777a <__swbuf_r+0x32>
 8007772:	f04f 37ff 	mov.w	r7, #4294967295
 8007776:	4638      	mov	r0, r7
 8007778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	6922      	ldr	r2, [r4, #16]
 800777e:	1a98      	subs	r0, r3, r2
 8007780:	6963      	ldr	r3, [r4, #20]
 8007782:	b2f6      	uxtb	r6, r6
 8007784:	4283      	cmp	r3, r0
 8007786:	4637      	mov	r7, r6
 8007788:	dc05      	bgt.n	8007796 <__swbuf_r+0x4e>
 800778a:	4621      	mov	r1, r4
 800778c:	4628      	mov	r0, r5
 800778e:	f7ff fe01 	bl	8007394 <_fflush_r>
 8007792:	2800      	cmp	r0, #0
 8007794:	d1ed      	bne.n	8007772 <__swbuf_r+0x2a>
 8007796:	68a3      	ldr	r3, [r4, #8]
 8007798:	3b01      	subs	r3, #1
 800779a:	60a3      	str	r3, [r4, #8]
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	6022      	str	r2, [r4, #0]
 80077a2:	701e      	strb	r6, [r3, #0]
 80077a4:	6962      	ldr	r2, [r4, #20]
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d004      	beq.n	80077b6 <__swbuf_r+0x6e>
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	07db      	lsls	r3, r3, #31
 80077b0:	d5e1      	bpl.n	8007776 <__swbuf_r+0x2e>
 80077b2:	2e0a      	cmp	r6, #10
 80077b4:	d1df      	bne.n	8007776 <__swbuf_r+0x2e>
 80077b6:	4621      	mov	r1, r4
 80077b8:	4628      	mov	r0, r5
 80077ba:	f7ff fdeb 	bl	8007394 <_fflush_r>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d0d9      	beq.n	8007776 <__swbuf_r+0x2e>
 80077c2:	e7d6      	b.n	8007772 <__swbuf_r+0x2a>

080077c4 <__swsetup_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4b29      	ldr	r3, [pc, #164]	@ (800786c <__swsetup_r+0xa8>)
 80077c8:	4605      	mov	r5, r0
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	460c      	mov	r4, r1
 80077ce:	b118      	cbz	r0, 80077d8 <__swsetup_r+0x14>
 80077d0:	6a03      	ldr	r3, [r0, #32]
 80077d2:	b90b      	cbnz	r3, 80077d8 <__swsetup_r+0x14>
 80077d4:	f7fe ff4e 	bl	8006674 <__sinit>
 80077d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077dc:	0719      	lsls	r1, r3, #28
 80077de:	d422      	bmi.n	8007826 <__swsetup_r+0x62>
 80077e0:	06da      	lsls	r2, r3, #27
 80077e2:	d407      	bmi.n	80077f4 <__swsetup_r+0x30>
 80077e4:	2209      	movs	r2, #9
 80077e6:	602a      	str	r2, [r5, #0]
 80077e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	f04f 30ff 	mov.w	r0, #4294967295
 80077f2:	e033      	b.n	800785c <__swsetup_r+0x98>
 80077f4:	0758      	lsls	r0, r3, #29
 80077f6:	d512      	bpl.n	800781e <__swsetup_r+0x5a>
 80077f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077fa:	b141      	cbz	r1, 800780e <__swsetup_r+0x4a>
 80077fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007800:	4299      	cmp	r1, r3
 8007802:	d002      	beq.n	800780a <__swsetup_r+0x46>
 8007804:	4628      	mov	r0, r5
 8007806:	f7ff f95b 	bl	8006ac0 <_free_r>
 800780a:	2300      	movs	r3, #0
 800780c:	6363      	str	r3, [r4, #52]	@ 0x34
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007814:	81a3      	strh	r3, [r4, #12]
 8007816:	2300      	movs	r3, #0
 8007818:	6063      	str	r3, [r4, #4]
 800781a:	6923      	ldr	r3, [r4, #16]
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	f043 0308 	orr.w	r3, r3, #8
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	b94b      	cbnz	r3, 800783e <__swsetup_r+0x7a>
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007834:	d003      	beq.n	800783e <__swsetup_r+0x7a>
 8007836:	4621      	mov	r1, r4
 8007838:	4628      	mov	r0, r5
 800783a:	f000 f88b 	bl	8007954 <__smakebuf_r>
 800783e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007842:	f013 0201 	ands.w	r2, r3, #1
 8007846:	d00a      	beq.n	800785e <__swsetup_r+0x9a>
 8007848:	2200      	movs	r2, #0
 800784a:	60a2      	str	r2, [r4, #8]
 800784c:	6962      	ldr	r2, [r4, #20]
 800784e:	4252      	negs	r2, r2
 8007850:	61a2      	str	r2, [r4, #24]
 8007852:	6922      	ldr	r2, [r4, #16]
 8007854:	b942      	cbnz	r2, 8007868 <__swsetup_r+0xa4>
 8007856:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800785a:	d1c5      	bne.n	80077e8 <__swsetup_r+0x24>
 800785c:	bd38      	pop	{r3, r4, r5, pc}
 800785e:	0799      	lsls	r1, r3, #30
 8007860:	bf58      	it	pl
 8007862:	6962      	ldrpl	r2, [r4, #20]
 8007864:	60a2      	str	r2, [r4, #8]
 8007866:	e7f4      	b.n	8007852 <__swsetup_r+0x8e>
 8007868:	2000      	movs	r0, #0
 800786a:	e7f7      	b.n	800785c <__swsetup_r+0x98>
 800786c:	20000024 	.word	0x20000024

08007870 <_raise_r>:
 8007870:	291f      	cmp	r1, #31
 8007872:	b538      	push	{r3, r4, r5, lr}
 8007874:	4605      	mov	r5, r0
 8007876:	460c      	mov	r4, r1
 8007878:	d904      	bls.n	8007884 <_raise_r+0x14>
 800787a:	2316      	movs	r3, #22
 800787c:	6003      	str	r3, [r0, #0]
 800787e:	f04f 30ff 	mov.w	r0, #4294967295
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007886:	b112      	cbz	r2, 800788e <_raise_r+0x1e>
 8007888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800788c:	b94b      	cbnz	r3, 80078a2 <_raise_r+0x32>
 800788e:	4628      	mov	r0, r5
 8007890:	f000 f830 	bl	80078f4 <_getpid_r>
 8007894:	4622      	mov	r2, r4
 8007896:	4601      	mov	r1, r0
 8007898:	4628      	mov	r0, r5
 800789a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800789e:	f000 b817 	b.w	80078d0 <_kill_r>
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d00a      	beq.n	80078bc <_raise_r+0x4c>
 80078a6:	1c59      	adds	r1, r3, #1
 80078a8:	d103      	bne.n	80078b2 <_raise_r+0x42>
 80078aa:	2316      	movs	r3, #22
 80078ac:	6003      	str	r3, [r0, #0]
 80078ae:	2001      	movs	r0, #1
 80078b0:	e7e7      	b.n	8007882 <_raise_r+0x12>
 80078b2:	2100      	movs	r1, #0
 80078b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80078b8:	4620      	mov	r0, r4
 80078ba:	4798      	blx	r3
 80078bc:	2000      	movs	r0, #0
 80078be:	e7e0      	b.n	8007882 <_raise_r+0x12>

080078c0 <raise>:
 80078c0:	4b02      	ldr	r3, [pc, #8]	@ (80078cc <raise+0xc>)
 80078c2:	4601      	mov	r1, r0
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	f7ff bfd3 	b.w	8007870 <_raise_r>
 80078ca:	bf00      	nop
 80078cc:	20000024 	.word	0x20000024

080078d0 <_kill_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d07      	ldr	r5, [pc, #28]	@ (80078f0 <_kill_r+0x20>)
 80078d4:	2300      	movs	r3, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	4611      	mov	r1, r2
 80078dc:	602b      	str	r3, [r5, #0]
 80078de:	f7f9 fec3 	bl	8001668 <_kill>
 80078e2:	1c43      	adds	r3, r0, #1
 80078e4:	d102      	bne.n	80078ec <_kill_r+0x1c>
 80078e6:	682b      	ldr	r3, [r5, #0]
 80078e8:	b103      	cbz	r3, 80078ec <_kill_r+0x1c>
 80078ea:	6023      	str	r3, [r4, #0]
 80078ec:	bd38      	pop	{r3, r4, r5, pc}
 80078ee:	bf00      	nop
 80078f0:	200171a4 	.word	0x200171a4

080078f4 <_getpid_r>:
 80078f4:	f7f9 beb0 	b.w	8001658 <_getpid>

080078f8 <_malloc_usable_size_r>:
 80078f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078fc:	1f18      	subs	r0, r3, #4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	bfbc      	itt	lt
 8007902:	580b      	ldrlt	r3, [r1, r0]
 8007904:	18c0      	addlt	r0, r0, r3
 8007906:	4770      	bx	lr

08007908 <__swhatbuf_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	460c      	mov	r4, r1
 800790c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007910:	2900      	cmp	r1, #0
 8007912:	b096      	sub	sp, #88	@ 0x58
 8007914:	4615      	mov	r5, r2
 8007916:	461e      	mov	r6, r3
 8007918:	da0d      	bge.n	8007936 <__swhatbuf_r+0x2e>
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007920:	f04f 0100 	mov.w	r1, #0
 8007924:	bf14      	ite	ne
 8007926:	2340      	movne	r3, #64	@ 0x40
 8007928:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800792c:	2000      	movs	r0, #0
 800792e:	6031      	str	r1, [r6, #0]
 8007930:	602b      	str	r3, [r5, #0]
 8007932:	b016      	add	sp, #88	@ 0x58
 8007934:	bd70      	pop	{r4, r5, r6, pc}
 8007936:	466a      	mov	r2, sp
 8007938:	f000 f848 	bl	80079cc <_fstat_r>
 800793c:	2800      	cmp	r0, #0
 800793e:	dbec      	blt.n	800791a <__swhatbuf_r+0x12>
 8007940:	9901      	ldr	r1, [sp, #4]
 8007942:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007946:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800794a:	4259      	negs	r1, r3
 800794c:	4159      	adcs	r1, r3
 800794e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007952:	e7eb      	b.n	800792c <__swhatbuf_r+0x24>

08007954 <__smakebuf_r>:
 8007954:	898b      	ldrh	r3, [r1, #12]
 8007956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007958:	079d      	lsls	r5, r3, #30
 800795a:	4606      	mov	r6, r0
 800795c:	460c      	mov	r4, r1
 800795e:	d507      	bpl.n	8007970 <__smakebuf_r+0x1c>
 8007960:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	6123      	str	r3, [r4, #16]
 8007968:	2301      	movs	r3, #1
 800796a:	6163      	str	r3, [r4, #20]
 800796c:	b003      	add	sp, #12
 800796e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007970:	ab01      	add	r3, sp, #4
 8007972:	466a      	mov	r2, sp
 8007974:	f7ff ffc8 	bl	8007908 <__swhatbuf_r>
 8007978:	9f00      	ldr	r7, [sp, #0]
 800797a:	4605      	mov	r5, r0
 800797c:	4639      	mov	r1, r7
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff f912 	bl	8006ba8 <_malloc_r>
 8007984:	b948      	cbnz	r0, 800799a <__smakebuf_r+0x46>
 8007986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800798a:	059a      	lsls	r2, r3, #22
 800798c:	d4ee      	bmi.n	800796c <__smakebuf_r+0x18>
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	f043 0302 	orr.w	r3, r3, #2
 8007996:	81a3      	strh	r3, [r4, #12]
 8007998:	e7e2      	b.n	8007960 <__smakebuf_r+0xc>
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	6020      	str	r0, [r4, #0]
 800799e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a2:	81a3      	strh	r3, [r4, #12]
 80079a4:	9b01      	ldr	r3, [sp, #4]
 80079a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079aa:	b15b      	cbz	r3, 80079c4 <__smakebuf_r+0x70>
 80079ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b0:	4630      	mov	r0, r6
 80079b2:	f000 f81d 	bl	80079f0 <_isatty_r>
 80079b6:	b128      	cbz	r0, 80079c4 <__smakebuf_r+0x70>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f023 0303 	bic.w	r3, r3, #3
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	431d      	orrs	r5, r3
 80079c8:	81a5      	strh	r5, [r4, #12]
 80079ca:	e7cf      	b.n	800796c <__smakebuf_r+0x18>

080079cc <_fstat_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4d07      	ldr	r5, [pc, #28]	@ (80079ec <_fstat_r+0x20>)
 80079d0:	2300      	movs	r3, #0
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	4611      	mov	r1, r2
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	f7f9 fea5 	bl	8001728 <_fstat>
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	d102      	bne.n	80079e8 <_fstat_r+0x1c>
 80079e2:	682b      	ldr	r3, [r5, #0]
 80079e4:	b103      	cbz	r3, 80079e8 <_fstat_r+0x1c>
 80079e6:	6023      	str	r3, [r4, #0]
 80079e8:	bd38      	pop	{r3, r4, r5, pc}
 80079ea:	bf00      	nop
 80079ec:	200171a4 	.word	0x200171a4

080079f0 <_isatty_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4d06      	ldr	r5, [pc, #24]	@ (8007a0c <_isatty_r+0x1c>)
 80079f4:	2300      	movs	r3, #0
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	602b      	str	r3, [r5, #0]
 80079fc:	f7f9 fea4 	bl	8001748 <_isatty>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <_isatty_r+0x1a>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	b103      	cbz	r3, 8007a0a <_isatty_r+0x1a>
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	200171a4 	.word	0x200171a4

08007a10 <_init>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	bf00      	nop
 8007a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a16:	bc08      	pop	{r3}
 8007a18:	469e      	mov	lr, r3
 8007a1a:	4770      	bx	lr

08007a1c <_fini>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	bf00      	nop
 8007a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a22:	bc08      	pop	{r3}
 8007a24:	469e      	mov	lr, r3
 8007a26:	4770      	bx	lr
