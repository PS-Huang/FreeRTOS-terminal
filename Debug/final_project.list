
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bfc  08007f08  08007f08  00008f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b04  08008b04  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  08008b04  08008b04  00009b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b0c  08008b0c  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b0c  08008b0c  00009b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b10  08008b10  00009b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008b14  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a074  2**0
                  CONTENTS
 10 .bss          0001764c  20000074  20000074  0000a074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200176c0  200176c0  0000a074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135c9  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000310b  00000000  00000000  0001d66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00020778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e39  00000000  00000000  000219b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002392d  00000000  00000000  000227f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150f2  00000000  00000000  0004611e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5202  00000000  00000000  0005b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130412  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000586c  00000000  00000000  00130458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00135cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ef0 	.word	0x08007ef0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007ef0 	.word	0x08007ef0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <AppTimerStatsInit>:
//	const char* msg = "UART Initialized\r\n";
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//}
// UART TEST END

void AppTimerStatsInit(void) {
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	g_osRuntimeCounter = 0;
 8000594:	4b03      	ldr	r3, [pc, #12]	@ (80005a4 <AppTimerStatsInit+0x14>)
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	200000d8 	.word	0x200000d8

080005a8 <AppTimerStatsValue>:

uint32_t AppTimerStatsValue(void) {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	 return g_osRuntimeCounter;
 80005ac:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <AppTimerStatsValue+0x14>)
 80005ae:	681b      	ldr	r3, [r3, #0]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000d8 	.word	0x200000d8

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f001 fbb7 	bl	8001d38 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f845 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f8d7 	bl	8000780 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 f8ab 	bl	800072c <MX_USART2_UART_Init>
//  if (xTaskCreate(LED_Task, "LED", 128, NULL, 3, &hLed) == pdPASS){
//      RegisterUserTask(hLed, "LED", 128);
//  }

  TaskHandle_t hShell;
  if(xTaskCreate(ShellTask, "ShellTask", 4096, NULL, 2, &hShell) == pdPASS){
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005e4:	4917      	ldr	r1, [pc, #92]	@ (8000644 <main+0x84>)
 80005e6:	4818      	ldr	r0, [pc, #96]	@ (8000648 <main+0x88>)
 80005e8:	f003 fff4 	bl	80045d4 <xTaskCreate>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d106      	bne.n	8000600 <main+0x40>
	  RegisterUserTask(hShell, "ShellTask", 4096);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005f8:	4912      	ldr	r1, [pc, #72]	@ (8000644 <main+0x84>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fae0 	bl	8000bc0 <RegisterUserTask>
  }

  xLogQueue = xQueueCreate(16, sizeof(LogMsg_t));
 8000600:	2200      	movs	r2, #0
 8000602:	2180      	movs	r1, #128	@ 0x80
 8000604:	2010      	movs	r0, #16
 8000606:	f003 fb97 	bl	8003d38 <xQueueGenericCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <main+0x8c>)
 800060e:	6013      	str	r3, [r2, #0]

  TaskHandle_t hLogger;
  if(xTaskCreate(LoggerTask, "Logger", 256, NULL, 2, &hLogger) == pdPASS){
 8000610:	463b      	mov	r3, r7
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2302      	movs	r3, #2
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800061e:	490c      	ldr	r1, [pc, #48]	@ (8000650 <main+0x90>)
 8000620:	480c      	ldr	r0, [pc, #48]	@ (8000654 <main+0x94>)
 8000622:	f003 ffd7 	bl	80045d4 <xTaskCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	d106      	bne.n	800063a <main+0x7a>
	  RegisterUserTask(hLogger, "Logger", 256);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000632:	4907      	ldr	r1, [pc, #28]	@ (8000650 <main+0x90>)
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fac3 	bl	8000bc0 <RegisterUserTask>
  }


  vTaskStartScheduler();
 800063a:	f004 f9ab 	bl	8004994 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	bf00      	nop
 8000640:	e7fd      	b.n	800063e <main+0x7e>
 8000642:	bf00      	nop
 8000644:	08007f3c 	.word	0x08007f3c
 8000648:	08001389 	.word	0x08001389
 800064c:	20000260 	.word	0x20000260
 8000650:	08007f48 	.word	0x08007f48
 8000654:	08000b49 	.word	0x08000b49

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	@ 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f006 fb7a 	bl	8006d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	@ (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006cc:	2332      	movs	r3, #50	@ 0x32
 80006ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d4:	2307      	movs	r3, #7
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fe05 	bl	80022ec <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 f9c6 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f866 	bl	80027dc <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000716:	f000 f9af 	bl	8000a78 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	@ 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_USART2_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000764:	f002 fd28 	bl	80031b8 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f983 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000090 	.word	0x20000090
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	@ 0x30
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	4ba2      	ldr	r3, [pc, #648]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4aa1      	ldr	r2, [pc, #644]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b9f      	ldr	r3, [pc, #636]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0310 	and.w	r3, r3, #16
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	4b9b      	ldr	r3, [pc, #620]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a9a      	ldr	r2, [pc, #616]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b98      	ldr	r3, [pc, #608]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b94      	ldr	r3, [pc, #592]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a93      	ldr	r2, [pc, #588]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b91      	ldr	r3, [pc, #580]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b8d      	ldr	r3, [pc, #564]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a8c      	ldr	r2, [pc, #560]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b8a      	ldr	r3, [pc, #552]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b86      	ldr	r3, [pc, #536]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a85      	ldr	r2, [pc, #532]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b83      	ldr	r3, [pc, #524]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b7f      	ldr	r3, [pc, #508]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a7e      	ldr	r2, [pc, #504]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b7c      	ldr	r3, [pc, #496]	@ (8000a24 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2108      	movs	r1, #8
 8000842:	4879      	ldr	r0, [pc, #484]	@ (8000a28 <MX_GPIO_Init+0x2a8>)
 8000844:	f001 fd38 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2101      	movs	r1, #1
 800084c:	4877      	ldr	r0, [pc, #476]	@ (8000a2c <MX_GPIO_Init+0x2ac>)
 800084e:	f001 fd33 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000852:	2200      	movs	r2, #0
 8000854:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000858:	4875      	ldr	r0, [pc, #468]	@ (8000a30 <MX_GPIO_Init+0x2b0>)
 800085a:	f001 fd2d 	bl	80022b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800085e:	2308      	movs	r3, #8
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	486c      	ldr	r0, [pc, #432]	@ (8000a28 <MX_GPIO_Init+0x2a8>)
 8000876:	f001 fb83 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800087a:	2301      	movs	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4866      	ldr	r0, [pc, #408]	@ (8000a2c <MX_GPIO_Init+0x2ac>)
 8000892:	f001 fb75 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000896:	2308      	movs	r3, #8
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	485e      	ldr	r0, [pc, #376]	@ (8000a2c <MX_GPIO_Init+0x2ac>)
 80008b2:	f001 fb65 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	485a      	ldr	r0, [pc, #360]	@ (8000a34 <MX_GPIO_Init+0x2b4>)
 80008cc:	f001 fb58 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008d0:	2310      	movs	r3, #16
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e0:	2306      	movs	r3, #6
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4852      	ldr	r0, [pc, #328]	@ (8000a34 <MX_GPIO_Init+0x2b4>)
 80008ec:	f001 fb48 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008f0:	23e0      	movs	r3, #224	@ 0xe0
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000900:	2305      	movs	r3, #5
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	484a      	ldr	r0, [pc, #296]	@ (8000a34 <MX_GPIO_Init+0x2b4>)
 800090c:	f001 fb38 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000910:	2304      	movs	r3, #4
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4845      	ldr	r0, [pc, #276]	@ (8000a38 <MX_GPIO_Init+0x2b8>)
 8000924:	f001 fb2c 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093a:	2305      	movs	r3, #5
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	483c      	ldr	r0, [pc, #240]	@ (8000a38 <MX_GPIO_Init+0x2b8>)
 8000946:	f001 fb1b 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800094e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4833      	ldr	r0, [pc, #204]	@ (8000a30 <MX_GPIO_Init+0x2b0>)
 8000964:	f001 fb0c 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000968:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800097a:	2306      	movs	r3, #6
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4829      	ldr	r0, [pc, #164]	@ (8000a2c <MX_GPIO_Init+0x2ac>)
 8000986:	f001 fafb 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800098a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4825      	ldr	r0, [pc, #148]	@ (8000a34 <MX_GPIO_Init+0x2b4>)
 80009a0:	f001 faee 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009a4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009b6:	230a      	movs	r3, #10
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	481c      	ldr	r0, [pc, #112]	@ (8000a34 <MX_GPIO_Init+0x2b4>)
 80009c2:	f001 fadd 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009c6:	2320      	movs	r3, #32
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4815      	ldr	r0, [pc, #84]	@ (8000a30 <MX_GPIO_Init+0x2b0>)
 80009da:	f001 fad1 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009de:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e4:	2312      	movs	r3, #18
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f0:	2304      	movs	r3, #4
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	480f      	ldr	r0, [pc, #60]	@ (8000a38 <MX_GPIO_Init+0x2b8>)
 80009fc:	f001 fac0 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a04:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_GPIO_Init+0x2a8>)
 8000a16:	f001 fab3 	bl	8001f80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	@ 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020400 	.word	0x40020400

08000a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a09      	ldr	r2, [pc, #36]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4e:	f001 f995 	bl	8001d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a06      	ldr	r2, [pc, #24]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d104      	bne.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x2a>
	g_osRuntimeCounter++;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a64:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40001400 	.word	0x40001400
 8000a74:	200000d8 	.word	0x200000d8

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <Error_Handler+0x8>

08000a84 <shell_write>:
};

#define CMD_COUNT (sizeof(cli_commands)/sizeof(cli_commands[0]))

// 將吃到的字元返還
static void shell_write(const char* s) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0a2      	sub	sp, #136	@ 0x88
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), HAL_MAX_DELAY);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fba9 	bl	80001e4 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	4810      	ldr	r0, [pc, #64]	@ (8000ae0 <shell_write+0x5c>)
 8000a9e:	f002 fbdb 	bl	8003258 <HAL_UART_Transmit>

    if (g_logEnabled && xLogQueue) {
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <shell_write+0x60>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d015      	beq.n	8000ad6 <shell_write+0x52>
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <shell_write+0x64>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d011      	beq.n	8000ad6 <shell_write+0x52>
		LogMsg_t m;
		strncpy(m.text, s, LOG_LINE_MAX - 1);
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	225f      	movs	r2, #95	@ 0x5f
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f006 f958 	bl	8006d70 <strncpy>
		m.text[LOG_LINE_MAX-1] = '\0';
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		xQueueSend(xLogQueue, &m, 0);
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <shell_write+0x64>)
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	f107 0108 	add.w	r1, r7, #8
 8000ace:	2300      	movs	r3, #0
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f003 f991 	bl	8003df8 <xQueueGenericSend>
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	3788      	adds	r7, #136	@ 0x88
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000090 	.word	0x20000090
 8000ae4:	20004268 	.word	0x20004268
 8000ae8:	20000260 	.word	0x20000260

08000aec <log_printf>:

void log_printf(const char *fmt, ...)
{
 8000aec:	b40f      	push	{r0, r1, r2, r3}
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b0a2      	sub	sp, #136	@ 0x88
 8000af2:	af00      	add	r7, sp, #0
    if (!g_logEnabled || !xLogQueue) return;
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <log_printf+0x54>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	f083 0301 	eor.w	r3, r3, #1
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d117      	bne.n	8000b32 <log_printf+0x46>
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <log_printf+0x58>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d013      	beq.n	8000b32 <log_printf+0x46>
    LogMsg_t m;
    va_list ap;
    va_start(ap, fmt);
 8000b0a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b0e:	607b      	str	r3, [r7, #4]
    vsnprintf(m.text, LOG_LINE_MAX, fmt, ap);
 8000b10:	f107 0008 	add.w	r0, r7, #8
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000b1a:	2160      	movs	r1, #96	@ 0x60
 8000b1c:	f006 f912 	bl	8006d44 <vsniprintf>
    va_end(ap);
    xQueueSend(xLogQueue, &m, 0);
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <log_printf+0x58>)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	f107 0108 	add.w	r1, r7, #8
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f003 f964 	bl	8003df8 <xQueueGenericSend>
 8000b30:	e000      	b.n	8000b34 <log_printf+0x48>
    if (!g_logEnabled || !xLogQueue) return;
 8000b32:	bf00      	nop
}
 8000b34:	3788      	adds	r7, #136	@ 0x88
 8000b36:	46bd      	mov	sp, r7
 8000b38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr
 8000b40:	20004268 	.word	0x20004268
 8000b44:	20000260 	.word	0x20000260

08000b48 <LoggerTask>:

void LoggerTask(void *param)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0a2      	sub	sp, #136	@ 0x88
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    LogMsg_t m;
    for (;;) {
        if (xQueueReceive(xLogQueue, &m, portMAX_DELAY) == pdPASS) {
 8000b50:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <LoggerTask+0x68>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f107 0108 	add.w	r1, r7, #8
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fae9 	bl	8004134 <xQueueReceive>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d1f3      	bne.n	8000b50 <LoggerTask+0x8>
            // 寫進環形緩衝區
            memcpy(&g_ring[g_head], &m, sizeof(LogMsg_t));
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <LoggerTask+0x6c>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	01db      	lsls	r3, r3, #7
 8000b6e:	4a12      	ldr	r2, [pc, #72]	@ (8000bb8 <LoggerTask+0x70>)
 8000b70:	4413      	add	r3, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	2280      	movs	r2, #128	@ 0x80
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f006 f9e3 	bl	8006f46 <memcpy>
            g_head  = (g_head + 1) % LOG_RING_SIZE;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <LoggerTask+0x6c>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	425a      	negs	r2, r3
 8000b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000b90:	bf58      	it	pl
 8000b92:	4253      	negpl	r3, r2
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <LoggerTask+0x6c>)
 8000b98:	801a      	strh	r2, [r3, #0]
            if (g_count < LOG_RING_SIZE) g_count++;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <LoggerTask+0x74>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ba0:	d8d6      	bhi.n	8000b50 <LoggerTask+0x8>
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <LoggerTask+0x74>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <LoggerTask+0x74>)
 8000bac:	801a      	strh	r2, [r3, #0]
        if (xQueueReceive(xLogQueue, &m, portMAX_DELAY) == pdPASS) {
 8000bae:	e7cf      	b.n	8000b50 <LoggerTask+0x8>
 8000bb0:	20000260 	.word	0x20000260
 8000bb4:	20004264 	.word	0x20004264
 8000bb8:	20000264 	.word	0x20000264
 8000bbc:	20004266 	.word	0x20004266

08000bc0 <RegisterUserTask>:
        }
    }
}

void RegisterUserTask(TaskHandle_t h, const char *name, uint16_t stackSize)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	80fb      	strh	r3, [r7, #6]
    if (g_taskCount < MAX_USER_TASKS) {
 8000bce:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <RegisterUserTask+0x70>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b0f      	cmp	r3, #15
 8000bd4:	d827      	bhi.n	8000c26 <RegisterUserTask+0x66>
        g_taskTable[g_taskCount].handle    = h;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <RegisterUserTask+0x70>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4916      	ldr	r1, [pc, #88]	@ (8000c34 <RegisterUserTask+0x74>)
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	440b      	add	r3, r1
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	601a      	str	r2, [r3, #0]
        strncpy(g_taskTable[g_taskCount].name, name, sizeof(g_taskTable[g_taskCount].name)-1);
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <RegisterUserTask+0x70>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	4413      	add	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <RegisterUserTask+0x74>)
 8000bf8:	4413      	add	r3, r2
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	220f      	movs	r2, #15
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f006 f8b5 	bl	8006d70 <strncpy>
        g_taskTable[g_taskCount].stackSize = stackSize;
 8000c06:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <RegisterUserTask+0x70>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	490a      	ldr	r1, [pc, #40]	@ (8000c34 <RegisterUserTask+0x74>)
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	440b      	add	r3, r1
 8000c16:	3314      	adds	r3, #20
 8000c18:	88fa      	ldrh	r2, [r7, #6]
 8000c1a:	801a      	strh	r2, [r3, #0]
        g_taskCount++;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <RegisterUserTask+0x70>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a03      	ldr	r2, [pc, #12]	@ (8000c30 <RegisterUserTask+0x70>)
 8000c24:	6013      	str	r3, [r2, #0]
    }
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000025c 	.word	0x2000025c
 8000c34:	200000dc 	.word	0x200000dc

08000c38 <findStackSize>:

static uint16_t findStackSize(TaskHandle_t h)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    for (UBaseType_t i = 0; i < g_taskCount; i++) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e017      	b.n	8000c76 <findStackSize+0x3e>
        if (g_taskTable[i].handle == h) {
 8000c46:	4912      	ldr	r1, [pc, #72]	@ (8000c90 <findStackSize+0x58>)
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4413      	add	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	440b      	add	r3, r1
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d109      	bne.n	8000c70 <findStackSize+0x38>
            return g_taskTable[i].stackSize;    // user-defined task
 8000c5c:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <findStackSize+0x58>)
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	440b      	add	r3, r1
 8000c6a:	3314      	adds	r3, #20
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	e008      	b.n	8000c82 <findStackSize+0x4a>
    for (UBaseType_t i = 0; i < g_taskCount; i++) {
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3301      	adds	r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <findStackSize+0x5c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d3e2      	bcc.n	8000c46 <findStackSize+0xe>
        }
    }
    return 0;     // fallback
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200000dc 	.word	0x200000dc
 8000c94:	2000025c 	.word	0x2000025c

08000c98 <cmd_help>:

static void cmd_help(int argc, char** argv) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
    shell_write("\r\nAvailable commands:\r\n");
 8000ca2:	4810      	ldr	r0, [pc, #64]	@ (8000ce4 <cmd_help+0x4c>)
 8000ca4:	f7ff feee 	bl	8000a84 <shell_write>
    for (int i = 0; i < CMD_COUNT; i++) {
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	e011      	b.n	8000cd2 <cmd_help+0x3a>
        shell_write("  ");
 8000cae:	480e      	ldr	r0, [pc, #56]	@ (8000ce8 <cmd_help+0x50>)
 8000cb0:	f7ff fee8 	bl	8000a84 <shell_write>
        shell_write(cli_commands[i].help);
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <cmd_help+0x54>)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	4413      	add	r3, r2
 8000cbc:	330c      	adds	r3, #12
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fedf 	bl	8000a84 <shell_write>
        shell_write("\r\n");
 8000cc6:	480a      	ldr	r0, [pc, #40]	@ (8000cf0 <cmd_help+0x58>)
 8000cc8:	f7ff fedc 	bl	8000a84 <shell_write>
    for (int i = 0; i < CMD_COUNT; i++) {
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d9ea      	bls.n	8000cae <cmd_help+0x16>
    }
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08008410 	.word	0x08008410
 8000ce8:	08008428 	.word	0x08008428
 8000cec:	0800897c 	.word	0x0800897c
 8000cf0:	0800842c 	.word	0x0800842c

08000cf4 <cmd_echo>:

static void cmd_echo(int argc, char** argv) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
    // 從 argv[1] 開始輸出所有參數
    for (int i = 1; i < argc; i++) {
 8000cfe:	2301      	movs	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	e012      	b.n	8000d2a <cmd_echo+0x36>
        shell_write(argv[i]);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff feb8 	bl	8000a84 <shell_write>
        if (i < argc - 1) shell_write(" ");
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	da02      	bge.n	8000d24 <cmd_echo+0x30>
 8000d1e:	4808      	ldr	r0, [pc, #32]	@ (8000d40 <cmd_echo+0x4c>)
 8000d20:	f7ff feb0 	bl	8000a84 <shell_write>
    for (int i = 1; i < argc; i++) {
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	dbe8      	blt.n	8000d04 <cmd_echo+0x10>
    }
    shell_write("\r\n");
 8000d32:	4804      	ldr	r0, [pc, #16]	@ (8000d44 <cmd_echo+0x50>)
 8000d34:	f7ff fea6 	bl	8000a84 <shell_write>
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	08008430 	.word	0x08008430
 8000d44:	0800842c 	.word	0x0800842c

08000d48 <cmd_status>:

static void cmd_status(int argc, char** argv) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	f5ad 6dfb 	sub.w	sp, sp, #2008	@ 0x7d8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8000d54:	f2a3 73d4 	subw	r3, r3, #2004	@ 0x7d4
 8000d58:	6018      	str	r0, [r3, #0]
 8000d5a:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8000d5e:	f5a3 63fb 	sub.w	r3, r3, #2008	@ 0x7d8
 8000d62:	6019      	str	r1, [r3, #0]
	uint8_t InfoBuffer[1000];
	uint8_t RunTimeBuffer[1000];
    vTaskList((char *)&InfoBuffer);
 8000d64:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f004 fc7f 	bl	800566c <vTaskList>
    vTaskGetRunTimeStats((char *)&RunTimeBuffer);
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 fd10 	bl	8005798 <vTaskGetRunTimeStats>
    shell_write("Name          State     Pr     Stack  TaskNum\r\n");
 8000d78:	480e      	ldr	r0, [pc, #56]	@ (8000db4 <cmd_status+0x6c>)
 8000d7a:	f7ff fe83 	bl	8000a84 <shell_write>
    shell_write("---------------------------------------------\r\n");
 8000d7e:	480e      	ldr	r0, [pc, #56]	@ (8000db8 <cmd_status+0x70>)
 8000d80:	f7ff fe80 	bl	8000a84 <shell_write>
    shell_write(InfoBuffer);
 8000d84:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fe7b 	bl	8000a84 <shell_write>
    shell_write("\r\n");
 8000d8e:	480b      	ldr	r0, [pc, #44]	@ (8000dbc <cmd_status+0x74>)
 8000d90:	f7ff fe78 	bl	8000a84 <shell_write>
    shell_write("Name            Count        Utlization\r\n");
 8000d94:	480a      	ldr	r0, [pc, #40]	@ (8000dc0 <cmd_status+0x78>)
 8000d96:	f7ff fe75 	bl	8000a84 <shell_write>
    shell_write("---------------------------------------\r\n");
 8000d9a:	480a      	ldr	r0, [pc, #40]	@ (8000dc4 <cmd_status+0x7c>)
 8000d9c:	f7ff fe72 	bl	8000a84 <shell_write>
    shell_write(RunTimeBuffer);
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fe6d 	bl	8000a84 <shell_write>
}
 8000daa:	bf00      	nop
 8000dac:	f507 67fb 	add.w	r7, r7, #2008	@ 0x7d8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	08008434 	.word	0x08008434
 8000db8:	08008464 	.word	0x08008464
 8000dbc:	0800842c 	.word	0x0800842c
 8000dc0:	08008494 	.word	0x08008494
 8000dc4:	080084c0 	.word	0x080084c0

08000dc8 <cmd_uptime>:

static void cmd_uptime(int argc, char** argv) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09c      	sub	sp, #112	@ 0x70
 8000dcc:	af04      	add	r7, sp, #16
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
    TickType_t ticks = xTaskGetTickCount(); // 取得系統經過的 ticks
 8000dd2:	f003 fedb 	bl	8004b8c <xTaskGetTickCount>
 8000dd6:	65f8      	str	r0, [r7, #92]	@ 0x5c
    uint32_t ms = ticks * portTICK_PERIOD_MS;
 8000dd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dda:	65bb      	str	r3, [r7, #88]	@ 0x58

    uint32_t seconds = ms / 1000;
 8000ddc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dde:	4a1e      	ldr	r2, [pc, #120]	@ (8000e58 <cmd_uptime+0x90>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	099b      	lsrs	r3, r3, #6
 8000de6:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t minutes = seconds / 60;
 8000de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000dea:	4a1c      	ldr	r2, [pc, #112]	@ (8000e5c <cmd_uptime+0x94>)
 8000dec:	fba2 2303 	umull	r2, r3, r2, r3
 8000df0:	095b      	lsrs	r3, r3, #5
 8000df2:	653b      	str	r3, [r7, #80]	@ 0x50
    uint32_t hours   = minutes / 60;
 8000df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000df6:	4a19      	ldr	r2, [pc, #100]	@ (8000e5c <cmd_uptime+0x94>)
 8000df8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfc:	095b      	lsrs	r3, r3, #5
 8000dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c

    seconds = seconds % 60;
 8000e00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000e02:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <cmd_uptime+0x94>)
 8000e04:	fba3 1302 	umull	r1, r3, r3, r2
 8000e08:	0959      	lsrs	r1, r3, #5
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	1a5b      	subs	r3, r3, r1
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	657b      	str	r3, [r7, #84]	@ 0x54
    minutes = minutes % 60;
 8000e16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e18:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <cmd_uptime+0x94>)
 8000e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e1e:	0959      	lsrs	r1, r3, #5
 8000e20:	460b      	mov	r3, r1
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	653b      	str	r3, [r7, #80]	@ 0x50

    char line[64];
    snprintf(line, sizeof(line), "Uptime: %02lu:%02lu:%02lu (%lu ms)\r\n",
 8000e2c:	f107 000c 	add.w	r0, r7, #12
 8000e30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e32:	9302      	str	r3, [sp, #8]
 8000e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <cmd_uptime+0x98>)
 8000e40:	2140      	movs	r1, #64	@ 0x40
 8000e42:	f005 febd 	bl	8006bc0 <sniprintf>
             hours, minutes, seconds, ms);
    shell_write(line);
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fe1a 	bl	8000a84 <shell_write>
}
 8000e50:	bf00      	nop
 8000e52:	3760      	adds	r7, #96	@ 0x60
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	10624dd3 	.word	0x10624dd3
 8000e5c:	88888889 	.word	0x88888889
 8000e60:	080084ec 	.word	0x080084ec

08000e64 <cmd_log>:

static void cmd_log(int argc, char **argv)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
    if (argc < 2) { shell_write("Usage: log on|off|dump\r\n"); return; }
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	dc03      	bgt.n	8000e7c <cmd_log+0x18>
 8000e74:	4831      	ldr	r0, [pc, #196]	@ (8000f3c <cmd_log+0xd8>)
 8000e76:	f7ff fe05 	bl	8000a84 <shell_write>
 8000e7a:	e05c      	b.n	8000f36 <cmd_log+0xd2>

    if (strcmp(argv[1], "on") == 0) {
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	3304      	adds	r3, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	492f      	ldr	r1, [pc, #188]	@ (8000f40 <cmd_log+0xdc>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f9a3 	bl	80001d0 <strcmp>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d106      	bne.n	8000e9e <cmd_log+0x3a>
        g_logEnabled = true;
 8000e90:	4b2c      	ldr	r3, [pc, #176]	@ (8000f44 <cmd_log+0xe0>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
        shell_write("Log ON\r\n");
 8000e96:	482c      	ldr	r0, [pc, #176]	@ (8000f48 <cmd_log+0xe4>)
 8000e98:	f7ff fdf4 	bl	8000a84 <shell_write>
 8000e9c:	e04b      	b.n	8000f36 <cmd_log+0xd2>
    } else if (strcmp(argv[1], "off") == 0) {
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4929      	ldr	r1, [pc, #164]	@ (8000f4c <cmd_log+0xe8>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff f992 	bl	80001d0 <strcmp>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d106      	bne.n	8000ec0 <cmd_log+0x5c>
        g_logEnabled = false;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <cmd_log+0xe0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
        shell_write("Log OFF\r\n");
 8000eb8:	4825      	ldr	r0, [pc, #148]	@ (8000f50 <cmd_log+0xec>)
 8000eba:	f7ff fde3 	bl	8000a84 <shell_write>
 8000ebe:	e03a      	b.n	8000f36 <cmd_log+0xd2>
    } else if (strcmp(argv[1], "dump") == 0) {
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4923      	ldr	r1, [pc, #140]	@ (8000f54 <cmd_log+0xf0>)
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff f981 	bl	80001d0 <strcmp>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d12d      	bne.n	8000f30 <cmd_log+0xcc>
        shell_write("=== Log Dump Start ===\r\n");
 8000ed4:	4820      	ldr	r0, [pc, #128]	@ (8000f58 <cmd_log+0xf4>)
 8000ed6:	f7ff fdd5 	bl	8000a84 <shell_write>
        uint16_t start = (g_head + LOG_RING_SIZE - g_count) % LOG_RING_SIZE;
 8000eda:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <cmd_log+0xf8>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	3380      	adds	r3, #128	@ 0x80
 8000ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8000f60 <cmd_log+0xfc>)
 8000ee2:	8812      	ldrh	r2, [r2, #0]
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	425a      	negs	r2, r3
 8000ee8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000eec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000ef0:	bf58      	it	pl
 8000ef2:	4253      	negpl	r3, r2
 8000ef4:	81bb      	strh	r3, [r7, #12]
        for (uint16_t i = 0; i < g_count; i++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	81fb      	strh	r3, [r7, #14]
 8000efa:	e010      	b.n	8000f1e <cmd_log+0xba>
            uint16_t idx = (start + i) % LOG_RING_SIZE;
 8000efc:	89ba      	ldrh	r2, [r7, #12]
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	4413      	add	r3, r2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f08:	817b      	strh	r3, [r7, #10]
            shell_write(g_ring[idx].text);
 8000f0a:	897b      	ldrh	r3, [r7, #10]
 8000f0c:	01db      	lsls	r3, r3, #7
 8000f0e:	4a15      	ldr	r2, [pc, #84]	@ (8000f64 <cmd_log+0x100>)
 8000f10:	4413      	add	r3, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fdb6 	bl	8000a84 <shell_write>
        for (uint16_t i = 0; i < g_count; i++) {
 8000f18:	89fb      	ldrh	r3, [r7, #14]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	81fb      	strh	r3, [r7, #14]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <cmd_log+0xfc>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	89fa      	ldrh	r2, [r7, #14]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d3e9      	bcc.n	8000efc <cmd_log+0x98>
        }
        shell_write("===  Log Dump End  ===\r\n");
 8000f28:	480f      	ldr	r0, [pc, #60]	@ (8000f68 <cmd_log+0x104>)
 8000f2a:	f7ff fdab 	bl	8000a84 <shell_write>
 8000f2e:	e002      	b.n	8000f36 <cmd_log+0xd2>
    } else {
        shell_write("Usage: log on | off | dump\r\n");
 8000f30:	480e      	ldr	r0, [pc, #56]	@ (8000f6c <cmd_log+0x108>)
 8000f32:	f7ff fda7 	bl	8000a84 <shell_write>
    }
}
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	08008514 	.word	0x08008514
 8000f40:	08008530 	.word	0x08008530
 8000f44:	20004268 	.word	0x20004268
 8000f48:	08008534 	.word	0x08008534
 8000f4c:	08008540 	.word	0x08008540
 8000f50:	08008544 	.word	0x08008544
 8000f54:	08008550 	.word	0x08008550
 8000f58:	08008558 	.word	0x08008558
 8000f5c:	20004264 	.word	0x20004264
 8000f60:	20004266 	.word	0x20004266
 8000f64:	20000264 	.word	0x20000264
 8000f68:	08008574 	.word	0x08008574
 8000f6c:	08008590 	.word	0x08008590

08000f70 <cmd_mem>:

static void cmd_mem(int argc, char **argv)
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b0c6      	sub	sp, #280	@ 0x118
 8000f74:	af04      	add	r7, sp, #16
 8000f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f7e:	6018      	str	r0, [r3, #0]
 8000f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f88:	6019      	str	r1, [r3, #0]
    /* 先列出 Heap 資訊 … */
	char line[128];
	size_t heap_free = xPortGetFreeHeapSize();
 8000f8a:	f005 fc83 	bl	8006894 <xPortGetFreeHeapSize>
 8000f8e:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
	size_t heap_min = xPortGetMinimumEverFreeHeapSize();
 8000f92:	f005 fc8b 	bl	80068ac <xPortGetMinimumEverFreeHeapSize>
 8000f96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
	shell_write("\r\nMemory Summary:\r\n\r\n");
 8000f9a:	485a      	ldr	r0, [pc, #360]	@ (8001104 <cmd_mem+0x194>)
 8000f9c:	f7ff fd72 	bl	8000a84 <shell_write>

	snprintf(line, sizeof(line), "    Heap Total Free      : %lu bytes\r\n", (unsigned long)heap_free);
 8000fa0:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8000fa4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000fa8:	4a57      	ldr	r2, [pc, #348]	@ (8001108 <cmd_mem+0x198>)
 8000faa:	2180      	movs	r1, #128	@ 0x80
 8000fac:	f005 fe08 	bl	8006bc0 <sniprintf>
	shell_write(line);
 8000fb0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fd65 	bl	8000a84 <shell_write>
	snprintf(line, sizeof(line), "    Heap Min Ever Free   : %lu bytes\r\n\r\n", (unsigned long)heap_min);
 8000fba:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8000fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000fc2:	4a52      	ldr	r2, [pc, #328]	@ (800110c <cmd_mem+0x19c>)
 8000fc4:	2180      	movs	r1, #128	@ 0x80
 8000fc6:	f005 fdfb 	bl	8006bc0 <sniprintf>
	shell_write(line);
 8000fca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fd58 	bl	8000a84 <shell_write>


    UBaseType_t n = uxTaskGetNumberOfTasks();
 8000fd4:	f003 fdea 	bl	8004bac <uxTaskGetNumberOfTasks>
 8000fd8:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
    TaskStatus_t *tsArray = pvPortMalloc(n * sizeof(TaskStatus_t));
 8000fdc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 fb2f 	bl	800664c <pvPortMalloc>
 8000fee:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    n = uxTaskGetSystemState(tsArray, n, NULL);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8000ff8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8000ffc:	f003 fde2 	bl	8004bc4 <uxTaskGetSystemState>
 8001000:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8

    shell_write("\r\nTask            Stack  Used Free            %%\r\n"
 8001004:	4842      	ldr	r0, [pc, #264]	@ (8001110 <cmd_mem+0x1a0>)
 8001006:	f7ff fd3d 	bl	8000a84 <shell_write>
                "--------------- ------ ---- ---- -------------\r\n");

    char buf[96];
    for (UBaseType_t i = 0; i < n; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001010:	e069      	b.n	80010e6 <cmd_mem+0x176>
        TaskStatus_t *t = &tsArray[i];
 8001012:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001016:	4613      	mov	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	461a      	mov	r2, r3
 8001020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001024:	4413      	add	r3, r2
 8001026:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        uint16_t total = findStackSize(t->xHandle);
 800102a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fe01 	bl	8000c38 <findStackSize>
 8001036:	4603      	mov	r3, r0
 8001038:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
        uint16_t free  = t->usStackHighWaterMark;
 800103c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001040:	8c1b      	ldrh	r3, [r3, #32]
 8001042:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
        uint16_t used  = total - free;
 8001046:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	@ 0xee
 800104a:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
        uint8_t  pct   = (used * 100UL) / total;
 8001054:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8001058:	2264      	movs	r2, #100	@ 0x64
 800105a:	fb03 f202 	mul.w	r2, r3, r2
 800105e:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
 8001066:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9

        if(total == 0){
 800106a:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 800106e:	2b00      	cmp	r3, #0
 8001070:	d118      	bne.n	80010a4 <cmd_mem+0x134>
        	snprintf(buf, sizeof(buf), "%-15s %5s  %4s %4u %13s\r\n",
 8001072:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 800107c:	f107 0008 	add.w	r0, r7, #8
 8001080:	4924      	ldr	r1, [pc, #144]	@ (8001114 <cmd_mem+0x1a4>)
 8001082:	9103      	str	r1, [sp, #12]
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <cmd_mem+0x1a8>)
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <cmd_mem+0x1a8>)
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4613      	mov	r3, r2
 8001090:	4a22      	ldr	r2, [pc, #136]	@ (800111c <cmd_mem+0x1ac>)
 8001092:	2160      	movs	r1, #96	@ 0x60
 8001094:	f005 fd94 	bl	8006bc0 <sniprintf>
        	        	                 t->pcTaskName, "N/A","N/A", free, "system task");
        	        	        shell_write(buf);
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fcf1 	bl	8000a84 <shell_write>
 80010a2:	e01b      	b.n	80010dc <cmd_mem+0x16c>
        }
        else{
        	 snprintf(buf, sizeof(buf), "%-15s %5u  %4u %4u %12u%%\r\n",
 80010a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80010a8:	685d      	ldr	r5, [r3, #4]
 80010aa:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 80010ae:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	@ 0xea
 80010b2:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	@ 0xec
 80010b6:	f897 00e9 	ldrb.w	r0, [r7, #233]	@ 0xe9
 80010ba:	f107 0408 	add.w	r4, r7, #8
 80010be:	9003      	str	r0, [sp, #12]
 80010c0:	9102      	str	r1, [sp, #8]
 80010c2:	9201      	str	r2, [sp, #4]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	462b      	mov	r3, r5
 80010c8:	4a15      	ldr	r2, [pc, #84]	@ (8001120 <cmd_mem+0x1b0>)
 80010ca:	2160      	movs	r1, #96	@ 0x60
 80010cc:	4620      	mov	r0, r4
 80010ce:	f005 fd77 	bl	8006bc0 <sniprintf>
        	                 t->pcTaskName, total, used, free, pct);
        	        shell_write(buf);
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fcd4 	bl	8000a84 <shell_write>
    for (UBaseType_t i = 0; i < n; i++) {
 80010dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80010e0:	3301      	adds	r3, #1
 80010e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80010e6:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80010ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d38f      	bcc.n	8001012 <cmd_mem+0xa2>
        }
    }
    vPortFree(tsArray);
 80010f2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 80010f6:	f005 fb71 	bl	80067dc <vPortFree>
}
 80010fa:	bf00      	nop
 80010fc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001100:	46bd      	mov	sp, r7
 8001102:	bdb0      	pop	{r4, r5, r7, pc}
 8001104:	080085b0 	.word	0x080085b0
 8001108:	080085c8 	.word	0x080085c8
 800110c:	080085f0 	.word	0x080085f0
 8001110:	0800861c 	.word	0x0800861c
 8001114:	0800869c 	.word	0x0800869c
 8001118:	080086a8 	.word	0x080086a8
 800111c:	08008680 	.word	0x08008680
 8001120:	080086ac 	.word	0x080086ac

08001124 <history_init>:

// command 歷史記錄
static CommandHistory_t cmd_history;

static void history_init(CommandHistory_t *history) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    history->head = 0;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
    history->count = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    memset(history->commands, 0, sizeof(history->commands));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f005 fe0b 	bl	8006d60 <memset>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <history_add>:

static void history_add(CommandHistory_t *history, const char *command) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
    if (strlen(command) == 0) return;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d053      	beq.n	800120e <history_add+0xba>

    // 檢查是否與上一條命令相同
    if (history->count > 0) {
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800116c:	2b00      	cmp	r3, #0
 800116e:	dd1b      	ble.n	80011a8 <history_add+0x54>
        int last_cmd_index = (history->head - 1 + COMMAND_HISTORY_SIZE) % COMMAND_HISTORY_SIZE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8001176:	f103 0209 	add.w	r2, r3, #9
 800117a:	4b28      	ldr	r3, [pc, #160]	@ (800121c <history_add+0xc8>)
 800117c:	fb83 1302 	smull	r1, r3, r3, r2
 8001180:	1099      	asrs	r1, r3, #2
 8001182:	17d3      	asrs	r3, r2, #31
 8001184:	1ac9      	subs	r1, r1, r3
 8001186:	460b      	mov	r3, r1
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	60fb      	str	r3, [r7, #12]
        if (strcmp(history->commands[last_cmd_index], command) == 0) {
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	01db      	lsls	r3, r3, #7
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	6839      	ldr	r1, [r7, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f817 	bl	80001d0 <strcmp>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d034      	beq.n	8001212 <history_add+0xbe>
            return; // 相同則不加入
        }
    }

    strncpy(history->commands[history->head], command, MAX_COMMAND_LENGTH - 1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 80011ae:	01db      	lsls	r3, r3, #7
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	227f      	movs	r2, #127	@ 0x7f
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f005 fdd9 	bl	8006d70 <strncpy>
    history->commands[history->head][MAX_COMMAND_LENGTH - 1] = '\0';
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	01db      	lsls	r3, r3, #7
 80011c8:	4413      	add	r3, r2
 80011ca:	337f      	adds	r3, #127	@ 0x7f
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
    history->head = (history->head + 1) % COMMAND_HISTORY_SIZE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 80011d6:	1c59      	adds	r1, r3, #1
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <history_add+0xc8>)
 80011da:	fb83 2301 	smull	r2, r3, r3, r1
 80011de:	109a      	asrs	r2, r3, #2
 80011e0:	17cb      	asrs	r3, r1, #31
 80011e2:	1ad2      	subs	r2, r2, r3
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	1aca      	subs	r2, r1, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500

    if (history->count < COMMAND_HISTORY_SIZE) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80011fa:	2b09      	cmp	r3, #9
 80011fc:	dc0a      	bgt.n	8001214 <history_add+0xc0>
        history->count++;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
 800120c:	e002      	b.n	8001214 <history_add+0xc0>
    if (strlen(command) == 0) return;
 800120e:	bf00      	nop
 8001210:	e000      	b.n	8001214 <history_add+0xc0>
            return; // 相同則不加入
 8001212:	bf00      	nop
    }
}
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	66666667 	.word	0x66666667

08001220 <history_get>:

static const char* history_get(CommandHistory_t *history, int index) {
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
    if (index < 0 || index >= history->count) {
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db05      	blt.n	800123c <history_get+0x1c>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	db01      	blt.n	8001240 <history_get+0x20>
        return NULL;
 800123c:	2300      	movs	r3, #0
 800123e:	e017      	b.n	8001270 <history_get+0x50>
    }
    int real_index = (history->head - 1 - index + COMMAND_HISTORY_SIZE) % COMMAND_HISTORY_SIZE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8001246:	1e5a      	subs	r2, r3, #1
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f103 020a 	add.w	r2, r3, #10
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <history_get+0x5c>)
 8001252:	fb83 1302 	smull	r1, r3, r3, r2
 8001256:	1099      	asrs	r1, r3, #2
 8001258:	17d3      	asrs	r3, r2, #31
 800125a:	1ac9      	subs	r1, r1, r3
 800125c:	460b      	mov	r3, r1
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	60fb      	str	r3, [r7, #12]
    return history->commands[real_index];
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	01db      	lsls	r3, r3, #7
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	66666667 	.word	0x66666667

08001280 <parse_and_execute>:

// Parser function
static void parse_and_execute(char* line) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b090      	sub	sp, #64	@ 0x40
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    char* argv[10];
    int argc = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    history_add(&cmd_history, line);
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4837      	ldr	r0, [pc, #220]	@ (800136c <parse_and_execute+0xec>)
 8001290:	f7ff ff60 	bl	8001154 <history_add>

    log_printf(">>> %s\r\n", line);
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4836      	ldr	r0, [pc, #216]	@ (8001370 <parse_and_execute+0xf0>)
 8001298:	f7ff fc28 	bl	8000aec <log_printf>

    char* p = strtok(line, " ");
 800129c:	4935      	ldr	r1, [pc, #212]	@ (8001374 <parse_and_execute+0xf4>)
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f005 fd7a 	bl	8006d98 <strtok>
 80012a4:	63b8      	str	r0, [r7, #56]	@ 0x38
    while (p && argc < 10) {
 80012a6:	e00d      	b.n	80012c4 <parse_and_execute+0x44>
        argv[argc++] = p;
 80012a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	3340      	adds	r3, #64	@ 0x40
 80012b2:	443b      	add	r3, r7
 80012b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80012b6:	f843 2c34 	str.w	r2, [r3, #-52]
        p = strtok(NULL, " ");
 80012ba:	492e      	ldr	r1, [pc, #184]	@ (8001374 <parse_and_execute+0xf4>)
 80012bc:	2000      	movs	r0, #0
 80012be:	f005 fd6b 	bl	8006d98 <strtok>
 80012c2:	63b8      	str	r0, [r7, #56]	@ 0x38
    while (p && argc < 10) {
 80012c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <parse_and_execute+0x50>
 80012ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	ddeb      	ble.n	80012a8 <parse_and_execute+0x28>
    }
    if (argc == 0) return;
 80012d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d045      	beq.n	8001362 <parse_and_execute+0xe2>

    for (int i = 0; i < CMD_COUNT; i++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80012da:	e034      	b.n	8001346 <parse_and_execute+0xc6>
        if (strcmp(argv[0], cli_commands[i].name) == 0) {
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4926      	ldr	r1, [pc, #152]	@ (8001378 <parse_and_execute+0xf8>)
 80012e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	440b      	add	r3, r1
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4610      	mov	r0, r2
 80012ec:	f7fe ff70 	bl	80001d0 <strcmp>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d124      	bne.n	8001340 <parse_and_execute+0xc0>
            if (argc - 1 < cli_commands[i].argc_min) {
 80012f6:	4a20      	ldr	r2, [pc, #128]	@ (8001378 <parse_and_execute+0xf8>)
 80012f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	3304      	adds	r3, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001304:	429a      	cmp	r2, r3
 8001306:	dc0f      	bgt.n	8001328 <parse_and_execute+0xa8>
                shell_write("Usage: ");
 8001308:	481c      	ldr	r0, [pc, #112]	@ (800137c <parse_and_execute+0xfc>)
 800130a:	f7ff fbbb 	bl	8000a84 <shell_write>
                shell_write(cli_commands[i].help);
 800130e:	4a1a      	ldr	r2, [pc, #104]	@ (8001378 <parse_and_execute+0xf8>)
 8001310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4413      	add	r3, r2
 8001316:	330c      	adds	r3, #12
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fbb2 	bl	8000a84 <shell_write>
                shell_write("\r\n");
 8001320:	4817      	ldr	r0, [pc, #92]	@ (8001380 <parse_and_execute+0x100>)
 8001322:	f7ff fbaf 	bl	8000a84 <shell_write>
            } else {
                cli_commands[i].handler(argc, argv);
            }
            return;
 8001326:	e01d      	b.n	8001364 <parse_and_execute+0xe4>
                cli_commands[i].handler(argc, argv);
 8001328:	4a13      	ldr	r2, [pc, #76]	@ (8001378 <parse_and_execute+0xf8>)
 800132a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	4413      	add	r3, r2
 8001330:	3308      	adds	r3, #8
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f107 020c 	add.w	r2, r7, #12
 8001338:	4611      	mov	r1, r2
 800133a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800133c:	4798      	blx	r3
            return;
 800133e:	e011      	b.n	8001364 <parse_and_execute+0xe4>
    for (int i = 0; i < CMD_COUNT; i++) {
 8001340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001342:	3301      	adds	r3, #1
 8001344:	637b      	str	r3, [r7, #52]	@ 0x34
 8001346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001348:	2b08      	cmp	r3, #8
 800134a:	d9c7      	bls.n	80012dc <parse_and_execute+0x5c>
        }
    }
    shell_write("Unknown command: ");
 800134c:	480d      	ldr	r0, [pc, #52]	@ (8001384 <parse_and_execute+0x104>)
 800134e:	f7ff fb99 	bl	8000a84 <shell_write>
    shell_write(argv[0]);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fb95 	bl	8000a84 <shell_write>
    shell_write("\r\n");
 800135a:	4809      	ldr	r0, [pc, #36]	@ (8001380 <parse_and_execute+0x100>)
 800135c:	f7ff fb92 	bl	8000a84 <shell_write>
 8001360:	e000      	b.n	8001364 <parse_and_execute+0xe4>
    if (argc == 0) return;
 8001362:	bf00      	nop
}
 8001364:	3740      	adds	r7, #64	@ 0x40
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000426c 	.word	0x2000426c
 8001370:	080086c8 	.word	0x080086c8
 8001374:	08008430 	.word	0x08008430
 8001378:	0800897c 	.word	0x0800897c
 800137c:	080086d4 	.word	0x080086d4
 8001380:	0800842c 	.word	0x0800842c
 8001384:	080086dc 	.word	0x080086dc

08001388 <ShellTask>:

// Shell Task
void ShellTask(void* argument) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b0ca      	sub	sp, #296	@ 0x128
 800138c:	af00      	add	r7, sp, #0
 800138e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001392:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001396:	6018      	str	r0, [r3, #0]
    static const char* banner =
       "FreeShellRTOS:/$ ";  // 已經在這前面印 banner 的程式
//    static const char* prompt = "FreeShellRTOS:/$ ";

    char buf[128];
    int idx = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    char ch;

    ReceiveState_t state = NORMAL;
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
	int history_idx = -1; // -1 表示不在瀏覽模式
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	history_init(&cmd_history);
 80013ac:	489d      	ldr	r0, [pc, #628]	@ (8001624 <ShellTask+0x29c>)
 80013ae:	f7ff feb9 	bl	8001124 <history_init>

	int cursor_pos = 0; // 光標位置
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    shell_write(shell_banner);
 80013b8:	4b9b      	ldr	r3, [pc, #620]	@ (8001628 <ShellTask+0x2a0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fb61 	bl	8000a84 <shell_write>
    shell_write(banner);
 80013c2:	4b9a      	ldr	r3, [pc, #616]	@ (800162c <ShellTask+0x2a4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fb5c 	bl	8000a84 <shell_write>

    while (1) {
            if (HAL_UART_Receive(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY) == HAL_OK) {
 80013cc:	f107 018f 	add.w	r1, r7, #143	@ 0x8f
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
 80013d4:	2201      	movs	r2, #1
 80013d6:	4896      	ldr	r0, [pc, #600]	@ (8001630 <ShellTask+0x2a8>)
 80013d8:	f001 ffc9 	bl	800336e <HAL_UART_Receive>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f4      	bne.n	80013cc <ShellTask+0x44>

                // 狀態機開始
                if (state == NORMAL) {
 80013e2:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d108      	bne.n	80013fc <ShellTask+0x74>
                    if (ch == 0x1B) { // ESC
 80013ea:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80013ee:	2b1b      	cmp	r3, #27
 80013f0:	f040 80a4 	bne.w	800153c <ShellTask+0x1b4>
                        state = GOT_ESC;
 80013f4:	2301      	movs	r3, #1
 80013f6:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
                        continue;
 80013fa:	e112      	b.n	8001622 <ShellTask+0x29a>
                    }
                } else if (state == GOT_ESC) {
 80013fc:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001400:	2b01      	cmp	r3, #1
 8001402:	d109      	bne.n	8001418 <ShellTask+0x90>
                    state = (ch == '[') ? GOT_BRACKET : NORMAL;
 8001404:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001408:	2b5b      	cmp	r3, #91	@ 0x5b
 800140a:	d101      	bne.n	8001410 <ShellTask+0x88>
 800140c:	2302      	movs	r3, #2
 800140e:	e000      	b.n	8001412 <ShellTask+0x8a>
 8001410:	2300      	movs	r3, #0
 8001412:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
                    continue;
 8001416:	e104      	b.n	8001622 <ShellTask+0x29a>
                } else if (state == GOT_BRACKET) {
 8001418:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800141c:	2b02      	cmp	r3, #2
 800141e:	f040 808d 	bne.w	800153c <ShellTask+0x1b4>
                    state = NORMAL;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
                    switch (ch) {
 8001428:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800142c:	3b41      	subs	r3, #65	@ 0x41
 800142e:	2b03      	cmp	r3, #3
 8001430:	f200 80f2 	bhi.w	8001618 <ShellTask+0x290>
 8001434:	a201      	add	r2, pc, #4	@ (adr r2, 800143c <ShellTask+0xb4>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	0800144d 	.word	0x0800144d
 8001440:	08001469 	.word	0x08001469
 8001444:	0800147d 	.word	0x0800147d
 8001448:	0800149d 	.word	0x0800149d
                        case 'A': // Up arrow
                            if (history_idx < cmd_history.count - 1) history_idx++;
 800144c:	4b75      	ldr	r3, [pc, #468]	@ (8001624 <ShellTask+0x29c>)
 800144e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8001452:	3b01      	subs	r3, #1
 8001454:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001458:	429a      	cmp	r2, r3
 800145a:	da2d      	bge.n	80014b8 <ShellTask+0x130>
 800145c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001460:	3301      	adds	r3, #1
 8001462:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                            break;
 8001466:	e027      	b.n	80014b8 <ShellTask+0x130>
                        case 'B': // Down arrow
                            if (history_idx > -1) history_idx--;
 8001468:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800146c:	2b00      	cmp	r3, #0
 800146e:	db25      	blt.n	80014bc <ShellTask+0x134>
 8001470:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001474:	3b01      	subs	r3, #1
 8001476:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                            break;
 800147a:	e01f      	b.n	80014bc <ShellTask+0x134>
                        case 'C': // Right arrow
                            if (cursor_pos < idx) {
 800147c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001480:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001484:	429a      	cmp	r2, r3
 8001486:	f280 80c9 	bge.w	800161c <ShellTask+0x294>
                                cursor_pos++;
 800148a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800148e:	3301      	adds	r3, #1
 8001490:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
                                shell_write(ANSI_CURSOR_FORWARD);
 8001494:	4867      	ldr	r0, [pc, #412]	@ (8001634 <ShellTask+0x2ac>)
 8001496:	f7ff faf5 	bl	8000a84 <shell_write>
                            }
                            continue;
 800149a:	e0bf      	b.n	800161c <ShellTask+0x294>
                        case 'D': // Left arrow
                            if (cursor_pos > 0) {
 800149c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f340 80bd 	ble.w	8001620 <ShellTask+0x298>
                                cursor_pos--;
 80014a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
                                shell_write(ANSI_CURSOR_BACK);
 80014b0:	4861      	ldr	r0, [pc, #388]	@ (8001638 <ShellTask+0x2b0>)
 80014b2:	f7ff fae7 	bl	8000a84 <shell_write>
                            }
                            continue;
 80014b6:	e0b3      	b.n	8001620 <ShellTask+0x298>
                            break;
 80014b8:	bf00      	nop
 80014ba:	e000      	b.n	80014be <ShellTask+0x136>
                            break;
 80014bc:	bf00      	nop
                        default:
                            continue;
                    }

                    // 清除當前行
                    for(int i=0; i < idx; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80014c4:	e007      	b.n	80014d6 <ShellTask+0x14e>
                        shell_write("\b \b");
 80014c6:	485d      	ldr	r0, [pc, #372]	@ (800163c <ShellTask+0x2b4>)
 80014c8:	f7ff fadc 	bl	8000a84 <shell_write>
                    for(int i=0; i < idx; i++) {
 80014cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014d0:	3301      	adds	r3, #1
 80014d2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80014d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80014da:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014de:	429a      	cmp	r2, r3
 80014e0:	dbf1      	blt.n	80014c6 <ShellTask+0x13e>
                    }

                    if (history_idx != -1) {
 80014e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ea:	d020      	beq.n	800152e <ShellTask+0x1a6>
                        const char* old_cmd = history_get(&cmd_history, history_idx);
 80014ec:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80014f0:	484c      	ldr	r0, [pc, #304]	@ (8001624 <ShellTask+0x29c>)
 80014f2:	f7ff fe95 	bl	8001220 <history_get>
 80014f6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
                        strncpy(buf, old_cmd, sizeof(buf));
 80014fa:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80014fe:	2280      	movs	r2, #128	@ 0x80
 8001500:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8001504:	4618      	mov	r0, r3
 8001506:	f005 fc33 	bl	8006d70 <strncpy>
                        idx = strlen(buf);
 800150a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe fe68 	bl	80001e4 <strlen>
 8001514:	4603      	mov	r3, r0
 8001516:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                        cursor_pos = idx; // 游標移動到結尾
 800151a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800151e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
                        shell_write(buf);
 8001522:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff faac 	bl	8000a84 <shell_write>
                    } else {
                        // 回到新命令輸入狀態
                        idx = 0;
                        buf[0] = '\0';
                    }
                    continue;
 800152c:	e079      	b.n	8001622 <ShellTask+0x29a>
                        idx = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                        buf[0] = '\0';
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                    continue;
 800153a:	e072      	b.n	8001622 <ShellTask+0x29a>
                }
                // 狀態機結束

                // --- 正常字元處理 ---
                if (history_idx != -1) {
 800153c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001544:	d003      	beq.n	800154e <ShellTask+0x1c6>
                    // 如果在瀏覽歷史時輸入了任何正常字元，就退出瀏覽模式
                    // 並將當前歷史命令作為基礎開始編輯
                    history_idx = -1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                }

                if (ch == '\r') {
 800154e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001552:	2b0d      	cmp	r3, #13
 8001554:	d127      	bne.n	80015a6 <ShellTask+0x21e>
                    buf[idx] = '\0';
 8001556:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800155a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800155e:	4413      	add	r3, r2
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
                    shell_write("\r\n");
 8001564:	4836      	ldr	r0, [pc, #216]	@ (8001640 <ShellTask+0x2b8>)
 8001566:	f7ff fa8d 	bl	8000a84 <shell_write>
                    if(idx > 0) {
 800156a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800156e:	2b00      	cmp	r3, #0
 8001570:	dd0c      	ble.n	800158c <ShellTask+0x204>
                        // 建立一個副本來執行，因為 strtok 會修改字串
                        char line_copy[MAX_COMMAND_LENGTH];
                        strncpy(line_copy, buf, sizeof(line_copy));
 8001572:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2280      	movs	r2, #128	@ 0x80
 800157c:	4618      	mov	r0, r3
 800157e:	f005 fbf7 	bl	8006d70 <strncpy>
                        parse_and_execute(line_copy);
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fe7a 	bl	8001280 <parse_and_execute>
                    }
                    shell_write(banner);
 800158c:	4b27      	ldr	r3, [pc, #156]	@ (800162c <ShellTask+0x2a4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fa77 	bl	8000a84 <shell_write>
                    idx = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                    history_idx = -1; // 執行後重置歷史瀏覽
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
 80015a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80015a4:	e712      	b.n	80013cc <ShellTask+0x44>
                } else if (ch == '\b' || ch == 0x7F) { // Backspace
 80015a6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d003      	beq.n	80015b6 <ShellTask+0x22e>
 80015ae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80015b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80015b4:	d10c      	bne.n	80015d0 <ShellTask+0x248>
                    if (idx > 0) {
 80015b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dd31      	ble.n	8001622 <ShellTask+0x29a>
                        idx--;
 80015be:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                        shell_write("\b \b");
 80015c8:	481c      	ldr	r0, [pc, #112]	@ (800163c <ShellTask+0x2b4>)
 80015ca:	f7ff fa5b 	bl	8000a84 <shell_write>
                    if (idx > 0) {
 80015ce:	e028      	b.n	8001622 <ShellTask+0x29a>
                    }
                } else if (idx < (int)sizeof(buf) - 1 && ch >= 32 && ch <= 126) {
 80015d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015d4:	2b7e      	cmp	r3, #126	@ 0x7e
 80015d6:	f73f aef9 	bgt.w	80013cc <ShellTask+0x44>
 80015da:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80015de:	2b1f      	cmp	r3, #31
 80015e0:	f67f aef4 	bls.w	80013cc <ShellTask+0x44>
 80015e4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80015e8:	2b7e      	cmp	r3, #126	@ 0x7e
 80015ea:	f63f aeef 	bhi.w	80013cc <ShellTask+0x44>
                    buf[idx++] = ch;
 80015ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80015f8:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80015fc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001600:	443b      	add	r3, r7
 8001602:	f803 2c98 	strb.w	r2, [r3, #-152]
                    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001606:	f107 018f 	add.w	r1, r7, #143	@ 0x8f
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	2201      	movs	r2, #1
 8001610:	4807      	ldr	r0, [pc, #28]	@ (8001630 <ShellTask+0x2a8>)
 8001612:	f001 fe21 	bl	8003258 <HAL_UART_Transmit>
 8001616:	e6d9      	b.n	80013cc <ShellTask+0x44>
                            continue;
 8001618:	bf00      	nop
 800161a:	e6d7      	b.n	80013cc <ShellTask+0x44>
                            continue;
 800161c:	bf00      	nop
 800161e:	e6d5      	b.n	80013cc <ShellTask+0x44>
                            continue;
 8001620:	bf00      	nop
            if (HAL_UART_Receive(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001622:	e6d3      	b.n	80013cc <ShellTask+0x44>
 8001624:	2000426c 	.word	0x2000426c
 8001628:	20000000 	.word	0x20000000
 800162c:	20000004 	.word	0x20000004
 8001630:	20000090 	.word	0x20000090
 8001634:	080086f0 	.word	0x080086f0
 8001638:	080086f4 	.word	0x080086f4
 800163c:	080086f8 	.word	0x080086f8
 8001640:	0800842c 	.word	0x0800842c

08001644 <ExternalTask1>:
        }
}

TaskHandle_t ext1_handle = NULL;

void ExternalTask1(void* arg) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
    shell_write("[ext1] Task started\r\n");
 800164c:	480b      	ldr	r0, [pc, #44]	@ (800167c <ExternalTask1+0x38>)
 800164e:	f7ff fa19 	bl	8000a84 <shell_write>
    while (1) {
        // 模擬任務行為
        shell_write("[ext1] Doing some work...\r\n");
 8001652:	480b      	ldr	r0, [pc, #44]	@ (8001680 <ExternalTask1+0x3c>)
 8001654:	f7ff fa16 	bl	8000a84 <shell_write>
        vTaskDelay(pdMS_TO_TICKS(2000));  // 模擬 2 秒工作
 8001658:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800165c:	f003 f8fc 	bl	8004858 <vTaskDelay>

        // 進入睡眠，等待下一次 run 指令叫醒
        shell_write("[ext1] Sleeping...\r\n");
 8001660:	4808      	ldr	r0, [pc, #32]	@ (8001684 <ExternalTask1+0x40>)
 8001662:	f7ff fa0f 	bl	8000a84 <shell_write>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001666:	f04f 31ff 	mov.w	r1, #4294967295
 800166a:	2001      	movs	r0, #1
 800166c:	f004 f918 	bl	80058a0 <ulTaskNotifyTake>

        shell_write("[ext1] Woke up again!\r\n");
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <ExternalTask1+0x44>)
 8001672:	f7ff fa07 	bl	8000a84 <shell_write>
        shell_write("[ext1] Doing some work...\r\n");
 8001676:	bf00      	nop
 8001678:	e7eb      	b.n	8001652 <ExternalTask1+0xe>
 800167a:	bf00      	nop
 800167c:	080086fc 	.word	0x080086fc
 8001680:	08008714 	.word	0x08008714
 8001684:	08008730 	.word	0x08008730
 8001688:	08008748 	.word	0x08008748

0800168c <cmd_ext>:
    // 你可以繼續擴充更多
};

extern TaskHandle_t ext1_handle;

static void cmd_ext(int argc, char** argv) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af02      	add	r7, sp, #8
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
    if (argc < 2) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b01      	cmp	r3, #1
 800169a:	dc03      	bgt.n	80016a4 <cmd_ext+0x18>
        shell_write("Usage: run <task_name>\r\n");
 800169c:	4820      	ldr	r0, [pc, #128]	@ (8001720 <cmd_ext+0x94>)
 800169e:	f7ff f9f1 	bl	8000a84 <shell_write>
        return;
 80016a2:	e039      	b.n	8001718 <cmd_ext+0x8c>
    }

    if (strcmp(argv[2], "ext1") == 0) {
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	3308      	adds	r3, #8
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	491e      	ldr	r1, [pc, #120]	@ (8001724 <cmd_ext+0x98>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fd8f 	bl	80001d0 <strcmp>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d12c      	bne.n	8001712 <cmd_ext+0x86>
        if (ext1_handle == NULL) {
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <cmd_ext+0x9c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d11d      	bne.n	80016fc <cmd_ext+0x70>
            // 還沒創建，先建立它
            if (xTaskCreate(ExternalTask1, "ext1", 256, NULL, 2, &ext1_handle) == pdPASS) {
 80016c0:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <cmd_ext+0x9c>)
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	2302      	movs	r3, #2
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ce:	4915      	ldr	r1, [pc, #84]	@ (8001724 <cmd_ext+0x98>)
 80016d0:	4816      	ldr	r0, [pc, #88]	@ (800172c <cmd_ext+0xa0>)
 80016d2:	f002 ff7f 	bl	80045d4 <xTaskCreate>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d10b      	bne.n	80016f4 <cmd_ext+0x68>
            	RegisterUserTask(ext1_handle, "Logger", 256);
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <cmd_ext+0x9c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016e4:	4912      	ldr	r1, [pc, #72]	@ (8001730 <cmd_ext+0xa4>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fa6a 	bl	8000bc0 <RegisterUserTask>
                shell_write("Task ext1 created and running...\r\n");
 80016ec:	4811      	ldr	r0, [pc, #68]	@ (8001734 <cmd_ext+0xa8>)
 80016ee:	f7ff f9c9 	bl	8000a84 <shell_write>
        } else {
            // 已建立，只是睡著了 → 叫醒
            shell_write("Task ext1 resumed...\r\n");
            xTaskNotifyGive(ext1_handle);
        }
        return;
 80016f2:	e011      	b.n	8001718 <cmd_ext+0x8c>
                shell_write("Failed to create task ext1\r\n");
 80016f4:	4810      	ldr	r0, [pc, #64]	@ (8001738 <cmd_ext+0xac>)
 80016f6:	f7ff f9c5 	bl	8000a84 <shell_write>
        return;
 80016fa:	e00d      	b.n	8001718 <cmd_ext+0x8c>
            shell_write("Task ext1 resumed...\r\n");
 80016fc:	480f      	ldr	r0, [pc, #60]	@ (800173c <cmd_ext+0xb0>)
 80016fe:	f7ff f9c1 	bl	8000a84 <shell_write>
            xTaskNotifyGive(ext1_handle);
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <cmd_ext+0x9c>)
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	2300      	movs	r3, #0
 8001708:	2202      	movs	r2, #2
 800170a:	2100      	movs	r1, #0
 800170c:	f004 f910 	bl	8005930 <xTaskGenericNotify>
        return;
 8001710:	e002      	b.n	8001718 <cmd_ext+0x8c>
    }

    shell_write("Unknown task name\r\n");
 8001712:	480b      	ldr	r0, [pc, #44]	@ (8001740 <cmd_ext+0xb4>)
 8001714:	f7ff f9b6 	bl	8000a84 <shell_write>
}
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	08008768 	.word	0x08008768
 8001724:	08008760 	.word	0x08008760
 8001728:	20004778 	.word	0x20004778
 800172c:	08001645 	.word	0x08001645
 8001730:	08008784 	.word	0x08008784
 8001734:	0800878c 	.word	0x0800878c
 8001738:	080087b0 	.word	0x080087b0
 800173c:	080087d0 	.word	0x080087d0
 8001740:	080087e8 	.word	0x080087e8

08001744 <control_single_led>:

static void control_single_led(const char* color_name, uint16_t GPIO_Pin, bool turn_on) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b094      	sub	sp, #80	@ 0x50
 8001748:	af02      	add	r7, sp, #8
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
 8001750:	4613      	mov	r3, r2
 8001752:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOD, GPIO_Pin, turn_on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001754:	787b      	ldrb	r3, [r7, #1]
 8001756:	461a      	mov	r2, r3
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <control_single_led+0x4c>)
 800175e:	f000 fdab 	bl	80022b8 <HAL_GPIO_WritePin>
    char msg[64];
    snprintf(msg, sizeof(msg),"%s LED turned %s.\r\n", color_name, turn_on ? "ON" : "OFF");
 8001762:	787b      	ldrb	r3, [r7, #1]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <control_single_led+0x28>
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <control_single_led+0x50>)
 800176a:	e000      	b.n	800176e <control_single_led+0x2a>
 800176c:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <control_single_led+0x54>)
 800176e:	f107 0008 	add.w	r0, r7, #8
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a09      	ldr	r2, [pc, #36]	@ (800179c <control_single_led+0x58>)
 8001778:	2140      	movs	r1, #64	@ 0x40
 800177a:	f005 fa21 	bl	8006bc0 <sniprintf>
    shell_write(msg);
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff f97e 	bl	8000a84 <shell_write>
}
 8001788:	bf00      	nop
 800178a:	3748      	adds	r7, #72	@ 0x48
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40020c00 	.word	0x40020c00
 8001794:	080087fc 	.word	0x080087fc
 8001798:	08008800 	.word	0x08008800
 800179c:	08008804 	.word	0x08008804

080017a0 <cmd_led>:

static void cmd_led(int argc, char** argv) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
    bool turn_on = true;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
    if (argc < 2) {
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	dc06      	bgt.n	80017c2 <cmd_led+0x22>
        shell_write("Usage: led -<color> [on|off]\r\n");
 80017b4:	483f      	ldr	r0, [pc, #252]	@ (80018b4 <cmd_led+0x114>)
 80017b6:	f7ff f965 	bl	8000a84 <shell_write>
        shell_write("Colors: -red, -blue, -green, -orange\r\n");
 80017ba:	483f      	ldr	r0, [pc, #252]	@ (80018b8 <cmd_led+0x118>)
 80017bc:	f7ff f962 	bl	8000a84 <shell_write>
        return;
 80017c0:	e075      	b.n	80018ae <cmd_led+0x10e>
    }

    if (argc == 3) {
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d11d      	bne.n	8001804 <cmd_led+0x64>
        if (strcmp(argv[2], "on") == 0) {
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	3308      	adds	r3, #8
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	493b      	ldr	r1, [pc, #236]	@ (80018bc <cmd_led+0x11c>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fcfd 	bl	80001d0 <strcmp>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <cmd_led+0x42>
            turn_on = true;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e01a      	b.n	8001818 <cmd_led+0x78>
        } else if (strcmp(argv[2], "off") == 0) {
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	3308      	adds	r3, #8
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4935      	ldr	r1, [pc, #212]	@ (80018c0 <cmd_led+0x120>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fcf0 	bl	80001d0 <strcmp>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <cmd_led+0x5c>
            turn_on = false;
 80017f6:	2300      	movs	r3, #0
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	e00d      	b.n	8001818 <cmd_led+0x78>
        } else {
            shell_write("Invalid state argument. Use 'on' or 'off'.\r\n");
 80017fc:	4831      	ldr	r0, [pc, #196]	@ (80018c4 <cmd_led+0x124>)
 80017fe:	f7ff f941 	bl	8000a84 <shell_write>
            return;
 8001802:	e054      	b.n	80018ae <cmd_led+0x10e>
        }
    } else if (argc > 3) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b03      	cmp	r3, #3
 8001808:	dd06      	ble.n	8001818 <cmd_led+0x78>
        shell_write("Too many arguments.\r\n");
 800180a:	482f      	ldr	r0, [pc, #188]	@ (80018c8 <cmd_led+0x128>)
 800180c:	f7ff f93a 	bl	8000a84 <shell_write>
        shell_write("Usage: led -<color> [on|off]\r\n");
 8001810:	4828      	ldr	r0, [pc, #160]	@ (80018b4 <cmd_led+0x114>)
 8001812:	f7ff f937 	bl	8000a84 <shell_write>
        return;
 8001816:	e04a      	b.n	80018ae <cmd_led+0x10e>
    }

    if (strcmp(argv[1], "-green") == 0) {
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	3304      	adds	r3, #4
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	492b      	ldr	r1, [pc, #172]	@ (80018cc <cmd_led+0x12c>)
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fcd5 	bl	80001d0 <strcmp>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d107      	bne.n	800183c <cmd_led+0x9c>
        control_single_led("Green", GPIO_PIN_12, turn_on);
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	461a      	mov	r2, r3
 8001830:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001834:	4826      	ldr	r0, [pc, #152]	@ (80018d0 <cmd_led+0x130>)
 8001836:	f7ff ff85 	bl	8001744 <control_single_led>
 800183a:	e038      	b.n	80018ae <cmd_led+0x10e>
    } else if (strcmp(argv[1], "-orange") == 0) {
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	3304      	adds	r3, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4924      	ldr	r1, [pc, #144]	@ (80018d4 <cmd_led+0x134>)
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fcc3 	bl	80001d0 <strcmp>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <cmd_led+0xc0>
        control_single_led("Orange", GPIO_PIN_13, turn_on);
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	461a      	mov	r2, r3
 8001854:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001858:	481f      	ldr	r0, [pc, #124]	@ (80018d8 <cmd_led+0x138>)
 800185a:	f7ff ff73 	bl	8001744 <control_single_led>
 800185e:	e026      	b.n	80018ae <cmd_led+0x10e>
    } else if (strcmp(argv[1], "-red") == 0) {
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	3304      	adds	r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	491d      	ldr	r1, [pc, #116]	@ (80018dc <cmd_led+0x13c>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fcb1 	bl	80001d0 <strcmp>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d107      	bne.n	8001884 <cmd_led+0xe4>
        control_single_led("Red", GPIO_PIN_14, turn_on);
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	461a      	mov	r2, r3
 8001878:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800187c:	4818      	ldr	r0, [pc, #96]	@ (80018e0 <cmd_led+0x140>)
 800187e:	f7ff ff61 	bl	8001744 <control_single_led>
 8001882:	e014      	b.n	80018ae <cmd_led+0x10e>
    } else if (strcmp(argv[1], "-blue") == 0) {
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	3304      	adds	r3, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4916      	ldr	r1, [pc, #88]	@ (80018e4 <cmd_led+0x144>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fc9f 	bl	80001d0 <strcmp>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <cmd_led+0x108>
        control_single_led("Blue", GPIO_PIN_15, turn_on);
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	461a      	mov	r2, r3
 800189c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018a0:	4811      	ldr	r0, [pc, #68]	@ (80018e8 <cmd_led+0x148>)
 80018a2:	f7ff ff4f 	bl	8001744 <control_single_led>
 80018a6:	e002      	b.n	80018ae <cmd_led+0x10e>
    } else {
        shell_write("Unknown LED color. Use -green, -orange, -red, or -blue.\r\n");
 80018a8:	4810      	ldr	r0, [pc, #64]	@ (80018ec <cmd_led+0x14c>)
 80018aa:	f7ff f8eb 	bl	8000a84 <shell_write>
    }
}
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	08008818 	.word	0x08008818
 80018b8:	08008838 	.word	0x08008838
 80018bc:	08008530 	.word	0x08008530
 80018c0:	08008540 	.word	0x08008540
 80018c4:	08008860 	.word	0x08008860
 80018c8:	08008890 	.word	0x08008890
 80018cc:	080088a8 	.word	0x080088a8
 80018d0:	080088b0 	.word	0x080088b0
 80018d4:	080088b8 	.word	0x080088b8
 80018d8:	080088c0 	.word	0x080088c0
 80018dc:	080088c8 	.word	0x080088c8
 80018e0:	080088d0 	.word	0x080088d0
 80018e4:	080088d4 	.word	0x080088d4
 80018e8:	080088dc 	.word	0x080088dc
 80018ec:	080088e4 	.word	0x080088e4

080018f0 <cmd_clear>:

static cmd_clear (int argc, char** argv) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
    // ESC 的 ASCII 值 0x1B
    const char * clear_sequence = "\x1B[H\x1B[2J";  // ESC[H (光標歸位)  + ESC[2J  (清除螢幕)
 80018fa:	4b04      	ldr	r3, [pc, #16]	@ (800190c <cmd_clear+0x1c>)
 80018fc:	60fb      	str	r3, [r7, #12]
    shell_write(clear_sequence);
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff f8c0 	bl	8000a84 <shell_write>
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	08008920 	.word	0x08008920

08001910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <HAL_MspInit+0x4c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	4a0f      	ldr	r2, [pc, #60]	@ (800195c <HAL_MspInit+0x4c>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001924:	6453      	str	r3, [r2, #68]	@ 0x44
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <HAL_MspInit+0x4c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <HAL_MspInit+0x4c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	4a08      	ldr	r2, [pc, #32]	@ (800195c <HAL_MspInit+0x4c>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001940:	6413      	str	r3, [r2, #64]	@ 0x40
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_MspInit+0x4c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	@ 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a19      	ldr	r2, [pc, #100]	@ (80019e4 <HAL_UART_MspInit+0x84>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d12b      	bne.n	80019da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b18      	ldr	r3, [pc, #96]	@ (80019e8 <HAL_UART_MspInit+0x88>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a17      	ldr	r2, [pc, #92]	@ (80019e8 <HAL_UART_MspInit+0x88>)
 800198c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_UART_MspInit+0x88>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <HAL_UART_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a10      	ldr	r2, [pc, #64]	@ (80019e8 <HAL_UART_MspInit+0x88>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <HAL_UART_MspInit+0x88>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ba:	230c      	movs	r3, #12
 80019bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ca:	2307      	movs	r3, #7
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	@ (80019ec <HAL_UART_MspInit+0x8c>)
 80019d6:	f000 fad3 	bl	8001f80 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80019da:	bf00      	nop
 80019dc:	3728      	adds	r7, #40	@ 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40004400 	.word	0x40004400
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020000 	.word	0x40020000

080019f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08e      	sub	sp, #56	@ 0x38
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	4b33      	ldr	r3, [pc, #204]	@ (8001ad4 <HAL_InitTick+0xe4>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	4a32      	ldr	r2, [pc, #200]	@ (8001ad4 <HAL_InitTick+0xe4>)
 8001a0a:	f043 0320 	orr.w	r3, r3, #32
 8001a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a10:	4b30      	ldr	r3, [pc, #192]	@ (8001ad4 <HAL_InitTick+0xe4>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a1c:	f107 0210 	add.w	r2, r7, #16
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 f8f8 	bl	8002c1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d103      	bne.n	8001a3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a36:	f001 f8c9 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8001a3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a3c:	e004      	b.n	8001a48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a3e:	f001 f8c5 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8001a42:	4603      	mov	r3, r0
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4a:	4a23      	ldr	r2, [pc, #140]	@ (8001ad8 <HAL_InitTick+0xe8>)
 8001a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a50:	0c9b      	lsrs	r3, r3, #18
 8001a52:	3b01      	subs	r3, #1
 8001a54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001a56:	4b21      	ldr	r3, [pc, #132]	@ (8001adc <HAL_InitTick+0xec>)
 8001a58:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <HAL_InitTick+0xf0>)
 8001a5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <HAL_InitTick+0xec>)
 8001a5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a62:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001a64:	4a1d      	ldr	r2, [pc, #116]	@ (8001adc <HAL_InitTick+0xec>)
 8001a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a68:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <HAL_InitTick+0xec>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a70:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <HAL_InitTick+0xec>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_InitTick+0xec>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001a7c:	4817      	ldr	r0, [pc, #92]	@ (8001adc <HAL_InitTick+0xec>)
 8001a7e:	f001 f8ff 	bl	8002c80 <HAL_TIM_Base_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d11b      	bne.n	8001ac8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001a90:	4812      	ldr	r0, [pc, #72]	@ (8001adc <HAL_InitTick+0xec>)
 8001a92:	f001 f94f 	bl	8002d34 <HAL_TIM_Base_Start_IT>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d111      	bne.n	8001ac8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001aa4:	2037      	movs	r0, #55	@ 0x37
 8001aa6:	f000 fa5d 	bl	8001f64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d808      	bhi.n	8001ac2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	2037      	movs	r0, #55	@ 0x37
 8001ab6:	f000 fa39 	bl	8001f2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <HAL_InitTick+0xf4>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	e002      	b.n	8001ac8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3738      	adds	r7, #56	@ 0x38
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	431bde83 	.word	0x431bde83
 8001adc:	2000477c 	.word	0x2000477c
 8001ae0:	40001400 	.word	0x40001400
 8001ae4:	2000000c 	.word	0x2000000c

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <NMI_Handler+0x4>

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <MemManage_Handler+0x4>

08001b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <TIM7_IRQHandler+0x10>)
 8001b26:	f001 f975 	bl	8002e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000477c 	.word	0x2000477c

08001b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return 1;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_kill>:

int _kill(int pid, int sig)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b4e:	f005 f9c5 	bl	8006edc <__errno>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2216      	movs	r2, #22
 8001b56:	601a      	str	r2, [r3, #0]
  return -1;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_exit>:

void _exit (int status)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ffe7 	bl	8001b44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b76:	bf00      	nop
 8001b78:	e7fd      	b.n	8001b76 <_exit+0x12>

08001b7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e00a      	b.n	8001ba2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b8c:	f3af 8000 	nop.w
 8001b90:	4601      	mov	r1, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	60ba      	str	r2, [r7, #8]
 8001b98:	b2ca      	uxtb	r2, r1
 8001b9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbf0      	blt.n	8001b8c <_read+0x12>
  }

  return len;
 8001baa:	687b      	ldr	r3, [r7, #4]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e009      	b.n	8001bda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	60ba      	str	r2, [r7, #8]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	dbf1      	blt.n	8001bc6 <_write+0x12>
  }
  return len;
 8001be2:	687b      	ldr	r3, [r7, #4]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_close>:

int _close(int file)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c14:	605a      	str	r2, [r3, #4]
  return 0;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_isatty>:

int _isatty(int file)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c2c:	2301      	movs	r3, #1
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c5c:	4a14      	ldr	r2, [pc, #80]	@ (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	@ (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c84:	f005 f92a 	bl	8006edc <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	@ (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20020000 	.word	0x20020000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	200047c4 	.word	0x200047c4
 8001cbc:	200176c0 	.word	0x200176c0

08001cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <SystemInit+0x20>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cca:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <SystemInit+0x20>)
 8001ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ce8:	f7ff ffea 	bl	8001cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cec:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cee:	490d      	ldr	r1, [pc, #52]	@ (8001d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d04:	4c0a      	ldr	r4, [pc, #40]	@ (8001d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d12:	f005 f8e9 	bl	8006ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d16:	f7fe fc53 	bl	80005c0 <main>
  bx  lr    
 8001d1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d28:	08008b14 	.word	0x08008b14
  ldr r2, =_sbss
 8001d2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d30:	200176c0 	.word	0x200176c0

08001d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC_IRQHandler>
	...

08001d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_Init+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <HAL_Init+0x40>)
 8001d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_Init+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <HAL_Init+0x40>)
 8001d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_Init+0x40>)
 8001d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 f8d8 	bl	8001f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff fe42 	bl	80019f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff fdd0 	bl	8001910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00

08001d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_IncTick+0x20>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_IncTick+0x24>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	@ (8001da0 <HAL_IncTick+0x24>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000010 	.word	0x20000010
 8001da0:	200047c8 	.word	0x200047c8

08001da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b03      	ldr	r3, [pc, #12]	@ (8001db8 <HAL_GetTick+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	200047c8 	.word	0x200047c8

08001dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <__NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db0b      	blt.n	8001e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4907      	ldr	r1, [pc, #28]	@ (8001e58 <__NVIC_EnableIRQ+0x38>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	2001      	movs	r0, #1
 8001e42:	fa00 f202 	lsl.w	r2, r0, r2
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000e100 	.word	0xe000e100

08001e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0a      	blt.n	8001e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <__NVIC_SetPriority+0x4c>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e84:	e00a      	b.n	8001e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	@ (8001eac <__NVIC_SetPriority+0x50>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	3b04      	subs	r3, #4
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	761a      	strb	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	@ 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f1c3 0307 	rsb	r3, r3, #7
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	bf28      	it	cs
 8001ece:	2304      	movcs	r3, #4
 8001ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d902      	bls.n	8001ee0 <NVIC_EncodePriority+0x30>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b03      	subs	r3, #3
 8001ede:	e000      	b.n	8001ee2 <NVIC_EncodePriority+0x32>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	4313      	orrs	r3, r2
         );
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	@ 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ff4c 	bl	8001dbc <__NVIC_SetPriorityGrouping>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f3e:	f7ff ff61 	bl	8001e04 <__NVIC_GetPriorityGrouping>
 8001f42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	6978      	ldr	r0, [r7, #20]
 8001f4a:	f7ff ffb1 	bl	8001eb0 <NVIC_EncodePriority>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff80 	bl	8001e5c <__NVIC_SetPriority>
}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff54 	bl	8001e20 <__NVIC_EnableIRQ>
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	e16b      	b.n	8002274 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	f040 815a 	bne.w	800226e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d005      	beq.n	8001fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d130      	bne.n	8002034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 0201 	and.w	r2, r3, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b03      	cmp	r3, #3
 800203e:	d017      	beq.n	8002070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d123      	bne.n	80020c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	08da      	lsrs	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3208      	adds	r2, #8
 8002084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	220f      	movs	r2, #15
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	08da      	lsrs	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3208      	adds	r2, #8
 80020be:	69b9      	ldr	r1, [r7, #24]
 80020c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0203 	and.w	r2, r3, #3
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80b4 	beq.w	800226e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b60      	ldr	r3, [pc, #384]	@ (800228c <HAL_GPIO_Init+0x30c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	4a5f      	ldr	r2, [pc, #380]	@ (800228c <HAL_GPIO_Init+0x30c>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002114:	6453      	str	r3, [r2, #68]	@ 0x44
 8002116:	4b5d      	ldr	r3, [pc, #372]	@ (800228c <HAL_GPIO_Init+0x30c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002122:	4a5b      	ldr	r2, [pc, #364]	@ (8002290 <HAL_GPIO_Init+0x310>)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	220f      	movs	r2, #15
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a52      	ldr	r2, [pc, #328]	@ (8002294 <HAL_GPIO_Init+0x314>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d02b      	beq.n	80021a6 <HAL_GPIO_Init+0x226>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a51      	ldr	r2, [pc, #324]	@ (8002298 <HAL_GPIO_Init+0x318>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d025      	beq.n	80021a2 <HAL_GPIO_Init+0x222>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a50      	ldr	r2, [pc, #320]	@ (800229c <HAL_GPIO_Init+0x31c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01f      	beq.n	800219e <HAL_GPIO_Init+0x21e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4f      	ldr	r2, [pc, #316]	@ (80022a0 <HAL_GPIO_Init+0x320>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d019      	beq.n	800219a <HAL_GPIO_Init+0x21a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4e      	ldr	r2, [pc, #312]	@ (80022a4 <HAL_GPIO_Init+0x324>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d013      	beq.n	8002196 <HAL_GPIO_Init+0x216>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4d      	ldr	r2, [pc, #308]	@ (80022a8 <HAL_GPIO_Init+0x328>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00d      	beq.n	8002192 <HAL_GPIO_Init+0x212>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4c      	ldr	r2, [pc, #304]	@ (80022ac <HAL_GPIO_Init+0x32c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <HAL_GPIO_Init+0x20e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4b      	ldr	r2, [pc, #300]	@ (80022b0 <HAL_GPIO_Init+0x330>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d101      	bne.n	800218a <HAL_GPIO_Init+0x20a>
 8002186:	2307      	movs	r3, #7
 8002188:	e00e      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 800218a:	2308      	movs	r3, #8
 800218c:	e00c      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 800218e:	2306      	movs	r3, #6
 8002190:	e00a      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 8002192:	2305      	movs	r3, #5
 8002194:	e008      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 8002196:	2304      	movs	r3, #4
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 800219a:	2303      	movs	r3, #3
 800219c:	e004      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 800219e:	2302      	movs	r3, #2
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_GPIO_Init+0x228>
 80021a6:	2300      	movs	r3, #0
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	f002 0203 	and.w	r2, r2, #3
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	4093      	lsls	r3, r2
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b8:	4935      	ldr	r1, [pc, #212]	@ (8002290 <HAL_GPIO_Init+0x310>)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021c6:	4b3b      	ldr	r3, [pc, #236]	@ (80022b4 <HAL_GPIO_Init+0x334>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ea:	4a32      	ldr	r2, [pc, #200]	@ (80022b4 <HAL_GPIO_Init+0x334>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f0:	4b30      	ldr	r3, [pc, #192]	@ (80022b4 <HAL_GPIO_Init+0x334>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002214:	4a27      	ldr	r2, [pc, #156]	@ (80022b4 <HAL_GPIO_Init+0x334>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800221a:	4b26      	ldr	r3, [pc, #152]	@ (80022b4 <HAL_GPIO_Init+0x334>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800223e:	4a1d      	ldr	r2, [pc, #116]	@ (80022b4 <HAL_GPIO_Init+0x334>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002244:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <HAL_GPIO_Init+0x334>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002268:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <HAL_GPIO_Init+0x334>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3301      	adds	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	f67f ae90 	bls.w	8001f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3724      	adds	r7, #36	@ 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40013800 	.word	0x40013800
 8002294:	40020000 	.word	0x40020000
 8002298:	40020400 	.word	0x40020400
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020c00 	.word	0x40020c00
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40021400 	.word	0x40021400
 80022ac:	40021800 	.word	0x40021800
 80022b0:	40021c00 	.word	0x40021c00
 80022b4:	40013c00 	.word	0x40013c00

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022d4:	e003      	b.n	80022de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	041a      	lsls	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e267      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d075      	beq.n	80023f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800230a:	4b88      	ldr	r3, [pc, #544]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d00c      	beq.n	8002330 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4b85      	ldr	r3, [pc, #532]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800231e:	2b08      	cmp	r3, #8
 8002320:	d112      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002322:	4b82      	ldr	r3, [pc, #520]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800232a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800232e:	d10b      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	4b7e      	ldr	r3, [pc, #504]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d05b      	beq.n	80023f4 <HAL_RCC_OscConfig+0x108>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d157      	bne.n	80023f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e242      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x74>
 8002352:	4b76      	ldr	r3, [pc, #472]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a75      	ldr	r2, [pc, #468]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e01d      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x98>
 800236a:	4b70      	ldr	r3, [pc, #448]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6f      	ldr	r2, [pc, #444]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b6d      	ldr	r3, [pc, #436]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6c      	ldr	r2, [pc, #432]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002384:	4b69      	ldr	r3, [pc, #420]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a68      	ldr	r2, [pc, #416]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800238a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b66      	ldr	r3, [pc, #408]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a65      	ldr	r2, [pc, #404]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800239a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff fcfe 	bl	8001da4 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ac:	f7ff fcfa 	bl	8001da4 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	@ 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e207      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b5b      	ldr	r3, [pc, #364]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0xc0>
 80023ca:	e014      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff fcea 	bl	8001da4 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff fce6 	bl	8001da4 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	@ 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1f3      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	4b51      	ldr	r3, [pc, #324]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0xe8>
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d063      	beq.n	80024ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002402:	4b4a      	ldr	r3, [pc, #296]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002416:	2b08      	cmp	r3, #8
 8002418:	d11c      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b44      	ldr	r3, [pc, #272]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	4b41      	ldr	r3, [pc, #260]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e1c7      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b3b      	ldr	r3, [pc, #236]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4937      	ldr	r1, [pc, #220]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	e03a      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245c:	4b34      	ldr	r3, [pc, #208]	@ (8002530 <HAL_RCC_OscConfig+0x244>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7ff fc9f 	bl	8001da4 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246a:	f7ff fc9b 	bl	8001da4 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1a8      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b28      	ldr	r3, [pc, #160]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4925      	ldr	r1, [pc, #148]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	4b24      	ldr	r3, [pc, #144]	@ (8002530 <HAL_RCC_OscConfig+0x244>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fc7e 	bl	8001da4 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7ff fc7a 	bl	8001da4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e187      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	4b1b      	ldr	r3, [pc, #108]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d036      	beq.n	8002544 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d016      	beq.n	800250c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <HAL_RCC_OscConfig+0x248>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7ff fc5e 	bl	8001da4 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ec:	f7ff fc5a 	bl	8001da4 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e167      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x200>
 800250a:	e01b      	b.n	8002544 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250c:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_RCC_OscConfig+0x248>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7ff fc47 	bl	8001da4 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	e00e      	b.n	8002538 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251a:	f7ff fc43 	bl	8001da4 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d907      	bls.n	8002538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e150      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
 800252c:	40023800 	.word	0x40023800
 8002530:	42470000 	.word	0x42470000
 8002534:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b88      	ldr	r3, [pc, #544]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800253a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ea      	bne.n	800251a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8097 	beq.w	8002680 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b81      	ldr	r3, [pc, #516]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4b7d      	ldr	r3, [pc, #500]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	4a7c      	ldr	r2, [pc, #496]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	@ 0x40
 8002572:	4b7a      	ldr	r3, [pc, #488]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	4b77      	ldr	r3, [pc, #476]	@ (8002760 <HAL_RCC_OscConfig+0x474>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d118      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258e:	4b74      	ldr	r3, [pc, #464]	@ (8002760 <HAL_RCC_OscConfig+0x474>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a73      	ldr	r2, [pc, #460]	@ (8002760 <HAL_RCC_OscConfig+0x474>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259a:	f7ff fc03 	bl	8001da4 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a2:	f7ff fbff 	bl	8001da4 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e10c      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002760 <HAL_RCC_OscConfig+0x474>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2ea>
 80025c8:	4b64      	ldr	r3, [pc, #400]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025cc:	4a63      	ldr	r2, [pc, #396]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d4:	e01c      	b.n	8002610 <HAL_RCC_OscConfig+0x324>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x30c>
 80025de:	4b5f      	ldr	r3, [pc, #380]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e2:	4a5e      	ldr	r2, [pc, #376]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ea:	4b5c      	ldr	r3, [pc, #368]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ee:	4a5b      	ldr	r2, [pc, #364]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0x324>
 80025f8:	4b58      	ldr	r3, [pc, #352]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fc:	4a57      	ldr	r2, [pc, #348]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	@ 0x70
 8002604:	4b55      	ldr	r3, [pc, #340]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002608:	4a54      	ldr	r2, [pc, #336]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d015      	beq.n	8002644 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7ff fbc4 	bl	8001da4 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7ff fbc0 	bl	8001da4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0cb      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002636:	4b49      	ldr	r3, [pc, #292]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0ee      	beq.n	8002620 <HAL_RCC_OscConfig+0x334>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7ff fbae 	bl	8001da4 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	e00a      	b.n	8002662 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264c:	f7ff fbaa 	bl	8001da4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0b5      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002662:	4b3e      	ldr	r3, [pc, #248]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ee      	bne.n	800264c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002674:	4b39      	ldr	r3, [pc, #228]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	4a38      	ldr	r2, [pc, #224]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800267a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800267e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80a1 	beq.w	80027cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268a:	4b34      	ldr	r3, [pc, #208]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d05c      	beq.n	8002750 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d141      	bne.n	8002722 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b31      	ldr	r3, [pc, #196]	@ (8002764 <HAL_RCC_OscConfig+0x478>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fb7e 	bl	8001da4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7ff fb7a 	bl	8001da4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e087      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b27      	ldr	r3, [pc, #156]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	491b      	ldr	r1, [pc, #108]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <HAL_RCC_OscConfig+0x478>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7ff fb53 	bl	8001da4 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7ff fb4f 	bl	8001da4 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e05c      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x416>
 8002720:	e054      	b.n	80027cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <HAL_RCC_OscConfig+0x478>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff fb3c 	bl	8001da4 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7ff fb38 	bl	8001da4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e045      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x444>
 800274e:	e03d      	b.n	80027cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e038      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000
 8002764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002768:	4b1b      	ldr	r3, [pc, #108]	@ (80027d8 <HAL_RCC_OscConfig+0x4ec>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d028      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d121      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d11a      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800279e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d111      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	3b01      	subs	r3, #1
 80027b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800

080027dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0cc      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f0:	4b68      	ldr	r3, [pc, #416]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d90c      	bls.n	8002818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b65      	ldr	r3, [pc, #404]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b63      	ldr	r3, [pc, #396]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0b8      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002830:	4b59      	ldr	r3, [pc, #356]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a58      	ldr	r2, [pc, #352]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800283a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002848:	4b53      	ldr	r3, [pc, #332]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a52      	ldr	r2, [pc, #328]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b50      	ldr	r3, [pc, #320]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	494d      	ldr	r1, [pc, #308]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d044      	beq.n	80028fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b47      	ldr	r3, [pc, #284]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d119      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e07f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d003      	beq.n	800289a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	2b03      	cmp	r3, #3
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289a:	4b3f      	ldr	r3, [pc, #252]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e067      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ba:	4b37      	ldr	r3, [pc, #220]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4934      	ldr	r1, [pc, #208]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028cc:	f7ff fa6a 	bl	8001da4 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7ff fa66 	bl	8001da4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e04f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 020c 	and.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d1eb      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028fc:	4b25      	ldr	r3, [pc, #148]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d20c      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b22      	ldr	r3, [pc, #136]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e032      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4916      	ldr	r1, [pc, #88]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294e:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	490e      	ldr	r1, [pc, #56]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002962:	f000 f821 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002966:	4602      	mov	r2, r0
 8002968:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	490a      	ldr	r1, [pc, #40]	@ (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	5ccb      	ldrb	r3, [r1, r3]
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800297e:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff f834 	bl	80019f0 <HAL_InitTick>

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00
 8002998:	40023800 	.word	0x40023800
 800299c:	08008a0c 	.word	0x08008a0c
 80029a0:	20000008 	.word	0x20000008
 80029a4:	2000000c 	.word	0x2000000c

080029a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ac:	b094      	sub	sp, #80	@ 0x50
 80029ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c0:	4b79      	ldr	r3, [pc, #484]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d00d      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x40>
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	f200 80e1 	bhi.w	8002b94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x34>
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029da:	e0db      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b73      	ldr	r3, [pc, #460]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x204>)
 80029de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029e0:	e0db      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029e2:	4b73      	ldr	r3, [pc, #460]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x208>)
 80029e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029e6:	e0d8      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d063      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fe:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	099b      	lsrs	r3, r3, #6
 8002a04:	2200      	movs	r2, #0
 8002a06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a12:	2300      	movs	r3, #0
 8002a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	462b      	mov	r3, r5
 8002a1e:	f04f 0000 	mov.w	r0, #0
 8002a22:	f04f 0100 	mov.w	r1, #0
 8002a26:	0159      	lsls	r1, r3, #5
 8002a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a2c:	0150      	lsls	r0, r2, #5
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4621      	mov	r1, r4
 8002a34:	1a51      	subs	r1, r2, r1
 8002a36:	6139      	str	r1, [r7, #16]
 8002a38:	4629      	mov	r1, r5
 8002a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a4c:	4659      	mov	r1, fp
 8002a4e:	018b      	lsls	r3, r1, #6
 8002a50:	4651      	mov	r1, sl
 8002a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a56:	4651      	mov	r1, sl
 8002a58:	018a      	lsls	r2, r1, #6
 8002a5a:	4651      	mov	r1, sl
 8002a5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a60:	4659      	mov	r1, fp
 8002a62:	eb63 0901 	sbc.w	r9, r3, r1
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a7a:	4690      	mov	r8, r2
 8002a7c:	4699      	mov	r9, r3
 8002a7e:	4623      	mov	r3, r4
 8002a80:	eb18 0303 	adds.w	r3, r8, r3
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	462b      	mov	r3, r5
 8002a88:	eb49 0303 	adc.w	r3, r9, r3
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	024b      	lsls	r3, r1, #9
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	024a      	lsls	r2, r1, #9
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aae:	2200      	movs	r2, #0
 8002ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ab4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ab8:	f7fd fbf2 	bl	80002a0 <__aeabi_uldivmod>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ac4:	e058      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac6:	4b38      	ldr	r3, [pc, #224]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	099b      	lsrs	r3, r3, #6
 8002acc:	2200      	movs	r2, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8002adc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	f04f 0000 	mov.w	r0, #0
 8002ae8:	f04f 0100 	mov.w	r1, #0
 8002aec:	0159      	lsls	r1, r3, #5
 8002aee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af2:	0150      	lsls	r0, r2, #5
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4641      	mov	r1, r8
 8002afa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002afe:	4649      	mov	r1, r9
 8002b00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b18:	ebb2 040a 	subs.w	r4, r2, sl
 8002b1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	00eb      	lsls	r3, r5, #3
 8002b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2e:	00e2      	lsls	r2, r4, #3
 8002b30:	4614      	mov	r4, r2
 8002b32:	461d      	mov	r5, r3
 8002b34:	4643      	mov	r3, r8
 8002b36:	18e3      	adds	r3, r4, r3
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	eb45 0303 	adc.w	r3, r5, r3
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b4e:	4629      	mov	r1, r5
 8002b50:	028b      	lsls	r3, r1, #10
 8002b52:	4621      	mov	r1, r4
 8002b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b58:	4621      	mov	r1, r4
 8002b5a:	028a      	lsls	r2, r1, #10
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b62:	2200      	movs	r2, #0
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	61fa      	str	r2, [r7, #28]
 8002b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b6c:	f7fd fb98 	bl	80002a0 <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4613      	mov	r3, r2
 8002b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	0c1b      	lsrs	r3, r3, #16
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	3301      	adds	r3, #1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x204>)
 8002b96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3750      	adds	r7, #80	@ 0x50
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	00f42400 	.word	0x00f42400
 8002bb0:	007a1200 	.word	0x007a1200

08002bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb8:	4b03      	ldr	r3, [pc, #12]	@ (8002bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000008 	.word	0x20000008

08002bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd0:	f7ff fff0 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	0a9b      	lsrs	r3, r3, #10
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	@ (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	08008a1c 	.word	0x08008a1c

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf8:	f7ff ffdc 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0b5b      	lsrs	r3, r3, #13
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	@ (8002c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08008a1c 	.word	0x08008a1c

08002c1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	220f      	movs	r2, #15
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c2c:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c38:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c50:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c5e:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <HAL_RCC_GetClockConfig+0x60>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0207 	and.w	r2, r3, #7
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	601a      	str	r2, [r3, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40023c00 	.word	0x40023c00

08002c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e041      	b.n	8002d16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f839 	bl	8002d1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	f000 f9c0 	bl	8003044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d001      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e04e      	b.n	8002dea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a23      	ldr	r2, [pc, #140]	@ (8002df8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d022      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d76:	d01d      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dfc <HAL_TIM_Base_Start_IT+0xc8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d018      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1e      	ldr	r2, [pc, #120]	@ (8002e00 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d013      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1c      	ldr	r2, [pc, #112]	@ (8002e04 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00e      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002e08 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a19      	ldr	r2, [pc, #100]	@ (8002e0c <HAL_TIM_Base_Start_IT+0xd8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a18      	ldr	r2, [pc, #96]	@ (8002e10 <HAL_TIM_Base_Start_IT+0xdc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d111      	bne.n	8002dd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d010      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	e007      	b.n	8002de8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40010400 	.word	0x40010400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40001800 	.word	0x40001800

08002e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d020      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01b      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0202 	mvn.w	r2, #2
 8002e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8d2 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002e64:	e005      	b.n	8002e72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8c4 	bl	8002ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f8d5 	bl	800301c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d020      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01b      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0204 	mvn.w	r2, #4
 8002e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f8ac 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f89e 	bl	8002ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f8af 	bl	800301c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d020      	beq.n	8002f10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0208 	mvn.w	r2, #8
 8002ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f886 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f878 	bl	8002ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f889 	bl	800301c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d020      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01b      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0210 	mvn.w	r2, #16
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2208      	movs	r2, #8
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f860 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f852 	bl	8002ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f863 	bl	800301c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00c      	beq.n	8002f80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0201 	mvn.w	r2, #1
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fd fd5e 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00c      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f900 	bl	80031a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00c      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f834 	bl	8003030 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00c      	beq.n	8002fec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0220 	mvn.w	r2, #32
 8002fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8d2 	bl	8003190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a43      	ldr	r2, [pc, #268]	@ (8003164 <TIM_Base_SetConfig+0x120>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <TIM_Base_SetConfig+0x40>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003062:	d00f      	beq.n	8003084 <TIM_Base_SetConfig+0x40>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a40      	ldr	r2, [pc, #256]	@ (8003168 <TIM_Base_SetConfig+0x124>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00b      	beq.n	8003084 <TIM_Base_SetConfig+0x40>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a3f      	ldr	r2, [pc, #252]	@ (800316c <TIM_Base_SetConfig+0x128>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d007      	beq.n	8003084 <TIM_Base_SetConfig+0x40>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a3e      	ldr	r2, [pc, #248]	@ (8003170 <TIM_Base_SetConfig+0x12c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d003      	beq.n	8003084 <TIM_Base_SetConfig+0x40>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a3d      	ldr	r2, [pc, #244]	@ (8003174 <TIM_Base_SetConfig+0x130>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d108      	bne.n	8003096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800308a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a32      	ldr	r2, [pc, #200]	@ (8003164 <TIM_Base_SetConfig+0x120>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d02b      	beq.n	80030f6 <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a4:	d027      	beq.n	80030f6 <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003168 <TIM_Base_SetConfig+0x124>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d023      	beq.n	80030f6 <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a2e      	ldr	r2, [pc, #184]	@ (800316c <TIM_Base_SetConfig+0x128>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d01f      	beq.n	80030f6 <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003170 <TIM_Base_SetConfig+0x12c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01b      	beq.n	80030f6 <TIM_Base_SetConfig+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003174 <TIM_Base_SetConfig+0x130>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d017      	beq.n	80030f6 <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003178 <TIM_Base_SetConfig+0x134>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a2a      	ldr	r2, [pc, #168]	@ (800317c <TIM_Base_SetConfig+0x138>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00f      	beq.n	80030f6 <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a29      	ldr	r2, [pc, #164]	@ (8003180 <TIM_Base_SetConfig+0x13c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00b      	beq.n	80030f6 <TIM_Base_SetConfig+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a28      	ldr	r2, [pc, #160]	@ (8003184 <TIM_Base_SetConfig+0x140>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a27      	ldr	r2, [pc, #156]	@ (8003188 <TIM_Base_SetConfig+0x144>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d003      	beq.n	80030f6 <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a26      	ldr	r2, [pc, #152]	@ (800318c <TIM_Base_SetConfig+0x148>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d108      	bne.n	8003108 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a0e      	ldr	r2, [pc, #56]	@ (8003164 <TIM_Base_SetConfig+0x120>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_Base_SetConfig+0xf2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a10      	ldr	r2, [pc, #64]	@ (8003174 <TIM_Base_SetConfig+0x130>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d103      	bne.n	800313e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f043 0204 	orr.w	r2, r3, #4
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	601a      	str	r2, [r3, #0]
}
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40010000 	.word	0x40010000
 8003168:	40000400 	.word	0x40000400
 800316c:	40000800 	.word	0x40000800
 8003170:	40000c00 	.word	0x40000c00
 8003174:	40010400 	.word	0x40010400
 8003178:	40014000 	.word	0x40014000
 800317c:	40014400 	.word	0x40014400
 8003180:	40014800 	.word	0x40014800
 8003184:	40001800 	.word	0x40001800
 8003188:	40001c00 	.word	0x40001c00
 800318c:	40002000 	.word	0x40002000

08003190 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e042      	b.n	8003250 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe fbbe 	bl	8001960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	@ 0x24
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fa09 	bl	8003614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	@ 0x28
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	d175      	bne.n	8003364 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_UART_Transmit+0x2c>
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e06e      	b.n	8003366 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2221      	movs	r2, #33	@ 0x21
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003296:	f7fe fd85 	bl	8001da4 <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	88fa      	ldrh	r2, [r7, #6]
 80032a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b0:	d108      	bne.n	80032c4 <HAL_UART_Transmit+0x6c>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d104      	bne.n	80032c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	e003      	b.n	80032cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032cc:	e02e      	b.n	800332c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	@ 0x80
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f8df 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e03a      	b.n	8003366 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003304:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	3302      	adds	r3, #2
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	e007      	b.n	800331e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	781a      	ldrb	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	3301      	adds	r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1cb      	bne.n	80032ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	2140      	movs	r1, #64	@ 0x40
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f8ab 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e006      	b.n	8003366 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b08a      	sub	sp, #40	@ 0x28
 8003372:	af02      	add	r7, sp, #8
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b20      	cmp	r3, #32
 800338c:	f040 8081 	bne.w	8003492 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_UART_Receive+0x2e>
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e079      	b.n	8003494 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2222      	movs	r2, #34	@ 0x22
 80033aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033b4:	f7fe fcf6 	bl	8001da4 <HAL_GetTick>
 80033b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ce:	d108      	bne.n	80033e2 <HAL_UART_Receive+0x74>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	e003      	b.n	80033ea <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80033ea:	e047      	b.n	800347c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	2120      	movs	r1, #32
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f850 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e042      	b.n	8003494 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10c      	bne.n	800342e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	b29b      	uxth	r3, r3
 800341c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003420:	b29a      	uxth	r2, r3
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	3302      	adds	r3, #2
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e01f      	b.n	800346e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003436:	d007      	beq.n	8003448 <HAL_UART_Receive+0xda>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <HAL_UART_Receive+0xe8>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e008      	b.n	8003468 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003462:	b2da      	uxtb	r2, r3
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	3301      	adds	r3, #1
 800346c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1b2      	bne.n	80033ec <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ac:	e03b      	b.n	8003526 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d037      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b6:	f7fe fc75 	bl	8001da4 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	6a3a      	ldr	r2, [r7, #32]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d302      	bcc.n	80034cc <UART_WaitOnFlagUntilTimeout+0x30>
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e03a      	b.n	8003546 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d023      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b80      	cmp	r3, #128	@ 0x80
 80034e2:	d020      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b40      	cmp	r3, #64	@ 0x40
 80034e8:	d01d      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d116      	bne.n	8003526 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f81d 	bl	800354e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2208      	movs	r2, #8
 8003518:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e00f      	b.n	8003546 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4013      	ands	r3, r2
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	429a      	cmp	r2, r3
 8003534:	bf0c      	ite	eq
 8003536:	2301      	moveq	r3, #1
 8003538:	2300      	movne	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	429a      	cmp	r2, r3
 8003542:	d0b4      	beq.n	80034ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800354e:	b480      	push	{r7}
 8003550:	b095      	sub	sp, #84	@ 0x54
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800356c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003576:	643a      	str	r2, [r7, #64]	@ 0x40
 8003578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800357c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e5      	bne.n	8003556 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3314      	adds	r3, #20
 8003590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	61fb      	str	r3, [r7, #28]
   return(result);
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e5      	bne.n	800358a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d119      	bne.n	80035fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	330c      	adds	r3, #12
 80035cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f023 0310 	bic.w	r3, r3, #16
 80035dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	330c      	adds	r3, #12
 80035e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035e6:	61ba      	str	r2, [r7, #24]
 80035e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	6979      	ldr	r1, [r7, #20]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	613b      	str	r3, [r7, #16]
   return(result);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e5      	bne.n	80035c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003608:	bf00      	nop
 800360a:	3754      	adds	r7, #84	@ 0x54
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003618:	b0c0      	sub	sp, #256	@ 0x100
 800361a:	af00      	add	r7, sp, #0
 800361c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003630:	68d9      	ldr	r1, [r3, #12]
 8003632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	ea40 0301 	orr.w	r3, r0, r1
 800363c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	431a      	orrs	r2, r3
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	431a      	orrs	r2, r3
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800366c:	f021 010c 	bic.w	r1, r1, #12
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800367a:	430b      	orrs	r3, r1
 800367c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800368a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368e:	6999      	ldr	r1, [r3, #24]
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	ea40 0301 	orr.w	r3, r0, r1
 800369a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b8f      	ldr	r3, [pc, #572]	@ (80038e0 <UART_SetConfig+0x2cc>)
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d005      	beq.n	80036b4 <UART_SetConfig+0xa0>
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b8d      	ldr	r3, [pc, #564]	@ (80038e4 <UART_SetConfig+0x2d0>)
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d104      	bne.n	80036be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036b4:	f7ff fa9e 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 80036b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036bc:	e003      	b.n	80036c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036be:	f7ff fa85 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 80036c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036d0:	f040 810c 	bne.w	80038ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036d8:	2200      	movs	r2, #0
 80036da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036e6:	4622      	mov	r2, r4
 80036e8:	462b      	mov	r3, r5
 80036ea:	1891      	adds	r1, r2, r2
 80036ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036ee:	415b      	adcs	r3, r3
 80036f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036f6:	4621      	mov	r1, r4
 80036f8:	eb12 0801 	adds.w	r8, r2, r1
 80036fc:	4629      	mov	r1, r5
 80036fe:	eb43 0901 	adc.w	r9, r3, r1
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800370e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003716:	4690      	mov	r8, r2
 8003718:	4699      	mov	r9, r3
 800371a:	4623      	mov	r3, r4
 800371c:	eb18 0303 	adds.w	r3, r8, r3
 8003720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003724:	462b      	mov	r3, r5
 8003726:	eb49 0303 	adc.w	r3, r9, r3
 800372a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800373a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800373e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003742:	460b      	mov	r3, r1
 8003744:	18db      	adds	r3, r3, r3
 8003746:	653b      	str	r3, [r7, #80]	@ 0x50
 8003748:	4613      	mov	r3, r2
 800374a:	eb42 0303 	adc.w	r3, r2, r3
 800374e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003750:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003754:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003758:	f7fc fda2 	bl	80002a0 <__aeabi_uldivmod>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4b61      	ldr	r3, [pc, #388]	@ (80038e8 <UART_SetConfig+0x2d4>)
 8003762:	fba3 2302 	umull	r2, r3, r3, r2
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	011c      	lsls	r4, r3, #4
 800376a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800376e:	2200      	movs	r2, #0
 8003770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003774:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003778:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800377c:	4642      	mov	r2, r8
 800377e:	464b      	mov	r3, r9
 8003780:	1891      	adds	r1, r2, r2
 8003782:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003784:	415b      	adcs	r3, r3
 8003786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003788:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800378c:	4641      	mov	r1, r8
 800378e:	eb12 0a01 	adds.w	sl, r2, r1
 8003792:	4649      	mov	r1, r9
 8003794:	eb43 0b01 	adc.w	fp, r3, r1
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ac:	4692      	mov	sl, r2
 80037ae:	469b      	mov	fp, r3
 80037b0:	4643      	mov	r3, r8
 80037b2:	eb1a 0303 	adds.w	r3, sl, r3
 80037b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037ba:	464b      	mov	r3, r9
 80037bc:	eb4b 0303 	adc.w	r3, fp, r3
 80037c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037d8:	460b      	mov	r3, r1
 80037da:	18db      	adds	r3, r3, r3
 80037dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80037de:	4613      	mov	r3, r2
 80037e0:	eb42 0303 	adc.w	r3, r2, r3
 80037e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037ee:	f7fc fd57 	bl	80002a0 <__aeabi_uldivmod>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	4b3b      	ldr	r3, [pc, #236]	@ (80038e8 <UART_SetConfig+0x2d4>)
 80037fa:	fba3 2301 	umull	r2, r3, r3, r1
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2264      	movs	r2, #100	@ 0x64
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	1acb      	subs	r3, r1, r3
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800380e:	4b36      	ldr	r3, [pc, #216]	@ (80038e8 <UART_SetConfig+0x2d4>)
 8003810:	fba3 2302 	umull	r2, r3, r3, r2
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800381c:	441c      	add	r4, r3
 800381e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003822:	2200      	movs	r2, #0
 8003824:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003828:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800382c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003830:	4642      	mov	r2, r8
 8003832:	464b      	mov	r3, r9
 8003834:	1891      	adds	r1, r2, r2
 8003836:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003838:	415b      	adcs	r3, r3
 800383a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800383c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003840:	4641      	mov	r1, r8
 8003842:	1851      	adds	r1, r2, r1
 8003844:	6339      	str	r1, [r7, #48]	@ 0x30
 8003846:	4649      	mov	r1, r9
 8003848:	414b      	adcs	r3, r1
 800384a:	637b      	str	r3, [r7, #52]	@ 0x34
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003858:	4659      	mov	r1, fp
 800385a:	00cb      	lsls	r3, r1, #3
 800385c:	4651      	mov	r1, sl
 800385e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003862:	4651      	mov	r1, sl
 8003864:	00ca      	lsls	r2, r1, #3
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	4603      	mov	r3, r0
 800386c:	4642      	mov	r2, r8
 800386e:	189b      	adds	r3, r3, r2
 8003870:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003874:	464b      	mov	r3, r9
 8003876:	460a      	mov	r2, r1
 8003878:	eb42 0303 	adc.w	r3, r2, r3
 800387c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800388c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003890:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003894:	460b      	mov	r3, r1
 8003896:	18db      	adds	r3, r3, r3
 8003898:	62bb      	str	r3, [r7, #40]	@ 0x28
 800389a:	4613      	mov	r3, r2
 800389c:	eb42 0303 	adc.w	r3, r2, r3
 80038a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038aa:	f7fc fcf9 	bl	80002a0 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4b0d      	ldr	r3, [pc, #52]	@ (80038e8 <UART_SetConfig+0x2d4>)
 80038b4:	fba3 1302 	umull	r1, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2164      	movs	r1, #100	@ 0x64
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	3332      	adds	r3, #50	@ 0x32
 80038c6:	4a08      	ldr	r2, [pc, #32]	@ (80038e8 <UART_SetConfig+0x2d4>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	f003 0207 	and.w	r2, r3, #7
 80038d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4422      	add	r2, r4
 80038da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038dc:	e106      	b.n	8003aec <UART_SetConfig+0x4d8>
 80038de:	bf00      	nop
 80038e0:	40011000 	.word	0x40011000
 80038e4:	40011400 	.word	0x40011400
 80038e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038fe:	4642      	mov	r2, r8
 8003900:	464b      	mov	r3, r9
 8003902:	1891      	adds	r1, r2, r2
 8003904:	6239      	str	r1, [r7, #32]
 8003906:	415b      	adcs	r3, r3
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
 800390a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800390e:	4641      	mov	r1, r8
 8003910:	1854      	adds	r4, r2, r1
 8003912:	4649      	mov	r1, r9
 8003914:	eb43 0501 	adc.w	r5, r3, r1
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	00eb      	lsls	r3, r5, #3
 8003922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003926:	00e2      	lsls	r2, r4, #3
 8003928:	4614      	mov	r4, r2
 800392a:	461d      	mov	r5, r3
 800392c:	4643      	mov	r3, r8
 800392e:	18e3      	adds	r3, r4, r3
 8003930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003934:	464b      	mov	r3, r9
 8003936:	eb45 0303 	adc.w	r3, r5, r3
 800393a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800394a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800395a:	4629      	mov	r1, r5
 800395c:	008b      	lsls	r3, r1, #2
 800395e:	4621      	mov	r1, r4
 8003960:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003964:	4621      	mov	r1, r4
 8003966:	008a      	lsls	r2, r1, #2
 8003968:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800396c:	f7fc fc98 	bl	80002a0 <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4b60      	ldr	r3, [pc, #384]	@ (8003af8 <UART_SetConfig+0x4e4>)
 8003976:	fba3 2302 	umull	r2, r3, r3, r2
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	011c      	lsls	r4, r3, #4
 800397e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003982:	2200      	movs	r2, #0
 8003984:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003988:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800398c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003990:	4642      	mov	r2, r8
 8003992:	464b      	mov	r3, r9
 8003994:	1891      	adds	r1, r2, r2
 8003996:	61b9      	str	r1, [r7, #24]
 8003998:	415b      	adcs	r3, r3
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039a0:	4641      	mov	r1, r8
 80039a2:	1851      	adds	r1, r2, r1
 80039a4:	6139      	str	r1, [r7, #16]
 80039a6:	4649      	mov	r1, r9
 80039a8:	414b      	adcs	r3, r1
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039b8:	4659      	mov	r1, fp
 80039ba:	00cb      	lsls	r3, r1, #3
 80039bc:	4651      	mov	r1, sl
 80039be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039c2:	4651      	mov	r1, sl
 80039c4:	00ca      	lsls	r2, r1, #3
 80039c6:	4610      	mov	r0, r2
 80039c8:	4619      	mov	r1, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	4642      	mov	r2, r8
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039d4:	464b      	mov	r3, r9
 80039d6:	460a      	mov	r2, r1
 80039d8:	eb42 0303 	adc.w	r3, r2, r3
 80039dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039f8:	4649      	mov	r1, r9
 80039fa:	008b      	lsls	r3, r1, #2
 80039fc:	4641      	mov	r1, r8
 80039fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a02:	4641      	mov	r1, r8
 8003a04:	008a      	lsls	r2, r1, #2
 8003a06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a0a:	f7fc fc49 	bl	80002a0 <__aeabi_uldivmod>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	4b38      	ldr	r3, [pc, #224]	@ (8003af8 <UART_SetConfig+0x4e4>)
 8003a16:	fba3 2301 	umull	r2, r3, r3, r1
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	2264      	movs	r2, #100	@ 0x64
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	1acb      	subs	r3, r1, r3
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	3332      	adds	r3, #50	@ 0x32
 8003a28:	4a33      	ldr	r2, [pc, #204]	@ (8003af8 <UART_SetConfig+0x4e4>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a34:	441c      	add	r4, r3
 8003a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a44:	4642      	mov	r2, r8
 8003a46:	464b      	mov	r3, r9
 8003a48:	1891      	adds	r1, r2, r2
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	415b      	adcs	r3, r3
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a54:	4641      	mov	r1, r8
 8003a56:	1851      	adds	r1, r2, r1
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	414b      	adcs	r3, r1
 8003a5e:	607b      	str	r3, [r7, #4]
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	00cb      	lsls	r3, r1, #3
 8003a70:	4651      	mov	r1, sl
 8003a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a76:	4651      	mov	r1, sl
 8003a78:	00ca      	lsls	r2, r1, #3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4642      	mov	r2, r8
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a86:	464b      	mov	r3, r9
 8003a88:	460a      	mov	r2, r1
 8003a8a:	eb42 0303 	adc.w	r3, r2, r3
 8003a8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003aa8:	4649      	mov	r1, r9
 8003aaa:	008b      	lsls	r3, r1, #2
 8003aac:	4641      	mov	r1, r8
 8003aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	008a      	lsls	r2, r1, #2
 8003ab6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003aba:	f7fc fbf1 	bl	80002a0 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <UART_SetConfig+0x4e4>)
 8003ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	2164      	movs	r1, #100	@ 0x64
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	3332      	adds	r3, #50	@ 0x32
 8003ad6:	4a08      	ldr	r2, [pc, #32]	@ (8003af8 <UART_SetConfig+0x4e4>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	f003 020f 	and.w	r2, r3, #15
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4422      	add	r2, r4
 8003aea:	609a      	str	r2, [r3, #8]
}
 8003aec:	bf00      	nop
 8003aee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003af2:	46bd      	mov	sp, r7
 8003af4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003af8:	51eb851f 	.word	0x51eb851f

08003afc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f103 0208 	add.w	r2, r3, #8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295
 8003b14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f103 0208 	add.w	r2, r3, #8
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f103 0208 	add.w	r2, r3, #8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	601a      	str	r2, [r3, #0]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d103      	bne.n	8003bbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	e00c      	b.n	8003bd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e002      	b.n	8003bcc <vListInsert+0x2e>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d2f6      	bcs.n	8003bc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	601a      	str	r2, [r3, #0]
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6892      	ldr	r2, [r2, #8]
 8003c26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6852      	ldr	r2, [r2, #4]
 8003c30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d103      	bne.n	8003c44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	1e5a      	subs	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10b      	bne.n	8003c90 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c8a:	bf00      	nop
 8003c8c:	bf00      	nop
 8003c8e:	e7fd      	b.n	8003c8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c90:	f002 fbba 	bl	8006408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9c:	68f9      	ldr	r1, [r7, #12]
 8003c9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	441a      	add	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	68f9      	ldr	r1, [r7, #12]
 8003cc4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	441a      	add	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	22ff      	movs	r2, #255	@ 0xff
 8003cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	22ff      	movs	r2, #255	@ 0xff
 8003cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d114      	bne.n	8003d10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01a      	beq.n	8003d24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3310      	adds	r3, #16
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 f97a 	bl	8004fec <xTaskRemoveFromEventList>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d012      	beq.n	8003d24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003d34 <xQueueGenericReset+0xd0>)
 8003d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	e009      	b.n	8003d24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3310      	adds	r3, #16
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fef1 	bl	8003afc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3324      	adds	r3, #36	@ 0x24
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff feec 	bl	8003afc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d24:	f002 fba2 	bl	800646c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d28:	2301      	movs	r3, #1
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	e000ed04 	.word	0xe000ed04

08003d38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	@ 0x28
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	4613      	mov	r3, r2
 8003d44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	613b      	str	r3, [r7, #16]
}
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
 8003d62:	e7fd      	b.n	8003d60 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	e004      	b.n	8003d7a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3350      	adds	r3, #80	@ 0x50
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 fc64 	bl	800664c <pvPortMalloc>
 8003d84:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00d      	beq.n	8003da8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	3350      	adds	r3, #80	@ 0x50
 8003d94:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d96:	79fa      	ldrb	r2, [r7, #7]
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f805 	bl	8003db2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003da8:	69bb      	ldr	r3, [r7, #24]
	}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e002      	b.n	8003dd4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003de0:	2101      	movs	r1, #1
 8003de2:	69b8      	ldr	r0, [r7, #24]
 8003de4:	f7ff ff3e 	bl	8003c64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08e      	sub	sp, #56	@ 0x38
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e06:	2300      	movs	r3, #0
 8003e08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <xQueueGenericSend+0x34>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e26:	bf00      	nop
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <xQueueGenericSend+0x42>
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <xQueueGenericSend+0x46>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <xQueueGenericSend+0x48>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <xQueueGenericSend+0x64>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d103      	bne.n	8003e6a <xQueueGenericSend+0x72>
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <xQueueGenericSend+0x76>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <xQueueGenericSend+0x78>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10b      	bne.n	8003e8c <xQueueGenericSend+0x94>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	623b      	str	r3, [r7, #32]
}
 8003e86:	bf00      	nop
 8003e88:	bf00      	nop
 8003e8a:	e7fd      	b.n	8003e88 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e8c:	f001 fb22 	bl	80054d4 <xTaskGetSchedulerState>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d102      	bne.n	8003e9c <xQueueGenericSend+0xa4>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <xQueueGenericSend+0xa8>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <xQueueGenericSend+0xaa>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10b      	bne.n	8003ebe <xQueueGenericSend+0xc6>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	61fb      	str	r3, [r7, #28]
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	e7fd      	b.n	8003eba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ebe:	f002 faa3 	bl	8006408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d302      	bcc.n	8003ed4 <xQueueGenericSend+0xdc>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d129      	bne.n	8003f28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003eda:	f000 fa0d 	bl	80042f8 <prvCopyDataToQueue>
 8003ede:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	3324      	adds	r3, #36	@ 0x24
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 f87d 	bl	8004fec <xTaskRemoveFromEventList>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d013      	beq.n	8003f20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ff8 <xQueueGenericSend+0x200>)
 8003efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	e00a      	b.n	8003f20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f10:	4b39      	ldr	r3, [pc, #228]	@ (8003ff8 <xQueueGenericSend+0x200>)
 8003f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f20:	f002 faa4 	bl	800646c <vPortExitCritical>
				return pdPASS;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e063      	b.n	8003ff0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f2e:	f002 fa9d 	bl	800646c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e05c      	b.n	8003ff0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d106      	bne.n	8003f4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f3c:	f107 0314 	add.w	r3, r7, #20
 8003f40:	4618      	mov	r0, r3
 8003f42:	f001 f8b7 	bl	80050b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f46:	2301      	movs	r3, #1
 8003f48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f4a:	f002 fa8f 	bl	800646c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f4e:	f000 fd71 	bl	8004a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f52:	f002 fa59 	bl	8006408 <vPortEnterCritical>
 8003f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f5c:	b25b      	sxtb	r3, r3
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	d103      	bne.n	8003f6c <xQueueGenericSend+0x174>
 8003f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f72:	b25b      	sxtb	r3, r3
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f78:	d103      	bne.n	8003f82 <xQueueGenericSend+0x18a>
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f82:	f002 fa73 	bl	800646c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f86:	1d3a      	adds	r2, r7, #4
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 f8a6 	bl	80050e0 <xTaskCheckForTimeOut>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d124      	bne.n	8003fe4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f9c:	f000 faa4 	bl	80044e8 <prvIsQueueFull>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d018      	beq.n	8003fd8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	3310      	adds	r3, #16
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4611      	mov	r1, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 ffca 	bl	8004f48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fb6:	f000 fa2f 	bl	8004418 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fba:	f000 fd49 	bl	8004a50 <xTaskResumeAll>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f47f af7c 	bne.w	8003ebe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <xQueueGenericSend+0x200>)
 8003fc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	e772      	b.n	8003ebe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fda:	f000 fa1d 	bl	8004418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fde:	f000 fd37 	bl	8004a50 <xTaskResumeAll>
 8003fe2:	e76c      	b.n	8003ebe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fe6:	f000 fa17 	bl	8004418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fea:	f000 fd31 	bl	8004a50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003fee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3738      	adds	r7, #56	@ 0x38
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08e      	sub	sp, #56	@ 0x38
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <xQueueGenericSendFromISR+0x3e>
 8004032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <xQueueGenericSendFromISR+0x42>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <xQueueGenericSendFromISR+0x44>
 800403e:	2300      	movs	r3, #0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	623b      	str	r3, [r7, #32]
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d103      	bne.n	800406a <xQueueGenericSendFromISR+0x6e>
 8004062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <xQueueGenericSendFromISR+0x72>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <xQueueGenericSendFromISR+0x74>
 800406e:	2300      	movs	r3, #0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	61fb      	str	r3, [r7, #28]
}
 8004086:	bf00      	nop
 8004088:	bf00      	nop
 800408a:	e7fd      	b.n	8004088 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800408c:	f002 fa9c 	bl	80065c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004090:	f3ef 8211 	mrs	r2, BASEPRI
 8004094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	61ba      	str	r2, [r7, #24]
 80040a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d302      	bcc.n	80040be <xQueueGenericSendFromISR+0xc2>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d12c      	bne.n	8004118 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ce:	f000 f913 	bl	80042f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040da:	d112      	bne.n	8004102 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d016      	beq.n	8004112 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	3324      	adds	r3, #36	@ 0x24
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 ff7f 	bl	8004fec <xTaskRemoveFromEventList>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00e      	beq.n	8004112 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	e007      	b.n	8004112 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004102:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004106:	3301      	adds	r3, #1
 8004108:	b2db      	uxtb	r3, r3
 800410a:	b25a      	sxtb	r2, r3
 800410c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004112:	2301      	movs	r3, #1
 8004114:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004116:	e001      	b.n	800411c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004118:	2300      	movs	r3, #0
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34
 800411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004126:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800412a:	4618      	mov	r0, r3
 800412c:	3738      	adds	r7, #56	@ 0x38
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08c      	sub	sp, #48	@ 0x30
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004140:	2300      	movs	r3, #0
 8004142:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10b      	bne.n	8004166 <xQueueReceive+0x32>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	623b      	str	r3, [r7, #32]
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	e7fd      	b.n	8004162 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d103      	bne.n	8004174 <xQueueReceive+0x40>
 800416c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <xQueueReceive+0x44>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <xQueueReceive+0x46>
 8004178:	2300      	movs	r3, #0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10b      	bne.n	8004196 <xQueueReceive+0x62>
	__asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	61fb      	str	r3, [r7, #28]
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	e7fd      	b.n	8004192 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004196:	f001 f99d 	bl	80054d4 <xTaskGetSchedulerState>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <xQueueReceive+0x72>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <xQueueReceive+0x76>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <xQueueReceive+0x78>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10b      	bne.n	80041c8 <xQueueReceive+0x94>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	61bb      	str	r3, [r7, #24]
}
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	e7fd      	b.n	80041c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041c8:	f002 f91e 	bl	8006408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01f      	beq.n	8004218 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041dc:	f000 f8f6 	bl	80043cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	1e5a      	subs	r2, r3, #1
 80041e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00f      	beq.n	8004210 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f2:	3310      	adds	r3, #16
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fef9 	bl	8004fec <xTaskRemoveFromEventList>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004200:	4b3c      	ldr	r3, [pc, #240]	@ (80042f4 <xQueueReceive+0x1c0>)
 8004202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004210:	f002 f92c 	bl	800646c <vPortExitCritical>
				return pdPASS;
 8004214:	2301      	movs	r3, #1
 8004216:	e069      	b.n	80042ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d103      	bne.n	8004226 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800421e:	f002 f925 	bl	800646c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004222:	2300      	movs	r3, #0
 8004224:	e062      	b.n	80042ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800422c:	f107 0310 	add.w	r3, r7, #16
 8004230:	4618      	mov	r0, r3
 8004232:	f000 ff3f 	bl	80050b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004236:	2301      	movs	r3, #1
 8004238:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800423a:	f002 f917 	bl	800646c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800423e:	f000 fbf9 	bl	8004a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004242:	f002 f8e1 	bl	8006408 <vPortEnterCritical>
 8004246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004248:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800424c:	b25b      	sxtb	r3, r3
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d103      	bne.n	800425c <xQueueReceive+0x128>
 8004254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800425c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004262:	b25b      	sxtb	r3, r3
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d103      	bne.n	8004272 <xQueueReceive+0x13e>
 800426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004272:	f002 f8fb 	bl	800646c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004276:	1d3a      	adds	r2, r7, #4
 8004278:	f107 0310 	add.w	r3, r7, #16
 800427c:	4611      	mov	r1, r2
 800427e:	4618      	mov	r0, r3
 8004280:	f000 ff2e 	bl	80050e0 <xTaskCheckForTimeOut>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d123      	bne.n	80042d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800428a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800428c:	f000 f916 	bl	80044bc <prvIsQueueEmpty>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d017      	beq.n	80042c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004298:	3324      	adds	r3, #36	@ 0x24
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fe52 	bl	8004f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042a6:	f000 f8b7 	bl	8004418 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042aa:	f000 fbd1 	bl	8004a50 <xTaskResumeAll>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d189      	bne.n	80041c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80042b4:	4b0f      	ldr	r3, [pc, #60]	@ (80042f4 <xQueueReceive+0x1c0>)
 80042b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	e780      	b.n	80041c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042c8:	f000 f8a6 	bl	8004418 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042cc:	f000 fbc0 	bl	8004a50 <xTaskResumeAll>
 80042d0:	e77a      	b.n	80041c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042d4:	f000 f8a0 	bl	8004418 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042d8:	f000 fbba 	bl	8004a50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042de:	f000 f8ed 	bl	80044bc <prvIsQueueEmpty>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f43f af6f 	beq.w	80041c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3730      	adds	r7, #48	@ 0x30
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10d      	bne.n	8004332 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d14d      	bne.n	80043ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	4618      	mov	r0, r3
 8004324:	f001 f8f4 	bl	8005510 <xTaskPriorityDisinherit>
 8004328:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	e043      	b.n	80043ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d119      	bne.n	800436c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6858      	ldr	r0, [r3, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	461a      	mov	r2, r3
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	f002 fdff 	bl	8006f46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	441a      	add	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	d32b      	bcc.n	80043ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	e026      	b.n	80043ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68d8      	ldr	r0, [r3, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	461a      	mov	r2, r3
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	f002 fde5 	bl	8006f46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004384:	425b      	negs	r3, r3
 8004386:	441a      	add	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d207      	bcs.n	80043a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	425b      	negs	r3, r3
 80043a2:	441a      	add	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d105      	bne.n	80043ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80043c2:	697b      	ldr	r3, [r7, #20]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d018      	beq.n	8004410 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	441a      	add	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d303      	bcc.n	8004400 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68d9      	ldr	r1, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	461a      	mov	r2, r3
 800440a:	6838      	ldr	r0, [r7, #0]
 800440c:	f002 fd9b 	bl	8006f46 <memcpy>
	}
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004420:	f001 fff2 	bl	8006408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800442a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800442c:	e011      	b.n	8004452 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	2b00      	cmp	r3, #0
 8004434:	d012      	beq.n	800445c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3324      	adds	r3, #36	@ 0x24
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fdd6 	bl	8004fec <xTaskRemoveFromEventList>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004446:	f000 feaf 	bl	80051a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	3b01      	subs	r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004456:	2b00      	cmp	r3, #0
 8004458:	dce9      	bgt.n	800442e <prvUnlockQueue+0x16>
 800445a:	e000      	b.n	800445e <prvUnlockQueue+0x46>
					break;
 800445c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	22ff      	movs	r2, #255	@ 0xff
 8004462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004466:	f002 f801 	bl	800646c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800446a:	f001 ffcd 	bl	8006408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004474:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004476:	e011      	b.n	800449c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d012      	beq.n	80044a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3310      	adds	r3, #16
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fdb1 	bl	8004fec <xTaskRemoveFromEventList>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004490:	f000 fe8a 	bl	80051a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004494:	7bbb      	ldrb	r3, [r7, #14]
 8004496:	3b01      	subs	r3, #1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800449c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	dce9      	bgt.n	8004478 <prvUnlockQueue+0x60>
 80044a4:	e000      	b.n	80044a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	22ff      	movs	r2, #255	@ 0xff
 80044ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80044b0:	f001 ffdc 	bl	800646c <vPortExitCritical>
}
 80044b4:	bf00      	nop
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044c4:	f001 ffa0 	bl	8006408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044d0:	2301      	movs	r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	e001      	b.n	80044da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044da:	f001 ffc7 	bl	800646c <vPortExitCritical>

	return xReturn;
 80044de:	68fb      	ldr	r3, [r7, #12]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044f0:	f001 ff8a 	bl	8006408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d102      	bne.n	8004506 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004500:	2301      	movs	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e001      	b.n	800450a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800450a:	f001 ffaf 	bl	800646c <vPortExitCritical>

	return xReturn;
 800450e:	68fb      	ldr	r3, [r7, #12]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	e014      	b.n	8004552 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004528:	4a0f      	ldr	r2, [pc, #60]	@ (8004568 <vQueueAddToRegistry+0x50>)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004534:	490c      	ldr	r1, [pc, #48]	@ (8004568 <vQueueAddToRegistry+0x50>)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800453e:	4a0a      	ldr	r2, [pc, #40]	@ (8004568 <vQueueAddToRegistry+0x50>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4413      	add	r3, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800454a:	e006      	b.n	800455a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3301      	adds	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b07      	cmp	r3, #7
 8004556:	d9e7      	bls.n	8004528 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	200047cc 	.word	0x200047cc

0800456c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800457c:	f001 ff44 	bl	8006408 <vPortEnterCritical>
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004586:	b25b      	sxtb	r3, r3
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d103      	bne.n	8004596 <vQueueWaitForMessageRestricted+0x2a>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800459c:	b25b      	sxtb	r3, r3
 800459e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a2:	d103      	bne.n	80045ac <vQueueWaitForMessageRestricted+0x40>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045ac:	f001 ff5e 	bl	800646c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	3324      	adds	r3, #36	@ 0x24
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fce7 	bl	8004f94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045c6:	6978      	ldr	r0, [r7, #20]
 80045c8:	f7ff ff26 	bl	8004418 <prvUnlockQueue>
	}
 80045cc:	bf00      	nop
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	@ 0x30
 80045d8:	af04      	add	r7, sp, #16
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f002 f82f 	bl	800664c <pvPortMalloc>
 80045ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00e      	beq.n	8004614 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045f6:	205c      	movs	r0, #92	@ 0x5c
 80045f8:	f002 f828 	bl	800664c <pvPortMalloc>
 80045fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	631a      	str	r2, [r3, #48]	@ 0x30
 800460a:	e005      	b.n	8004618 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800460c:	6978      	ldr	r0, [r7, #20]
 800460e:	f002 f8e5 	bl	80067dc <vPortFree>
 8004612:	e001      	b.n	8004618 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d013      	beq.n	8004646 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	2300      	movs	r3, #0
 8004622:	9303      	str	r3, [sp, #12]
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	9302      	str	r3, [sp, #8]
 8004628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462a:	9301      	str	r3, [sp, #4]
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f80e 	bl	8004656 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800463a:	69f8      	ldr	r0, [r7, #28]
 800463c:	f000 f89e 	bl	800477c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004640:	2301      	movs	r3, #1
 8004642:	61bb      	str	r3, [r7, #24]
 8004644:	e002      	b.n	800464c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
 800464a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800464c:	69bb      	ldr	r3, [r7, #24]
	}
 800464e:	4618      	mov	r0, r3
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b088      	sub	sp, #32
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004666:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	461a      	mov	r2, r3
 800466e:	21a5      	movs	r1, #165	@ 0xa5
 8004670:	f002 fb76 	bl	8006d60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004676:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800467e:	3b01      	subs	r3, #1
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f023 0307 	bic.w	r3, r3, #7
 800468c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00b      	beq.n	80046b0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	617b      	str	r3, [r7, #20]
}
 80046aa:	bf00      	nop
 80046ac:	bf00      	nop
 80046ae:	e7fd      	b.n	80046ac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01f      	beq.n	80046f6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	e012      	b.n	80046e2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	7819      	ldrb	r1, [r3, #0]
 80046c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	3334      	adds	r3, #52	@ 0x34
 80046cc:	460a      	mov	r2, r1
 80046ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d006      	beq.n	80046ea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	3301      	adds	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2b09      	cmp	r3, #9
 80046e6:	d9e9      	bls.n	80046bc <prvInitialiseNewTask+0x66>
 80046e8:	e000      	b.n	80046ec <prvInitialiseNewTask+0x96>
			{
				break;
 80046ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046f4:	e003      	b.n	80046fe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004700:	2b04      	cmp	r3, #4
 8004702:	d901      	bls.n	8004708 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004704:	2304      	movs	r3, #4
 8004706:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800470c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800470e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004712:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8004714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004716:	2200      	movs	r2, #0
 8004718:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	3304      	adds	r3, #4
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fa0c 	bl	8003b3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004726:	3318      	adds	r3, #24
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fa07 	bl	8003b3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800472e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004732:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004736:	f1c3 0205 	rsb	r2, r3, #5
 800473a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004742:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	2200      	movs	r2, #0
 8004748:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800474a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474c:	2200      	movs	r2, #0
 800474e:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	68f9      	ldr	r1, [r7, #12]
 800475c:	69b8      	ldr	r0, [r7, #24]
 800475e:	f001 fd23 	bl	80061a8 <pxPortInitialiseStack>
 8004762:	4602      	mov	r2, r0
 8004764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004766:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800476e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004772:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004774:	bf00      	nop
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004784:	f001 fe40 	bl	8006408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004788:	4b2c      	ldr	r3, [pc, #176]	@ (800483c <prvAddNewTaskToReadyList+0xc0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	4a2b      	ldr	r2, [pc, #172]	@ (800483c <prvAddNewTaskToReadyList+0xc0>)
 8004790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004792:	4b2b      	ldr	r3, [pc, #172]	@ (8004840 <prvAddNewTaskToReadyList+0xc4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800479a:	4a29      	ldr	r2, [pc, #164]	@ (8004840 <prvAddNewTaskToReadyList+0xc4>)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047a0:	4b26      	ldr	r3, [pc, #152]	@ (800483c <prvAddNewTaskToReadyList+0xc0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d110      	bne.n	80047ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047a8:	f000 fd22 	bl	80051f0 <prvInitialiseTaskLists>
 80047ac:	e00d      	b.n	80047ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047ae:	4b25      	ldr	r3, [pc, #148]	@ (8004844 <prvAddNewTaskToReadyList+0xc8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047b6:	4b22      	ldr	r3, [pc, #136]	@ (8004840 <prvAddNewTaskToReadyList+0xc4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d802      	bhi.n	80047ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004840 <prvAddNewTaskToReadyList+0xc4>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004848 <prvAddNewTaskToReadyList+0xcc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3301      	adds	r3, #1
 80047d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004848 <prvAddNewTaskToReadyList+0xcc>)
 80047d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80047d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004848 <prvAddNewTaskToReadyList+0xcc>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	2201      	movs	r2, #1
 80047e2:	409a      	lsls	r2, r3
 80047e4:	4b19      	ldr	r3, [pc, #100]	@ (800484c <prvAddNewTaskToReadyList+0xd0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	4a18      	ldr	r2, [pc, #96]	@ (800484c <prvAddNewTaskToReadyList+0xd0>)
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4a15      	ldr	r2, [pc, #84]	@ (8004850 <prvAddNewTaskToReadyList+0xd4>)
 80047fc:	441a      	add	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3304      	adds	r3, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7ff f9a6 	bl	8003b56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800480a:	f001 fe2f 	bl	800646c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800480e:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <prvAddNewTaskToReadyList+0xc8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00e      	beq.n	8004834 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004816:	4b0a      	ldr	r3, [pc, #40]	@ (8004840 <prvAddNewTaskToReadyList+0xc4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	429a      	cmp	r2, r3
 8004822:	d207      	bcs.n	8004834 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004824:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <prvAddNewTaskToReadyList+0xd8>)
 8004826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	200048e4 	.word	0x200048e4
 8004840:	2000480c 	.word	0x2000480c
 8004844:	200048f0 	.word	0x200048f0
 8004848:	20004900 	.word	0x20004900
 800484c:	200048ec 	.word	0x200048ec
 8004850:	20004810 	.word	0x20004810
 8004854:	e000ed04 	.word	0xe000ed04

08004858 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d018      	beq.n	800489c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800486a:	4b14      	ldr	r3, [pc, #80]	@ (80048bc <vTaskDelay+0x64>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <vTaskDelay+0x32>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	60bb      	str	r3, [r7, #8]
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800488a:	f000 f8d3 	bl	8004a34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800488e:	2100      	movs	r1, #0
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f001 f905 	bl	8005aa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004896:	f000 f8db 	bl	8004a50 <xTaskResumeAll>
 800489a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d107      	bne.n	80048b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80048a2:	4b07      	ldr	r3, [pc, #28]	@ (80048c0 <vTaskDelay+0x68>)
 80048a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	2000490c 	.word	0x2000490c
 80048c0:	e000ed04 	.word	0xe000ed04

080048c4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <eTaskGetState+0x2a>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	60bb      	str	r3, [r7, #8]
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	e7fd      	b.n	80048ea <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80048ee:	4b24      	ldr	r3, [pc, #144]	@ (8004980 <eTaskGetState+0xbc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d102      	bne.n	80048fe <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80048f8:	2300      	movs	r3, #0
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e03a      	b.n	8004974 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 80048fe:	f001 fd83 	bl	8006408 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004908:	4b1e      	ldr	r3, [pc, #120]	@ (8004984 <eTaskGetState+0xc0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800490e:	4b1e      	ldr	r3, [pc, #120]	@ (8004988 <eTaskGetState+0xc4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004914:	f001 fdaa 	bl	800646c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	429a      	cmp	r2, r3
 800491e:	d003      	beq.n	8004928 <eTaskGetState+0x64>
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	429a      	cmp	r2, r3
 8004926:	d102      	bne.n	800492e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004928:	2302      	movs	r3, #2
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e022      	b.n	8004974 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	4a16      	ldr	r2, [pc, #88]	@ (800498c <eTaskGetState+0xc8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d112      	bne.n	800495c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b01      	cmp	r3, #1
 8004948:	d102      	bne.n	8004950 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800494a:	2302      	movs	r3, #2
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e011      	b.n	8004974 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8004950:	2303      	movs	r3, #3
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e00e      	b.n	8004974 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004956:	2302      	movs	r3, #2
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e00b      	b.n	8004974 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	4a0c      	ldr	r2, [pc, #48]	@ (8004990 <eTaskGetState+0xcc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d002      	beq.n	800496a <eTaskGetState+0xa6>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800496a:	2304      	movs	r3, #4
 800496c:	77fb      	strb	r3, [r7, #31]
 800496e:	e001      	b.n	8004974 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8004970:	2301      	movs	r3, #1
 8004972:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004974:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	2000480c 	.word	0x2000480c
 8004984:	2000489c 	.word	0x2000489c
 8004988:	200048a0 	.word	0x200048a0
 800498c:	200048d0 	.word	0x200048d0
 8004990:	200048b8 	.word	0x200048b8

08004994 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800499a:	4b20      	ldr	r3, [pc, #128]	@ (8004a1c <vTaskStartScheduler+0x88>)
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	2300      	movs	r3, #0
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	2300      	movs	r3, #0
 80049a4:	2282      	movs	r2, #130	@ 0x82
 80049a6:	491e      	ldr	r1, [pc, #120]	@ (8004a20 <vTaskStartScheduler+0x8c>)
 80049a8:	481e      	ldr	r0, [pc, #120]	@ (8004a24 <vTaskStartScheduler+0x90>)
 80049aa:	f7ff fe13 	bl	80045d4 <xTaskCreate>
 80049ae:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d102      	bne.n	80049bc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80049b6:	f001 f8d9 	bl	8005b6c <xTimerCreateTimerTask>
 80049ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d118      	bne.n	80049f4 <vTaskStartScheduler+0x60>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	60bb      	str	r3, [r7, #8]
}
 80049d4:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049d6:	4b14      	ldr	r3, [pc, #80]	@ (8004a28 <vTaskStartScheduler+0x94>)
 80049d8:	f04f 32ff 	mov.w	r2, #4294967295
 80049dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049de:	4b13      	ldr	r3, [pc, #76]	@ (8004a2c <vTaskStartScheduler+0x98>)
 80049e0:	2201      	movs	r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049e4:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <vTaskStartScheduler+0x9c>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80049ea:	f7fb fdd1 	bl	8000590 <AppTimerStatsInit>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049ee:	f001 fc67 	bl	80062c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049f2:	e00f      	b.n	8004a14 <vTaskStartScheduler+0x80>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d10b      	bne.n	8004a14 <vTaskStartScheduler+0x80>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	607b      	str	r3, [r7, #4]
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	e7fd      	b.n	8004a10 <vTaskStartScheduler+0x7c>
}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	20004908 	.word	0x20004908
 8004a20:	0800893c 	.word	0x0800893c
 8004a24:	080051c1 	.word	0x080051c1
 8004a28:	20004904 	.word	0x20004904
 8004a2c:	200048f0 	.word	0x200048f0
 8004a30:	200048e8 	.word	0x200048e8

08004a34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a38:	4b04      	ldr	r3, [pc, #16]	@ (8004a4c <vTaskSuspendAll+0x18>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	4a03      	ldr	r2, [pc, #12]	@ (8004a4c <vTaskSuspendAll+0x18>)
 8004a40:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004a42:	bf00      	nop
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	2000490c 	.word	0x2000490c

08004a50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a5e:	4b42      	ldr	r3, [pc, #264]	@ (8004b68 <xTaskResumeAll+0x118>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <xTaskResumeAll+0x2e>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	603b      	str	r3, [r7, #0]
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	e7fd      	b.n	8004a7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a7e:	f001 fcc3 	bl	8006408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a82:	4b39      	ldr	r3, [pc, #228]	@ (8004b68 <xTaskResumeAll+0x118>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	4a37      	ldr	r2, [pc, #220]	@ (8004b68 <xTaskResumeAll+0x118>)
 8004a8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a8c:	4b36      	ldr	r3, [pc, #216]	@ (8004b68 <xTaskResumeAll+0x118>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d161      	bne.n	8004b58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a94:	4b35      	ldr	r3, [pc, #212]	@ (8004b6c <xTaskResumeAll+0x11c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d05d      	beq.n	8004b58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a9c:	e02e      	b.n	8004afc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9e:	4b34      	ldr	r3, [pc, #208]	@ (8004b70 <xTaskResumeAll+0x120>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3318      	adds	r3, #24
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff f8b0 	bl	8003c10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff f8ab 	bl	8003c10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	2201      	movs	r2, #1
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b74 <xTaskResumeAll+0x124>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b74 <xTaskResumeAll+0x124>)
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4a27      	ldr	r2, [pc, #156]	@ (8004b78 <xTaskResumeAll+0x128>)
 8004ada:	441a      	add	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f7ff f837 	bl	8003b56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aec:	4b23      	ldr	r3, [pc, #140]	@ (8004b7c <xTaskResumeAll+0x12c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d302      	bcc.n	8004afc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004af6:	4b22      	ldr	r3, [pc, #136]	@ (8004b80 <xTaskResumeAll+0x130>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004afc:	4b1c      	ldr	r3, [pc, #112]	@ (8004b70 <xTaskResumeAll+0x120>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1cc      	bne.n	8004a9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b0a:	f000 fcc3 	bl	8005494 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b84 <xTaskResumeAll+0x134>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d010      	beq.n	8004b3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b1a:	f000 f8e3 	bl	8004ce4 <xTaskIncrementTick>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b24:	4b16      	ldr	r3, [pc, #88]	@ (8004b80 <xTaskResumeAll+0x130>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f1      	bne.n	8004b1a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004b36:	4b13      	ldr	r3, [pc, #76]	@ (8004b84 <xTaskResumeAll+0x134>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b3c:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <xTaskResumeAll+0x130>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d009      	beq.n	8004b58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b44:	2301      	movs	r3, #1
 8004b46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b48:	4b0f      	ldr	r3, [pc, #60]	@ (8004b88 <xTaskResumeAll+0x138>)
 8004b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b58:	f001 fc88 	bl	800646c <vPortExitCritical>

	return xAlreadyYielded;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	2000490c 	.word	0x2000490c
 8004b6c:	200048e4 	.word	0x200048e4
 8004b70:	200048a4 	.word	0x200048a4
 8004b74:	200048ec 	.word	0x200048ec
 8004b78:	20004810 	.word	0x20004810
 8004b7c:	2000480c 	.word	0x2000480c
 8004b80:	200048f8 	.word	0x200048f8
 8004b84:	200048f4 	.word	0x200048f4
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b92:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <xTaskGetTickCount+0x1c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b98:	687b      	ldr	r3, [r7, #4]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	200048e8 	.word	0x200048e8

08004bac <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <uxTaskGetNumberOfTasks+0x14>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	200048e4 	.word	0x200048e4

08004bc4 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	2305      	movs	r3, #5
 8004bd6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8004bd8:	f7ff ff2c 	bl	8004a34 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <uxTaskGetSystemState+0x108>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d36b      	bcc.n	8004cbe <uxTaskGetSystemState+0xfa>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1898      	adds	r0, r3, r2
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4a32      	ldr	r2, [pc, #200]	@ (8004cd0 <uxTaskGetSystemState+0x10c>)
 8004c08:	4413      	add	r3, r2
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f000 fbc3 	bl	8005398 <prvListTasksWithinSingleList>
 8004c12:	4602      	mov	r2, r0
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e2      	bne.n	8004be6 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4613      	mov	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	4a28      	ldr	r2, [pc, #160]	@ (8004cd4 <uxTaskGetSystemState+0x110>)
 8004c32:	6811      	ldr	r1, [r2, #0]
 8004c34:	2202      	movs	r2, #2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fbae 	bl	8005398 <prvListTasksWithinSingleList>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	4413      	add	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4613      	mov	r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	4a20      	ldr	r2, [pc, #128]	@ (8004cd8 <uxTaskGetSystemState+0x114>)
 8004c56:	6811      	ldr	r1, [r2, #0]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fb9c 	bl	8005398 <prvListTasksWithinSingleList>
 8004c60:	4602      	mov	r2, r0
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	4413      	add	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	461a      	mov	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	2204      	movs	r2, #4
 8004c7a:	4918      	ldr	r1, [pc, #96]	@ (8004cdc <uxTaskGetSystemState+0x118>)
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fb8b 	bl	8005398 <prvListTasksWithinSingleList>
 8004c82:	4602      	mov	r2, r0
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	4413      	add	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4413      	add	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	461a      	mov	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	4910      	ldr	r1, [pc, #64]	@ (8004ce0 <uxTaskGetSystemState+0x11c>)
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fb7a 	bl	8005398 <prvListTasksWithinSingleList>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	4413      	add	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <uxTaskGetSystemState+0xfa>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004cb2:	f7fb fc79 	bl	80005a8 <AppTimerStatsValue>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	461a      	mov	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8004cbe:	f7ff fec7 	bl	8004a50 <xTaskResumeAll>

		return uxTask;
 8004cc2:	697b      	ldr	r3, [r7, #20]
	}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	200048e4 	.word	0x200048e4
 8004cd0:	20004810 	.word	0x20004810
 8004cd4:	2000489c 	.word	0x2000489c
 8004cd8:	200048a0 	.word	0x200048a0
 8004cdc:	200048b8 	.word	0x200048b8
 8004ce0:	200048d0 	.word	0x200048d0

08004ce4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cee:	4b4f      	ldr	r3, [pc, #316]	@ (8004e2c <xTaskIncrementTick+0x148>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f040 8089 	bne.w	8004e0a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8004e30 <xTaskIncrementTick+0x14c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d00:	4a4b      	ldr	r2, [pc, #300]	@ (8004e30 <xTaskIncrementTick+0x14c>)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d121      	bne.n	8004d50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d0c:	4b49      	ldr	r3, [pc, #292]	@ (8004e34 <xTaskIncrementTick+0x150>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	603b      	str	r3, [r7, #0]
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <xTaskIncrementTick+0x46>
 8004d2e:	4b41      	ldr	r3, [pc, #260]	@ (8004e34 <xTaskIncrementTick+0x150>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	4b40      	ldr	r3, [pc, #256]	@ (8004e38 <xTaskIncrementTick+0x154>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a3e      	ldr	r2, [pc, #248]	@ (8004e34 <xTaskIncrementTick+0x150>)
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4a3e      	ldr	r2, [pc, #248]	@ (8004e38 <xTaskIncrementTick+0x154>)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	4b3e      	ldr	r3, [pc, #248]	@ (8004e3c <xTaskIncrementTick+0x158>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3301      	adds	r3, #1
 8004d48:	4a3c      	ldr	r2, [pc, #240]	@ (8004e3c <xTaskIncrementTick+0x158>)
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	f000 fba2 	bl	8005494 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d50:	4b3b      	ldr	r3, [pc, #236]	@ (8004e40 <xTaskIncrementTick+0x15c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d348      	bcc.n	8004dec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d5a:	4b36      	ldr	r3, [pc, #216]	@ (8004e34 <xTaskIncrementTick+0x150>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d104      	bne.n	8004d6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d64:	4b36      	ldr	r3, [pc, #216]	@ (8004e40 <xTaskIncrementTick+0x15c>)
 8004d66:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6a:	601a      	str	r2, [r3, #0]
					break;
 8004d6c:	e03e      	b.n	8004dec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d6e:	4b31      	ldr	r3, [pc, #196]	@ (8004e34 <xTaskIncrementTick+0x150>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d203      	bcs.n	8004d8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d86:	4a2e      	ldr	r2, [pc, #184]	@ (8004e40 <xTaskIncrementTick+0x15c>)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d8c:	e02e      	b.n	8004dec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe ff3c 	bl	8003c10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d004      	beq.n	8004daa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	3318      	adds	r3, #24
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe ff33 	bl	8003c10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	2201      	movs	r2, #1
 8004db0:	409a      	lsls	r2, r3
 8004db2:	4b24      	ldr	r3, [pc, #144]	@ (8004e44 <xTaskIncrementTick+0x160>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	4a22      	ldr	r2, [pc, #136]	@ (8004e44 <xTaskIncrementTick+0x160>)
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e48 <xTaskIncrementTick+0x164>)
 8004dca:	441a      	add	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f7fe febf 	bl	8003b56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e4c <xTaskIncrementTick+0x168>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d3b9      	bcc.n	8004d5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004de6:	2301      	movs	r3, #1
 8004de8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dea:	e7b6      	b.n	8004d5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004dec:	4b17      	ldr	r3, [pc, #92]	@ (8004e4c <xTaskIncrementTick+0x168>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df2:	4915      	ldr	r1, [pc, #84]	@ (8004e48 <xTaskIncrementTick+0x164>)
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d907      	bls.n	8004e14 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8004e04:	2301      	movs	r3, #1
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	e004      	b.n	8004e14 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e0a:	4b11      	ldr	r3, [pc, #68]	@ (8004e50 <xTaskIncrementTick+0x16c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	4a0f      	ldr	r2, [pc, #60]	@ (8004e50 <xTaskIncrementTick+0x16c>)
 8004e12:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e14:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <xTaskIncrementTick+0x170>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e20:	697b      	ldr	r3, [r7, #20]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	2000490c 	.word	0x2000490c
 8004e30:	200048e8 	.word	0x200048e8
 8004e34:	2000489c 	.word	0x2000489c
 8004e38:	200048a0 	.word	0x200048a0
 8004e3c:	200048fc 	.word	0x200048fc
 8004e40:	20004904 	.word	0x20004904
 8004e44:	200048ec 	.word	0x200048ec
 8004e48:	20004810 	.word	0x20004810
 8004e4c:	2000480c 	.word	0x2000480c
 8004e50:	200048f4 	.word	0x200048f4
 8004e54:	200048f8 	.word	0x200048f8

08004e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e5e:	4b33      	ldr	r3, [pc, #204]	@ (8004f2c <vTaskSwitchContext+0xd4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e66:	4b32      	ldr	r3, [pc, #200]	@ (8004f30 <vTaskSwitchContext+0xd8>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e6c:	e05a      	b.n	8004f24 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 8004e6e:	4b30      	ldr	r3, [pc, #192]	@ (8004f30 <vTaskSwitchContext+0xd8>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004e74:	f7fb fb98 	bl	80005a8 <AppTimerStatsValue>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f34 <vTaskSwitchContext+0xdc>)
 8004e7e:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004e80:	4b2c      	ldr	r3, [pc, #176]	@ (8004f34 <vTaskSwitchContext+0xdc>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4b2c      	ldr	r3, [pc, #176]	@ (8004f38 <vTaskSwitchContext+0xe0>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d909      	bls.n	8004ea0 <vTaskSwitchContext+0x48>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f3c <vTaskSwitchContext+0xe4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004e92:	4a28      	ldr	r2, [pc, #160]	@ (8004f34 <vTaskSwitchContext+0xdc>)
 8004e94:	6810      	ldr	r0, [r2, #0]
 8004e96:	4a28      	ldr	r2, [pc, #160]	@ (8004f38 <vTaskSwitchContext+0xe0>)
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	1a82      	subs	r2, r0, r2
 8004e9c:	440a      	add	r2, r1
 8004e9e:	651a      	str	r2, [r3, #80]	@ 0x50
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004ea0:	4b24      	ldr	r3, [pc, #144]	@ (8004f34 <vTaskSwitchContext+0xdc>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a24      	ldr	r2, [pc, #144]	@ (8004f38 <vTaskSwitchContext+0xe0>)
 8004ea6:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea8:	4b25      	ldr	r3, [pc, #148]	@ (8004f40 <vTaskSwitchContext+0xe8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	fab3 f383 	clz	r3, r3
 8004eb4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004eb6:	7afb      	ldrb	r3, [r7, #11]
 8004eb8:	f1c3 031f 	rsb	r3, r3, #31
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	4921      	ldr	r1, [pc, #132]	@ (8004f44 <vTaskSwitchContext+0xec>)
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10b      	bne.n	8004eea <vTaskSwitchContext+0x92>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	607b      	str	r3, [r7, #4]
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	e7fd      	b.n	8004ee6 <vTaskSwitchContext+0x8e>
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4a13      	ldr	r2, [pc, #76]	@ (8004f44 <vTaskSwitchContext+0xec>)
 8004ef6:	4413      	add	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	605a      	str	r2, [r3, #4]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d104      	bne.n	8004f1a <vTaskSwitchContext+0xc2>
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	4a06      	ldr	r2, [pc, #24]	@ (8004f3c <vTaskSwitchContext+0xe4>)
 8004f22:	6013      	str	r3, [r2, #0]
}
 8004f24:	bf00      	nop
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	2000490c 	.word	0x2000490c
 8004f30:	200048f8 	.word	0x200048f8
 8004f34:	20004914 	.word	0x20004914
 8004f38:	20004910 	.word	0x20004910
 8004f3c:	2000480c 	.word	0x2000480c
 8004f40:	200048ec 	.word	0x200048ec
 8004f44:	20004810 	.word	0x20004810

08004f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10b      	bne.n	8004f70 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	60fb      	str	r3, [r7, #12]
}
 8004f6a:	bf00      	nop
 8004f6c:	bf00      	nop
 8004f6e:	e7fd      	b.n	8004f6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f70:	4b07      	ldr	r3, [pc, #28]	@ (8004f90 <vTaskPlaceOnEventList+0x48>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3318      	adds	r3, #24
 8004f76:	4619      	mov	r1, r3
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fe fe10 	bl	8003b9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f7e:	2101      	movs	r1, #1
 8004f80:	6838      	ldr	r0, [r7, #0]
 8004f82:	f000 fd8d 	bl	8005aa0 <prvAddCurrentTaskToDelayedList>
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	2000480c 	.word	0x2000480c

08004f94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	617b      	str	r3, [r7, #20]
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	e7fd      	b.n	8004fba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3318      	adds	r3, #24
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f7fe fdc5 	bl	8003b56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	68b8      	ldr	r0, [r7, #8]
 8004fdc:	f000 fd60 	bl	8005aa0 <prvAddCurrentTaskToDelayedList>
	}
 8004fe0:	bf00      	nop
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	2000480c 	.word	0x2000480c

08004fec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10b      	bne.n	800501a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	60fb      	str	r3, [r7, #12]
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	e7fd      	b.n	8005016 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	3318      	adds	r3, #24
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fdf6 	bl	8003c10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005024:	4b1d      	ldr	r3, [pc, #116]	@ (800509c <xTaskRemoveFromEventList+0xb0>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d11c      	bne.n	8005066 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	3304      	adds	r3, #4
 8005030:	4618      	mov	r0, r3
 8005032:	f7fe fded 	bl	8003c10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503a:	2201      	movs	r2, #1
 800503c:	409a      	lsls	r2, r3
 800503e:	4b18      	ldr	r3, [pc, #96]	@ (80050a0 <xTaskRemoveFromEventList+0xb4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4313      	orrs	r3, r2
 8005044:	4a16      	ldr	r2, [pc, #88]	@ (80050a0 <xTaskRemoveFromEventList+0xb4>)
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4a13      	ldr	r2, [pc, #76]	@ (80050a4 <xTaskRemoveFromEventList+0xb8>)
 8005056:	441a      	add	r2, r3
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	3304      	adds	r3, #4
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f7fe fd79 	bl	8003b56 <vListInsertEnd>
 8005064:	e005      	b.n	8005072 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3318      	adds	r3, #24
 800506a:	4619      	mov	r1, r3
 800506c:	480e      	ldr	r0, [pc, #56]	@ (80050a8 <xTaskRemoveFromEventList+0xbc>)
 800506e:	f7fe fd72 	bl	8003b56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005076:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <xTaskRemoveFromEventList+0xc0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507c:	429a      	cmp	r2, r3
 800507e:	d905      	bls.n	800508c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005080:	2301      	movs	r3, #1
 8005082:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005084:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <xTaskRemoveFromEventList+0xc4>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	e001      	b.n	8005090 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005090:	697b      	ldr	r3, [r7, #20]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	2000490c 	.word	0x2000490c
 80050a0:	200048ec 	.word	0x200048ec
 80050a4:	20004810 	.word	0x20004810
 80050a8:	200048a4 	.word	0x200048a4
 80050ac:	2000480c 	.word	0x2000480c
 80050b0:	200048f8 	.word	0x200048f8

080050b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050bc:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <vTaskInternalSetTimeOutState+0x24>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050c4:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <vTaskInternalSetTimeOutState+0x28>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	605a      	str	r2, [r3, #4]
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	200048fc 	.word	0x200048fc
 80050dc:	200048e8 	.word	0x200048e8

080050e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	613b      	str	r3, [r7, #16]
}
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10b      	bne.n	8005126 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	60fb      	str	r3, [r7, #12]
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	e7fd      	b.n	8005122 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005126:	f001 f96f 	bl	8006408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800512a:	4b1d      	ldr	r3, [pc, #116]	@ (80051a0 <xTaskCheckForTimeOut+0xc0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d102      	bne.n	800514a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e023      	b.n	8005192 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	4b15      	ldr	r3, [pc, #84]	@ (80051a4 <xTaskCheckForTimeOut+0xc4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d007      	beq.n	8005166 <xTaskCheckForTimeOut+0x86>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	429a      	cmp	r2, r3
 800515e:	d302      	bcc.n	8005166 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005160:	2301      	movs	r3, #1
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	e015      	b.n	8005192 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	429a      	cmp	r2, r3
 800516e:	d20b      	bcs.n	8005188 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	1ad2      	subs	r2, r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff ff99 	bl	80050b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	e004      	b.n	8005192 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800518e:	2301      	movs	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005192:	f001 f96b 	bl	800646c <vPortExitCritical>

	return xReturn;
 8005196:	69fb      	ldr	r3, [r7, #28]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	200048e8 	.word	0x200048e8
 80051a4:	200048fc 	.word	0x200048fc

080051a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051ac:	4b03      	ldr	r3, [pc, #12]	@ (80051bc <vTaskMissedYield+0x14>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	200048f8 	.word	0x200048f8

080051c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051c8:	f000 f852 	bl	8005270 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <prvIdleTask+0x28>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d9f9      	bls.n	80051c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051d4:	4b05      	ldr	r3, [pc, #20]	@ (80051ec <prvIdleTask+0x2c>)
 80051d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051e4:	e7f0      	b.n	80051c8 <prvIdleTask+0x8>
 80051e6:	bf00      	nop
 80051e8:	20004810 	.word	0x20004810
 80051ec:	e000ed04 	.word	0xe000ed04

080051f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051f6:	2300      	movs	r3, #0
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	e00c      	b.n	8005216 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4a12      	ldr	r2, [pc, #72]	@ (8005250 <prvInitialiseTaskLists+0x60>)
 8005208:	4413      	add	r3, r2
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fc76 	bl	8003afc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3301      	adds	r3, #1
 8005214:	607b      	str	r3, [r7, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b04      	cmp	r3, #4
 800521a:	d9ef      	bls.n	80051fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800521c:	480d      	ldr	r0, [pc, #52]	@ (8005254 <prvInitialiseTaskLists+0x64>)
 800521e:	f7fe fc6d 	bl	8003afc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005222:	480d      	ldr	r0, [pc, #52]	@ (8005258 <prvInitialiseTaskLists+0x68>)
 8005224:	f7fe fc6a 	bl	8003afc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005228:	480c      	ldr	r0, [pc, #48]	@ (800525c <prvInitialiseTaskLists+0x6c>)
 800522a:	f7fe fc67 	bl	8003afc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800522e:	480c      	ldr	r0, [pc, #48]	@ (8005260 <prvInitialiseTaskLists+0x70>)
 8005230:	f7fe fc64 	bl	8003afc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005234:	480b      	ldr	r0, [pc, #44]	@ (8005264 <prvInitialiseTaskLists+0x74>)
 8005236:	f7fe fc61 	bl	8003afc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800523a:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <prvInitialiseTaskLists+0x78>)
 800523c:	4a05      	ldr	r2, [pc, #20]	@ (8005254 <prvInitialiseTaskLists+0x64>)
 800523e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005240:	4b0a      	ldr	r3, [pc, #40]	@ (800526c <prvInitialiseTaskLists+0x7c>)
 8005242:	4a05      	ldr	r2, [pc, #20]	@ (8005258 <prvInitialiseTaskLists+0x68>)
 8005244:	601a      	str	r2, [r3, #0]
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20004810 	.word	0x20004810
 8005254:	20004874 	.word	0x20004874
 8005258:	20004888 	.word	0x20004888
 800525c:	200048a4 	.word	0x200048a4
 8005260:	200048b8 	.word	0x200048b8
 8005264:	200048d0 	.word	0x200048d0
 8005268:	2000489c 	.word	0x2000489c
 800526c:	200048a0 	.word	0x200048a0

08005270 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005276:	e019      	b.n	80052ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005278:	f001 f8c6 	bl	8006408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800527c:	4b10      	ldr	r3, [pc, #64]	@ (80052c0 <prvCheckTasksWaitingTermination+0x50>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	4618      	mov	r0, r3
 800528a:	f7fe fcc1 	bl	8003c10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800528e:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <prvCheckTasksWaitingTermination+0x54>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3b01      	subs	r3, #1
 8005294:	4a0b      	ldr	r2, [pc, #44]	@ (80052c4 <prvCheckTasksWaitingTermination+0x54>)
 8005296:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005298:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <prvCheckTasksWaitingTermination+0x58>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3b01      	subs	r3, #1
 800529e:	4a0a      	ldr	r2, [pc, #40]	@ (80052c8 <prvCheckTasksWaitingTermination+0x58>)
 80052a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052a2:	f001 f8e3 	bl	800646c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f8e4 	bl	8005474 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052ac:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <prvCheckTasksWaitingTermination+0x58>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e1      	bne.n	8005278 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	200048b8 	.word	0x200048b8
 80052c4:	200048e4 	.word	0x200048e4
 80052c8:	200048cc 	.word	0x200048cc

080052cc <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d102      	bne.n	80052e6 <vTaskGetInfo+0x1a>
 80052e0:	4b2c      	ldr	r3, [pc, #176]	@ (8005394 <vTaskGetInfo+0xc8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	e000      	b.n	80052e8 <vTaskGetInfo+0x1c>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	2b05      	cmp	r3, #5
 8005326:	d01a      	beq.n	800535e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8005328:	4b1a      	ldr	r3, [pc, #104]	@ (8005394 <vTaskGetInfo+0xc8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	429a      	cmp	r2, r3
 8005330:	d103      	bne.n	800533a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2200      	movs	r2, #0
 8005336:	731a      	strb	r2, [r3, #12]
 8005338:	e018      	b.n	800536c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	2b03      	cmp	r3, #3
 8005344:	d112      	bne.n	800536c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8005346:	f7ff fb75 	bl	8004a34 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2202      	movs	r2, #2
 8005356:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8005358:	f7ff fb7a 	bl	8004a50 <xTaskResumeAll>
 800535c:	e006      	b.n	800536c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800535e:	6978      	ldr	r0, [r7, #20]
 8005360:	f7ff fab0 	bl	80048c4 <eTaskGetState>
 8005364:	4603      	mov	r3, r0
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f860 	bl	800543c <prvTaskCheckFreeStackSpace>
 800537c:	4603      	mov	r3, r0
 800537e:	461a      	mov	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8005384:	e002      	b.n	800538c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	841a      	strh	r2, [r3, #32]
	}
 800538c:	bf00      	nop
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	2000480c 	.word	0x2000480c

08005398 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	@ 0x28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d03f      	beq.n	8005432 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	605a      	str	r2, [r3, #4]
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	3308      	adds	r3, #8
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d104      	bne.n	80053d6 <prvListTasksWithinSingleList+0x3e>
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	605a      	str	r2, [r3, #4]
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	61bb      	str	r3, [r7, #24]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	605a      	str	r2, [r3, #4]
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	3308      	adds	r3, #8
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d104      	bne.n	8005402 <prvListTasksWithinSingleList+0x6a>
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	605a      	str	r2, [r3, #4]
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800540a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800540c:	4613      	mov	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	461a      	mov	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1899      	adds	r1, r3, r2
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	2201      	movs	r2, #1
 800541e:	6978      	ldr	r0, [r7, #20]
 8005420:	f7ff ff54 	bl	80052cc <vTaskGetInfo>
				uxTask++;
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	3301      	adds	r3, #1
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	429a      	cmp	r2, r3
 8005430:	d1d5      	bne.n	80053de <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005434:	4618      	mov	r0, r3
 8005436:	3728      	adds	r7, #40	@ 0x28
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005448:	e005      	b.n	8005456 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3301      	adds	r3, #1
 800544e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3301      	adds	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2ba5      	cmp	r3, #165	@ 0xa5
 800545c:	d0f5      	beq.n	800544a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	089b      	lsrs	r3, r3, #2
 8005462:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	b29b      	uxth	r3, r3
	}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005480:	4618      	mov	r0, r3
 8005482:	f001 f9ab 	bl	80067dc <vPortFree>
			vPortFree( pxTCB );
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f001 f9a8 	bl	80067dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800548c:	bf00      	nop
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800549a:	4b0c      	ldr	r3, [pc, #48]	@ (80054cc <prvResetNextTaskUnblockTime+0x38>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054a4:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <prvResetNextTaskUnblockTime+0x3c>)
 80054a6:	f04f 32ff 	mov.w	r2, #4294967295
 80054aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054ac:	e008      	b.n	80054c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ae:	4b07      	ldr	r3, [pc, #28]	@ (80054cc <prvResetNextTaskUnblockTime+0x38>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4a04      	ldr	r2, [pc, #16]	@ (80054d0 <prvResetNextTaskUnblockTime+0x3c>)
 80054be:	6013      	str	r3, [r2, #0]
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	2000489c 	.word	0x2000489c
 80054d0:	20004904 	.word	0x20004904

080054d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054da:	4b0b      	ldr	r3, [pc, #44]	@ (8005508 <xTaskGetSchedulerState+0x34>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d102      	bne.n	80054e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054e2:	2301      	movs	r3, #1
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	e008      	b.n	80054fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054e8:	4b08      	ldr	r3, [pc, #32]	@ (800550c <xTaskGetSchedulerState+0x38>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054f0:	2302      	movs	r3, #2
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	e001      	b.n	80054fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054f6:	2300      	movs	r3, #0
 80054f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054fa:	687b      	ldr	r3, [r7, #4]
	}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	200048f0 	.word	0x200048f0
 800550c:	2000490c 	.word	0x2000490c

08005510 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d070      	beq.n	8005608 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005526:	4b3b      	ldr	r3, [pc, #236]	@ (8005614 <xTaskPriorityDisinherit+0x104>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	429a      	cmp	r2, r3
 800552e:	d00b      	beq.n	8005548 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	60fb      	str	r3, [r7, #12]
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	e7fd      	b.n	8005544 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10b      	bne.n	8005568 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	60bb      	str	r3, [r7, #8]
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800556c:	1e5a      	subs	r2, r3, #1
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800557a:	429a      	cmp	r2, r3
 800557c:	d044      	beq.n	8005608 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d140      	bne.n	8005608 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	3304      	adds	r3, #4
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe fb40 	bl	8003c10 <uxListRemove>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d115      	bne.n	80055c2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559a:	491f      	ldr	r1, [pc, #124]	@ (8005618 <xTaskPriorityDisinherit+0x108>)
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xTaskPriorityDisinherit+0xb2>
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b0:	2201      	movs	r2, #1
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43da      	mvns	r2, r3
 80055b8:	4b18      	ldr	r3, [pc, #96]	@ (800561c <xTaskPriorityDisinherit+0x10c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4013      	ands	r3, r2
 80055be:	4a17      	ldr	r2, [pc, #92]	@ (800561c <xTaskPriorityDisinherit+0x10c>)
 80055c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ce:	f1c3 0205 	rsb	r2, r3, #5
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055da:	2201      	movs	r2, #1
 80055dc:	409a      	lsls	r2, r3
 80055de:	4b0f      	ldr	r3, [pc, #60]	@ (800561c <xTaskPriorityDisinherit+0x10c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	4a0d      	ldr	r2, [pc, #52]	@ (800561c <xTaskPriorityDisinherit+0x10c>)
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4a08      	ldr	r2, [pc, #32]	@ (8005618 <xTaskPriorityDisinherit+0x108>)
 80055f6:	441a      	add	r2, r3
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f7fe faa9 	bl	8003b56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005604:	2301      	movs	r3, #1
 8005606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005608:	697b      	ldr	r3, [r7, #20]
	}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	2000480c 	.word	0x2000480c
 8005618:	20004810 	.word	0x20004810
 800561c:	200048ec 	.word	0x200048ec

08005620 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f001 fc82 	bl	8006f36 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fa fdd6 	bl	80001e4 <strlen>
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	e007      	b.n	800564c <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	2220      	movs	r2, #32
 8005644:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3301      	adds	r3, #1
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b08      	cmp	r3, #8
 8005650:	d9f4      	bls.n	800563c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4413      	add	r3, r2
	}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b089      	sub	sp, #36	@ 0x24
 8005670:	af02      	add	r7, sp, #8
 8005672:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800567a:	4b45      	ldr	r3, [pc, #276]	@ (8005790 <vTaskList+0x124>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8005680:	4b43      	ldr	r3, [pc, #268]	@ (8005790 <vTaskList+0x124>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4613      	mov	r3, r2
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4618      	mov	r0, r3
 800568e:	f000 ffdd 	bl	800664c <pvPortMalloc>
 8005692:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d076      	beq.n	8005788 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800569a:	2200      	movs	r2, #0
 800569c:	68f9      	ldr	r1, [r7, #12]
 800569e:	68b8      	ldr	r0, [r7, #8]
 80056a0:	f7ff fa90 	bl	8004bc4 <uxTaskGetSystemState>
 80056a4:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	e066      	b.n	800577a <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4613      	mov	r3, r2
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	461a      	mov	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4413      	add	r3, r2
 80056bc:	7b1b      	ldrb	r3, [r3, #12]
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d81b      	bhi.n	80056fa <vTaskList+0x8e>
 80056c2:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <vTaskList+0x5c>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	080056dd 	.word	0x080056dd
 80056cc:	080056e3 	.word	0x080056e3
 80056d0:	080056e9 	.word	0x080056e9
 80056d4:	080056ef 	.word	0x080056ef
 80056d8:	080056f5 	.word	0x080056f5
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 80056dc:	2358      	movs	r3, #88	@ 0x58
 80056de:	74fb      	strb	r3, [r7, #19]
										break;
 80056e0:	e00e      	b.n	8005700 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 80056e2:	2352      	movs	r3, #82	@ 0x52
 80056e4:	74fb      	strb	r3, [r7, #19]
										break;
 80056e6:	e00b      	b.n	8005700 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80056e8:	2342      	movs	r3, #66	@ 0x42
 80056ea:	74fb      	strb	r3, [r7, #19]
										break;
 80056ec:	e008      	b.n	8005700 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80056ee:	2353      	movs	r3, #83	@ 0x53
 80056f0:	74fb      	strb	r3, [r7, #19]
										break;
 80056f2:	e005      	b.n	8005700 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 80056f4:	2344      	movs	r3, #68	@ 0x44
 80056f6:	74fb      	strb	r3, [r7, #19]
										break;
 80056f8:	e002      	b.n	8005700 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 80056fa:	2300      	movs	r3, #0
 80056fc:	74fb      	strb	r3, [r7, #19]
										break;
 80056fe:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	461a      	mov	r2, r3
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	4413      	add	r3, r2
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff ff83 	bl	8005620 <prvWriteNameToBuffer>
 800571a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800571c:	7cf9      	ldrb	r1, [r7, #19]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4613      	mov	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	461a      	mov	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4413      	add	r3, r2
 800572e:	6918      	ldr	r0, [r3, #16]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4613      	mov	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	461a      	mov	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4413      	add	r3, r2
 8005740:	8c1b      	ldrh	r3, [r3, #32]
 8005742:	461c      	mov	r4, r3
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4613      	mov	r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	461a      	mov	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4413      	add	r3, r2
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	9400      	str	r4, [sp, #0]
 800575a:	4603      	mov	r3, r0
 800575c:	460a      	mov	r2, r1
 800575e:	490d      	ldr	r1, [pc, #52]	@ (8005794 <vTaskList+0x128>)
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 fa61 	bl	8006c28 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fa fd3c 	bl	80001e4 <strlen>
 800576c:	4602      	mov	r2, r0
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4413      	add	r3, r2
 8005772:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	3301      	adds	r3, #1
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	429a      	cmp	r2, r3
 8005780:	d394      	bcc.n	80056ac <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8005782:	68b8      	ldr	r0, [r7, #8]
 8005784:	f001 f82a 	bl	80067dc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005788:	bf00      	nop
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	bd90      	pop	{r4, r7, pc}
 8005790:	200048e4 	.word	0x200048e4
 8005794:	08008944 	.word	0x08008944

08005798 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80057a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005890 <vTaskGetRunTimeStats+0xf8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80057ac:	4b38      	ldr	r3, [pc, #224]	@ (8005890 <vTaskGetRunTimeStats+0xf8>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 ff47 	bl	800664c <pvPortMalloc>
 80057be:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d05f      	beq.n	8005886 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80057c6:	f107 030c 	add.w	r3, r7, #12
 80057ca:	461a      	mov	r2, r3
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	6978      	ldr	r0, [r7, #20]
 80057d0:	f7ff f9f8 	bl	8004bc4 <uxTaskGetSystemState>
 80057d4:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005894 <vTaskGetRunTimeStats+0xfc>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d04b      	beq.n	8005880 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 80057e8:	2300      	movs	r3, #0
 80057ea:	61fb      	str	r3, [r7, #28]
 80057ec:	e044      	b.n	8005878 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	461a      	mov	r2, r3
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	4413      	add	r3, r2
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	fbb2 f3f3 	udiv	r3, r2, r3
 8005806:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	4613      	mov	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	461a      	mov	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4413      	add	r3, r2
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff feff 	bl	8005620 <prvWriteNameToBuffer>
 8005822:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00e      	beq.n	8005848 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	4613      	mov	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	461a      	mov	r2, r3
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4413      	add	r3, r2
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4916      	ldr	r1, [pc, #88]	@ (8005898 <vTaskGetRunTimeStats+0x100>)
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f001 f9f1 	bl	8006c28 <siprintf>
 8005846:	e00d      	b.n	8005864 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	4613      	mov	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	461a      	mov	r2, r3
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	461a      	mov	r2, r3
 800585c:	490f      	ldr	r1, [pc, #60]	@ (800589c <vTaskGetRunTimeStats+0x104>)
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f001 f9e2 	bl	8006c28 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7fa fcbd 	bl	80001e4 <strlen>
 800586a:	4602      	mov	r2, r0
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4413      	add	r3, r2
 8005870:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	3301      	adds	r3, #1
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	429a      	cmp	r2, r3
 800587e:	d3b6      	bcc.n	80057ee <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8005880:	6978      	ldr	r0, [r7, #20]
 8005882:	f000 ffab 	bl	80067dc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005886:	bf00      	nop
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	200048e4 	.word	0x200048e4
 8005894:	51eb851f 	.word	0x51eb851f
 8005898:	08008954 	.word	0x08008954
 800589c:	08008960 	.word	0x08008960

080058a0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80058aa:	f000 fdad 	bl	8006408 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80058ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005928 <ulTaskNotifyTake+0x88>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d113      	bne.n	80058e0 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80058b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005928 <ulTaskNotifyTake+0x88>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058c8:	2101      	movs	r1, #1
 80058ca:	6838      	ldr	r0, [r7, #0]
 80058cc:	f000 f8e8 	bl	8005aa0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80058d0:	4b16      	ldr	r3, [pc, #88]	@ (800592c <ulTaskNotifyTake+0x8c>)
 80058d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80058e0:	f000 fdc4 	bl	800646c <vPortExitCritical>

		taskENTER_CRITICAL();
 80058e4:	f000 fd90 	bl	8006408 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80058e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005928 <ulTaskNotifyTake+0x88>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ee:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00c      	beq.n	8005910 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d004      	beq.n	8005906 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80058fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005928 <ulTaskNotifyTake+0x88>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2200      	movs	r2, #0
 8005902:	655a      	str	r2, [r3, #84]	@ 0x54
 8005904:	e004      	b.n	8005910 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005906:	4b08      	ldr	r3, [pc, #32]	@ (8005928 <ulTaskNotifyTake+0x88>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	3a01      	subs	r2, #1
 800590e:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005910:	4b05      	ldr	r3, [pc, #20]	@ (8005928 <ulTaskNotifyTake+0x88>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800591a:	f000 fda7 	bl	800646c <vPortExitCritical>

		return ulReturn;
 800591e:	68fb      	ldr	r3, [r7, #12]
	}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	2000480c 	.word	0x2000480c
 800592c:	e000ed04 	.word	0xe000ed04

08005930 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	@ 0x28
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	4613      	mov	r3, r2
 800593e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005940:	2301      	movs	r3, #1
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10b      	bne.n	8005962 <xTaskGenericNotify+0x32>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	61bb      	str	r3, [r7, #24]
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	e7fd      	b.n	800595e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005966:	f000 fd4f 	bl	8006408 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800597e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	2b04      	cmp	r3, #4
 800598c:	d827      	bhi.n	80059de <xTaskGenericNotify+0xae>
 800598e:	a201      	add	r2, pc, #4	@ (adr r2, 8005994 <xTaskGenericNotify+0x64>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	08005a01 	.word	0x08005a01
 8005998:	080059a9 	.word	0x080059a9
 800599c:	080059b7 	.word	0x080059b7
 80059a0:	080059c3 	.word	0x080059c3
 80059a4:	080059cb 	.word	0x080059cb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80059b4:	e027      	b.n	8005a06 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80059c0:	e021      	b.n	8005a06 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80059c8:	e01d      	b.n	8005a06 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80059ca:	7ffb      	ldrb	r3, [r7, #31]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d003      	beq.n	80059d8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80059d6:	e016      	b.n	8005a06 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80059d8:	2300      	movs	r3, #0
 80059da:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80059dc:	e013      	b.n	8005a06 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e6:	d00d      	beq.n	8005a04 <xTaskGenericNotify+0xd4>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	617b      	str	r3, [r7, #20]
}
 80059fa:	bf00      	nop
 80059fc:	bf00      	nop
 80059fe:	e7fd      	b.n	80059fc <xTaskGenericNotify+0xcc>
					break;
 8005a00:	bf00      	nop
 8005a02:	e000      	b.n	8005a06 <xTaskGenericNotify+0xd6>

					break;
 8005a04:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005a06:	7ffb      	ldrb	r3, [r7, #31]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d13a      	bne.n	8005a82 <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe f8fd 	bl	8003c10 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	409a      	lsls	r2, r3
 8005a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8005a90 <xTaskGenericNotify+0x160>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	4a1a      	ldr	r2, [pc, #104]	@ (8005a90 <xTaskGenericNotify+0x160>)
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4a17      	ldr	r2, [pc, #92]	@ (8005a94 <xTaskGenericNotify+0x164>)
 8005a36:	441a      	add	r2, r3
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f7fe f889 	bl	8003b56 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00b      	beq.n	8005a64 <xTaskGenericNotify+0x134>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	613b      	str	r3, [r7, #16]
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	e7fd      	b.n	8005a60 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a68:	4b0b      	ldr	r3, [pc, #44]	@ (8005a98 <xTaskGenericNotify+0x168>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d907      	bls.n	8005a82 <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <xTaskGenericNotify+0x16c>)
 8005a74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005a82:	f000 fcf3 	bl	800646c <vPortExitCritical>

		return xReturn;
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3728      	adds	r7, #40	@ 0x28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	200048ec 	.word	0x200048ec
 8005a94:	20004810 	.word	0x20004810
 8005a98:	2000480c 	.word	0x2000480c
 8005a9c:	e000ed04 	.word	0xe000ed04

08005aa0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aaa:	4b29      	ldr	r3, [pc, #164]	@ (8005b50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ab0:	4b28      	ldr	r3, [pc, #160]	@ (8005b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe f8aa 	bl	8003c10 <uxListRemove>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10b      	bne.n	8005ada <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ac2:	4b24      	ldr	r3, [pc, #144]	@ (8005b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac8:	2201      	movs	r2, #1
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43da      	mvns	r2, r3
 8005ad0:	4b21      	ldr	r3, [pc, #132]	@ (8005b58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	4a20      	ldr	r2, [pc, #128]	@ (8005b58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ad8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d10a      	bne.n	8005af8 <prvAddCurrentTaskToDelayedList+0x58>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4619      	mov	r1, r3
 8005af0:	481a      	ldr	r0, [pc, #104]	@ (8005b5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005af2:	f7fe f830 	bl	8003b56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005af6:	e026      	b.n	8005b46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4413      	add	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b00:	4b14      	ldr	r3, [pc, #80]	@ (8005b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d209      	bcs.n	8005b24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b10:	4b13      	ldr	r3, [pc, #76]	@ (8005b60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	4b0f      	ldr	r3, [pc, #60]	@ (8005b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f7fe f83e 	bl	8003b9e <vListInsert>
}
 8005b22:	e010      	b.n	8005b46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b24:	4b0f      	ldr	r3, [pc, #60]	@ (8005b64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	4b0a      	ldr	r3, [pc, #40]	@ (8005b54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f7fe f834 	bl	8003b9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b36:	4b0c      	ldr	r3, [pc, #48]	@ (8005b68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d202      	bcs.n	8005b46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b40:	4a09      	ldr	r2, [pc, #36]	@ (8005b68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6013      	str	r3, [r2, #0]
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200048e8 	.word	0x200048e8
 8005b54:	2000480c 	.word	0x2000480c
 8005b58:	200048ec 	.word	0x200048ec
 8005b5c:	200048d0 	.word	0x200048d0
 8005b60:	200048a0 	.word	0x200048a0
 8005b64:	2000489c 	.word	0x2000489c
 8005b68:	20004904 	.word	0x20004904

08005b6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b76:	f000 fae1 	bl	800613c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b7a:	4b12      	ldr	r3, [pc, #72]	@ (8005bc4 <xTimerCreateTimerTask+0x58>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00b      	beq.n	8005b9a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8005b82:	4b11      	ldr	r3, [pc, #68]	@ (8005bc8 <xTimerCreateTimerTask+0x5c>)
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	2302      	movs	r3, #2
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005b90:	490e      	ldr	r1, [pc, #56]	@ (8005bcc <xTimerCreateTimerTask+0x60>)
 8005b92:	480f      	ldr	r0, [pc, #60]	@ (8005bd0 <xTimerCreateTimerTask+0x64>)
 8005b94:	f7fe fd1e 	bl	80045d4 <xTaskCreate>
 8005b98:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10b      	bne.n	8005bb8 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	603b      	str	r3, [r7, #0]
}
 8005bb2:	bf00      	nop
 8005bb4:	bf00      	nop
 8005bb6:	e7fd      	b.n	8005bb4 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8005bb8:	687b      	ldr	r3, [r7, #4]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20004948 	.word	0x20004948
 8005bc8:	2000494c 	.word	0x2000494c
 8005bcc:	0800896c 	.word	0x0800896c
 8005bd0:	08005d0d 	.word	0x08005d0d

08005bd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	@ 0x28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10b      	bne.n	8005c04 <xTimerGenericCommand+0x30>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	623b      	str	r3, [r7, #32]
}
 8005bfe:	bf00      	nop
 8005c00:	bf00      	nop
 8005c02:	e7fd      	b.n	8005c00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c04:	4b19      	ldr	r3, [pc, #100]	@ (8005c6c <xTimerGenericCommand+0x98>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d02a      	beq.n	8005c62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	dc18      	bgt.n	8005c50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c1e:	f7ff fc59 	bl	80054d4 <xTaskGetSchedulerState>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d109      	bne.n	8005c3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c28:	4b10      	ldr	r3, [pc, #64]	@ (8005c6c <xTimerGenericCommand+0x98>)
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	f107 0114 	add.w	r1, r7, #20
 8005c30:	2300      	movs	r3, #0
 8005c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c34:	f7fe f8e0 	bl	8003df8 <xQueueGenericSend>
 8005c38:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c3a:	e012      	b.n	8005c62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c6c <xTimerGenericCommand+0x98>)
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	f107 0114 	add.w	r1, r7, #20
 8005c44:	2300      	movs	r3, #0
 8005c46:	2200      	movs	r2, #0
 8005c48:	f7fe f8d6 	bl	8003df8 <xQueueGenericSend>
 8005c4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c4e:	e008      	b.n	8005c62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c50:	4b06      	ldr	r3, [pc, #24]	@ (8005c6c <xTimerGenericCommand+0x98>)
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	f107 0114 	add.w	r1, r7, #20
 8005c58:	2300      	movs	r3, #0
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	f7fe f9ce 	bl	8003ffc <xQueueGenericSendFromISR>
 8005c60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3728      	adds	r7, #40	@ 0x28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20004948 	.word	0x20004948

08005c70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c7a:	4b23      	ldr	r3, [pc, #140]	@ (8005d08 <prvProcessExpiredTimer+0x98>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fd ffc1 	bl	8003c10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d023      	beq.n	8005ce4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	18d1      	adds	r1, r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	6978      	ldr	r0, [r7, #20]
 8005caa:	f000 f8d5 	bl	8005e58 <prvInsertTimerInActiveList>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d020      	beq.n	8005cf6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	6978      	ldr	r0, [r7, #20]
 8005cc0:	f7ff ff88 	bl	8005bd4 <xTimerGenericCommand>
 8005cc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d114      	bne.n	8005cf6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	60fb      	str	r3, [r7, #12]
}
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	e7fd      	b.n	8005ce0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	6978      	ldr	r0, [r7, #20]
 8005cfc:	4798      	blx	r3
}
 8005cfe:	bf00      	nop
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20004940 	.word	0x20004940

08005d0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d14:	f107 0308 	add.w	r3, r7, #8
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 f859 	bl	8005dd0 <prvGetNextExpireTime>
 8005d1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4619      	mov	r1, r3
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f805 	bl	8005d34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d2a:	f000 f8d7 	bl	8005edc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d2e:	bf00      	nop
 8005d30:	e7f0      	b.n	8005d14 <prvTimerTask+0x8>
	...

08005d34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d3e:	f7fe fe79 	bl	8004a34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d42:	f107 0308 	add.w	r3, r7, #8
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 f866 	bl	8005e18 <prvSampleTimeNow>
 8005d4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d130      	bne.n	8005db6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <prvProcessTimerOrBlockTask+0x3c>
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d806      	bhi.n	8005d70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d62:	f7fe fe75 	bl	8004a50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff ff81 	bl	8005c70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d6e:	e024      	b.n	8005dba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d76:	4b13      	ldr	r3, [pc, #76]	@ (8005dc4 <prvProcessTimerOrBlockTask+0x90>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <prvProcessTimerOrBlockTask+0x50>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <prvProcessTimerOrBlockTask+0x52>
 8005d84:	2300      	movs	r3, #0
 8005d86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d88:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc8 <prvProcessTimerOrBlockTask+0x94>)
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	4619      	mov	r1, r3
 8005d96:	f7fe fbe9 	bl	800456c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d9a:	f7fe fe59 	bl	8004a50 <xTaskResumeAll>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005da4:	4b09      	ldr	r3, [pc, #36]	@ (8005dcc <prvProcessTimerOrBlockTask+0x98>)
 8005da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	f3bf 8f6f 	isb	sy
}
 8005db4:	e001      	b.n	8005dba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005db6:	f7fe fe4b 	bl	8004a50 <xTaskResumeAll>
}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20004944 	.word	0x20004944
 8005dc8:	20004948 	.word	0x20004948
 8005dcc:	e000ed04 	.word	0xe000ed04

08005dd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e14 <prvGetNextExpireTime+0x44>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <prvGetNextExpireTime+0x16>
 8005de2:	2201      	movs	r2, #1
 8005de4:	e000      	b.n	8005de8 <prvGetNextExpireTime+0x18>
 8005de6:	2200      	movs	r2, #0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d105      	bne.n	8005e00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005df4:	4b07      	ldr	r3, [pc, #28]	@ (8005e14 <prvGetNextExpireTime+0x44>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	e001      	b.n	8005e04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e04:	68fb      	ldr	r3, [r7, #12]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20004940 	.word	0x20004940

08005e18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e20:	f7fe feb4 	bl	8004b8c <xTaskGetTickCount>
 8005e24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e26:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <prvSampleTimeNow+0x3c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d205      	bcs.n	8005e3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e30:	f000 f91e 	bl	8006070 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e002      	b.n	8005e42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e42:	4a04      	ldr	r2, [pc, #16]	@ (8005e54 <prvSampleTimeNow+0x3c>)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e48:	68fb      	ldr	r3, [r7, #12]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20004950 	.word	0x20004950

08005e58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d812      	bhi.n	8005ea4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	1ad2      	subs	r2, r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d302      	bcc.n	8005e92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e01b      	b.n	8005eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e92:	4b10      	ldr	r3, [pc, #64]	@ (8005ed4 <prvInsertTimerInActiveList+0x7c>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f7fd fe7e 	bl	8003b9e <vListInsert>
 8005ea2:	e012      	b.n	8005eca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d206      	bcs.n	8005eba <prvInsertTimerInActiveList+0x62>
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d302      	bcc.n	8005eba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e007      	b.n	8005eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eba:	4b07      	ldr	r3, [pc, #28]	@ (8005ed8 <prvInsertTimerInActiveList+0x80>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f7fd fe6a 	bl	8003b9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005eca:	697b      	ldr	r3, [r7, #20]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20004944 	.word	0x20004944
 8005ed8:	20004940 	.word	0x20004940

08005edc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08c      	sub	sp, #48	@ 0x30
 8005ee0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ee2:	e0b2      	b.n	800604a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f2c0 80af 	blt.w	800604a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d004      	beq.n	8005f02 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efa:	3304      	adds	r3, #4
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fd fe87 	bl	8003c10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f02:	1d3b      	adds	r3, r7, #4
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff ff87 	bl	8005e18 <prvSampleTimeNow>
 8005f0a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b09      	cmp	r3, #9
 8005f10:	f200 8098 	bhi.w	8006044 <prvProcessReceivedCommands+0x168>
 8005f14:	a201      	add	r2, pc, #4	@ (adr r2, 8005f1c <prvProcessReceivedCommands+0x40>)
 8005f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1a:	bf00      	nop
 8005f1c:	08005f45 	.word	0x08005f45
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f45 	.word	0x08005f45
 8005f28:	08005fbb 	.word	0x08005fbb
 8005f2c:	08005fcf 	.word	0x08005fcf
 8005f30:	0800601b 	.word	0x0800601b
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f45 	.word	0x08005f45
 8005f3c:	08005fbb 	.word	0x08005fbb
 8005f40:	08005fcf 	.word	0x08005fcf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f4a:	f043 0301 	orr.w	r3, r3, #1
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	18d1      	adds	r1, r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a3a      	ldr	r2, [r7, #32]
 8005f62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f64:	f7ff ff78 	bl	8005e58 <prvInsertTimerInActiveList>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d06c      	beq.n	8006048 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d061      	beq.n	8006048 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	441a      	add	r2, r3
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	2300      	movs	r3, #0
 8005f92:	2100      	movs	r1, #0
 8005f94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f96:	f7ff fe1d 	bl	8005bd4 <xTimerGenericCommand>
 8005f9a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d152      	bne.n	8006048 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	61bb      	str	r3, [r7, #24]
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	e7fd      	b.n	8005fb6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fc0:	f023 0301 	bic.w	r3, r3, #1
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005fcc:	e03d      	b.n	800604a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fd4:	f043 0301 	orr.w	r3, r3, #1
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10b      	bne.n	8006006 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	617b      	str	r3, [r7, #20]
}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	e7fd      	b.n	8006002 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	18d1      	adds	r1, r2, r3
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	6a3a      	ldr	r2, [r7, #32]
 8006012:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006014:	f7ff ff20 	bl	8005e58 <prvInsertTimerInActiveList>
					break;
 8006018:	e017      	b.n	800604a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8006028:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800602a:	f000 fbd7 	bl	80067dc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800602e:	e00c      	b.n	800604a <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006036:	f023 0301 	bic.w	r3, r3, #1
 800603a:	b2da      	uxtb	r2, r3
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006042:	e002      	b.n	800604a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8006044:	bf00      	nop
 8006046:	e000      	b.n	800604a <prvProcessReceivedCommands+0x16e>
					break;
 8006048:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800604a:	4b08      	ldr	r3, [pc, #32]	@ (800606c <prvProcessReceivedCommands+0x190>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f107 0108 	add.w	r1, r7, #8
 8006052:	2200      	movs	r2, #0
 8006054:	4618      	mov	r0, r3
 8006056:	f7fe f86d 	bl	8004134 <xQueueReceive>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	f47f af41 	bne.w	8005ee4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006062:	bf00      	nop
 8006064:	bf00      	nop
 8006066:	3728      	adds	r7, #40	@ 0x28
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20004948 	.word	0x20004948

08006070 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006076:	e049      	b.n	800610c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006078:	4b2e      	ldr	r3, [pc, #184]	@ (8006134 <prvSwitchTimerLists+0xc4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006082:	4b2c      	ldr	r3, [pc, #176]	@ (8006134 <prvSwitchTimerLists+0xc4>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3304      	adds	r3, #4
 8006090:	4618      	mov	r0, r3
 8006092:	f7fd fdbd 	bl	8003c10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d02f      	beq.n	800610c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4413      	add	r3, r2
 80060b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d90e      	bls.n	80060dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006134 <prvSwitchTimerLists+0xc4>)
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f7fd fd62 	bl	8003b9e <vListInsert>
 80060da:	e017      	b.n	800610c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060dc:	2300      	movs	r3, #0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2300      	movs	r3, #0
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	2100      	movs	r1, #0
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f7ff fd74 	bl	8005bd4 <xTimerGenericCommand>
 80060ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10b      	bne.n	800610c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	603b      	str	r3, [r7, #0]
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	e7fd      	b.n	8006108 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800610c:	4b09      	ldr	r3, [pc, #36]	@ (8006134 <prvSwitchTimerLists+0xc4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1b0      	bne.n	8006078 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006116:	4b07      	ldr	r3, [pc, #28]	@ (8006134 <prvSwitchTimerLists+0xc4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800611c:	4b06      	ldr	r3, [pc, #24]	@ (8006138 <prvSwitchTimerLists+0xc8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a04      	ldr	r2, [pc, #16]	@ (8006134 <prvSwitchTimerLists+0xc4>)
 8006122:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006124:	4a04      	ldr	r2, [pc, #16]	@ (8006138 <prvSwitchTimerLists+0xc8>)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	6013      	str	r3, [r2, #0]
}
 800612a:	bf00      	nop
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20004940 	.word	0x20004940
 8006138:	20004944 	.word	0x20004944

0800613c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006140:	f000 f962 	bl	8006408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006144:	4b12      	ldr	r3, [pc, #72]	@ (8006190 <prvCheckForValidListAndQueue+0x54>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d11d      	bne.n	8006188 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800614c:	4811      	ldr	r0, [pc, #68]	@ (8006194 <prvCheckForValidListAndQueue+0x58>)
 800614e:	f7fd fcd5 	bl	8003afc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006152:	4811      	ldr	r0, [pc, #68]	@ (8006198 <prvCheckForValidListAndQueue+0x5c>)
 8006154:	f7fd fcd2 	bl	8003afc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006158:	4b10      	ldr	r3, [pc, #64]	@ (800619c <prvCheckForValidListAndQueue+0x60>)
 800615a:	4a0e      	ldr	r2, [pc, #56]	@ (8006194 <prvCheckForValidListAndQueue+0x58>)
 800615c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800615e:	4b10      	ldr	r3, [pc, #64]	@ (80061a0 <prvCheckForValidListAndQueue+0x64>)
 8006160:	4a0d      	ldr	r2, [pc, #52]	@ (8006198 <prvCheckForValidListAndQueue+0x5c>)
 8006162:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006164:	2200      	movs	r2, #0
 8006166:	210c      	movs	r1, #12
 8006168:	200a      	movs	r0, #10
 800616a:	f7fd fde5 	bl	8003d38 <xQueueGenericCreate>
 800616e:	4603      	mov	r3, r0
 8006170:	4a07      	ldr	r2, [pc, #28]	@ (8006190 <prvCheckForValidListAndQueue+0x54>)
 8006172:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006174:	4b06      	ldr	r3, [pc, #24]	@ (8006190 <prvCheckForValidListAndQueue+0x54>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800617c:	4b04      	ldr	r3, [pc, #16]	@ (8006190 <prvCheckForValidListAndQueue+0x54>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4908      	ldr	r1, [pc, #32]	@ (80061a4 <prvCheckForValidListAndQueue+0x68>)
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe f9c8 	bl	8004518 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006188:	f000 f970 	bl	800646c <vPortExitCritical>
}
 800618c:	bf00      	nop
 800618e:	bd80      	pop	{r7, pc}
 8006190:	20004948 	.word	0x20004948
 8006194:	20004918 	.word	0x20004918
 8006198:	2000492c 	.word	0x2000492c
 800619c:	20004940 	.word	0x20004940
 80061a0:	20004944 	.word	0x20004944
 80061a4:	08008974 	.word	0x08008974

080061a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	3b04      	subs	r3, #4
 80061b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3b04      	subs	r3, #4
 80061c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f023 0201 	bic.w	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3b04      	subs	r3, #4
 80061d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061d8:	4a0c      	ldr	r2, [pc, #48]	@ (800620c <pxPortInitialiseStack+0x64>)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3b14      	subs	r3, #20
 80061e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3b04      	subs	r3, #4
 80061ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f06f 0202 	mvn.w	r2, #2
 80061f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3b20      	subs	r3, #32
 80061fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061fe:	68fb      	ldr	r3, [r7, #12]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	08006211 	.word	0x08006211

08006210 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800621a:	4b13      	ldr	r3, [pc, #76]	@ (8006268 <prvTaskExitError+0x58>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d00b      	beq.n	800623c <prvTaskExitError+0x2c>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	60fb      	str	r3, [r7, #12]
}
 8006236:	bf00      	nop
 8006238:	bf00      	nop
 800623a:	e7fd      	b.n	8006238 <prvTaskExitError+0x28>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	60bb      	str	r3, [r7, #8]
}
 800624e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006250:	bf00      	nop
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0fc      	beq.n	8006252 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000014 	.word	0x20000014
 800626c:	00000000 	.word	0x00000000

08006270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006270:	4b07      	ldr	r3, [pc, #28]	@ (8006290 <pxCurrentTCBConst2>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	f380 8809 	msr	PSP, r0
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8811 	msr	BASEPRI, r0
 800628a:	4770      	bx	lr
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst2>:
 8006290:	2000480c 	.word	0x2000480c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006298:	4808      	ldr	r0, [pc, #32]	@ (80062bc <prvPortStartFirstTask+0x24>)
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f380 8808 	msr	MSP, r0
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8814 	msr	CONTROL, r0
 80062aa:	b662      	cpsie	i
 80062ac:	b661      	cpsie	f
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	df00      	svc	0
 80062b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ba:	bf00      	nop
 80062bc:	e000ed08 	.word	0xe000ed08

080062c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062c6:	4b47      	ldr	r3, [pc, #284]	@ (80063e4 <xPortStartScheduler+0x124>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a47      	ldr	r2, [pc, #284]	@ (80063e8 <xPortStartScheduler+0x128>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10b      	bne.n	80062e8 <xPortStartScheduler+0x28>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	613b      	str	r3, [r7, #16]
}
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
 80062e6:	e7fd      	b.n	80062e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062e8:	4b3e      	ldr	r3, [pc, #248]	@ (80063e4 <xPortStartScheduler+0x124>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a3f      	ldr	r2, [pc, #252]	@ (80063ec <xPortStartScheduler+0x12c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d10b      	bne.n	800630a <xPortStartScheduler+0x4a>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60fb      	str	r3, [r7, #12]
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	e7fd      	b.n	8006306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800630a:	4b39      	ldr	r3, [pc, #228]	@ (80063f0 <xPortStartScheduler+0x130>)
 800630c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	22ff      	movs	r2, #255	@ 0xff
 800631a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800632c:	b2da      	uxtb	r2, r3
 800632e:	4b31      	ldr	r3, [pc, #196]	@ (80063f4 <xPortStartScheduler+0x134>)
 8006330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006332:	4b31      	ldr	r3, [pc, #196]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006334:	2207      	movs	r2, #7
 8006336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006338:	e009      	b.n	800634e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800633a:	4b2f      	ldr	r3, [pc, #188]	@ (80063f8 <xPortStartScheduler+0x138>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3b01      	subs	r3, #1
 8006340:	4a2d      	ldr	r2, [pc, #180]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006356:	2b80      	cmp	r3, #128	@ 0x80
 8006358:	d0ef      	beq.n	800633a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800635a:	4b27      	ldr	r3, [pc, #156]	@ (80063f8 <xPortStartScheduler+0x138>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f1c3 0307 	rsb	r3, r3, #7
 8006362:	2b04      	cmp	r3, #4
 8006364:	d00b      	beq.n	800637e <xPortStartScheduler+0xbe>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	60bb      	str	r3, [r7, #8]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800637e:	4b1e      	ldr	r3, [pc, #120]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	4a1c      	ldr	r2, [pc, #112]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006388:	4b1b      	ldr	r3, [pc, #108]	@ (80063f8 <xPortStartScheduler+0x138>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006390:	4a19      	ldr	r2, [pc, #100]	@ (80063f8 <xPortStartScheduler+0x138>)
 8006392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800639c:	4b17      	ldr	r3, [pc, #92]	@ (80063fc <xPortStartScheduler+0x13c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a16      	ldr	r2, [pc, #88]	@ (80063fc <xPortStartScheduler+0x13c>)
 80063a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063a8:	4b14      	ldr	r3, [pc, #80]	@ (80063fc <xPortStartScheduler+0x13c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a13      	ldr	r2, [pc, #76]	@ (80063fc <xPortStartScheduler+0x13c>)
 80063ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80063b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063b4:	f000 f8da 	bl	800656c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063b8:	4b11      	ldr	r3, [pc, #68]	@ (8006400 <xPortStartScheduler+0x140>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063be:	f000 f8f9 	bl	80065b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063c2:	4b10      	ldr	r3, [pc, #64]	@ (8006404 <xPortStartScheduler+0x144>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006404 <xPortStartScheduler+0x144>)
 80063c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80063cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063ce:	f7ff ff63 	bl	8006298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063d2:	f7fe fd41 	bl	8004e58 <vTaskSwitchContext>
	prvTaskExitError();
 80063d6:	f7ff ff1b 	bl	8006210 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	e000ed00 	.word	0xe000ed00
 80063e8:	410fc271 	.word	0x410fc271
 80063ec:	410fc270 	.word	0x410fc270
 80063f0:	e000e400 	.word	0xe000e400
 80063f4:	20004954 	.word	0x20004954
 80063f8:	20004958 	.word	0x20004958
 80063fc:	e000ed20 	.word	0xe000ed20
 8006400:	20000014 	.word	0x20000014
 8006404:	e000ef34 	.word	0xe000ef34

08006408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	607b      	str	r3, [r7, #4]
}
 8006420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006422:	4b10      	ldr	r3, [pc, #64]	@ (8006464 <vPortEnterCritical+0x5c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3301      	adds	r3, #1
 8006428:	4a0e      	ldr	r2, [pc, #56]	@ (8006464 <vPortEnterCritical+0x5c>)
 800642a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800642c:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <vPortEnterCritical+0x5c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d110      	bne.n	8006456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006434:	4b0c      	ldr	r3, [pc, #48]	@ (8006468 <vPortEnterCritical+0x60>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <vPortEnterCritical+0x4e>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	603b      	str	r3, [r7, #0]
}
 8006450:	bf00      	nop
 8006452:	bf00      	nop
 8006454:	e7fd      	b.n	8006452 <vPortEnterCritical+0x4a>
	}
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20000014 	.word	0x20000014
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006472:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <vPortExitCritical+0x50>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <vPortExitCritical+0x26>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	607b      	str	r3, [r7, #4]
}
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	e7fd      	b.n	800648e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006492:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <vPortExitCritical+0x50>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3b01      	subs	r3, #1
 8006498:	4a08      	ldr	r2, [pc, #32]	@ (80064bc <vPortExitCritical+0x50>)
 800649a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800649c:	4b07      	ldr	r3, [pc, #28]	@ (80064bc <vPortExitCritical+0x50>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <vPortExitCritical+0x44>
 80064a4:	2300      	movs	r3, #0
 80064a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f383 8811 	msr	BASEPRI, r3
}
 80064ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	20000014 	.word	0x20000014

080064c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064c0:	f3ef 8009 	mrs	r0, PSP
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	4b15      	ldr	r3, [pc, #84]	@ (8006520 <pxCurrentTCBConst>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	f01e 0f10 	tst.w	lr, #16
 80064d0:	bf08      	it	eq
 80064d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064da:	6010      	str	r0, [r2, #0]
 80064dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064e4:	f380 8811 	msr	BASEPRI, r0
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f7fe fcb2 	bl	8004e58 <vTaskSwitchContext>
 80064f4:	f04f 0000 	mov.w	r0, #0
 80064f8:	f380 8811 	msr	BASEPRI, r0
 80064fc:	bc09      	pop	{r0, r3}
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	6808      	ldr	r0, [r1, #0]
 8006502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006506:	f01e 0f10 	tst.w	lr, #16
 800650a:	bf08      	it	eq
 800650c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006510:	f380 8809 	msr	PSP, r0
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	f3af 8000 	nop.w

08006520 <pxCurrentTCBConst>:
 8006520:	2000480c 	.word	0x2000480c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	607b      	str	r3, [r7, #4]
}
 8006540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006542:	f7fe fbcf 	bl	8004ce4 <xTaskIncrementTick>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800654c:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <SysTick_Handler+0x40>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	2300      	movs	r3, #0
 8006556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f383 8811 	msr	BASEPRI, r3
}
 800655e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006570:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006576:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <vPortSetupTimerInterrupt+0x38>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800657c:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <vPortSetupTimerInterrupt+0x3c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0a      	ldr	r2, [pc, #40]	@ (80065ac <vPortSetupTimerInterrupt+0x40>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	099b      	lsrs	r3, r3, #6
 8006588:	4a09      	ldr	r2, [pc, #36]	@ (80065b0 <vPortSetupTimerInterrupt+0x44>)
 800658a:	3b01      	subs	r3, #1
 800658c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800658e:	4b04      	ldr	r3, [pc, #16]	@ (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006590:	2207      	movs	r2, #7
 8006592:	601a      	str	r2, [r3, #0]
}
 8006594:	bf00      	nop
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	e000e010 	.word	0xe000e010
 80065a4:	e000e018 	.word	0xe000e018
 80065a8:	20000008 	.word	0x20000008
 80065ac:	10624dd3 	.word	0x10624dd3
 80065b0:	e000e014 	.word	0xe000e014

080065b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80065c4 <vPortEnableVFP+0x10>
 80065b8:	6801      	ldr	r1, [r0, #0]
 80065ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80065be:	6001      	str	r1, [r0, #0]
 80065c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065c2:	bf00      	nop
 80065c4:	e000ed88 	.word	0xe000ed88

080065c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ce:	f3ef 8305 	mrs	r3, IPSR
 80065d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d915      	bls.n	8006606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065da:	4a18      	ldr	r2, [pc, #96]	@ (800663c <vPortValidateInterruptPriority+0x74>)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065e4:	4b16      	ldr	r3, [pc, #88]	@ (8006640 <vPortValidateInterruptPriority+0x78>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	7afa      	ldrb	r2, [r7, #11]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d20b      	bcs.n	8006606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006606:	4b0f      	ldr	r3, [pc, #60]	@ (8006644 <vPortValidateInterruptPriority+0x7c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800660e:	4b0e      	ldr	r3, [pc, #56]	@ (8006648 <vPortValidateInterruptPriority+0x80>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d90b      	bls.n	800662e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	603b      	str	r3, [r7, #0]
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	e7fd      	b.n	800662a <vPortValidateInterruptPriority+0x62>
	}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	e000e3f0 	.word	0xe000e3f0
 8006640:	20004954 	.word	0x20004954
 8006644:	e000ed0c 	.word	0xe000ed0c
 8006648:	20004958 	.word	0x20004958

0800664c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	@ 0x28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006654:	2300      	movs	r3, #0
 8006656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006658:	f7fe f9ec 	bl	8004a34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800665c:	4b5a      	ldr	r3, [pc, #360]	@ (80067c8 <pvPortMalloc+0x17c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006664:	f000 f92e 	bl	80068c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006668:	4b58      	ldr	r3, [pc, #352]	@ (80067cc <pvPortMalloc+0x180>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4013      	ands	r3, r2
 8006670:	2b00      	cmp	r3, #0
 8006672:	f040 8090 	bne.w	8006796 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01e      	beq.n	80066ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800667c:	2208      	movs	r2, #8
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4413      	add	r3, r2
 8006682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	2b00      	cmp	r3, #0
 800668c:	d015      	beq.n	80066ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f023 0307 	bic.w	r3, r3, #7
 8006694:	3308      	adds	r3, #8
 8006696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00b      	beq.n	80066ba <pvPortMalloc+0x6e>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	617b      	str	r3, [r7, #20]
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	e7fd      	b.n	80066b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d06a      	beq.n	8006796 <pvPortMalloc+0x14a>
 80066c0:	4b43      	ldr	r3, [pc, #268]	@ (80067d0 <pvPortMalloc+0x184>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d865      	bhi.n	8006796 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066ca:	4b42      	ldr	r3, [pc, #264]	@ (80067d4 <pvPortMalloc+0x188>)
 80066cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066ce:	4b41      	ldr	r3, [pc, #260]	@ (80067d4 <pvPortMalloc+0x188>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066d4:	e004      	b.n	80066e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d903      	bls.n	80066f2 <pvPortMalloc+0xa6>
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f1      	bne.n	80066d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066f2:	4b35      	ldr	r3, [pc, #212]	@ (80067c8 <pvPortMalloc+0x17c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d04c      	beq.n	8006796 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2208      	movs	r2, #8
 8006702:	4413      	add	r3, r2
 8006704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	1ad2      	subs	r2, r2, r3
 8006716:	2308      	movs	r3, #8
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	429a      	cmp	r2, r3
 800671c:	d920      	bls.n	8006760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800671e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4413      	add	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <pvPortMalloc+0xfc>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	613b      	str	r3, [r7, #16]
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	e7fd      	b.n	8006744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800675a:	69b8      	ldr	r0, [r7, #24]
 800675c:	f000 f914 	bl	8006988 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006760:	4b1b      	ldr	r3, [pc, #108]	@ (80067d0 <pvPortMalloc+0x184>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	4a19      	ldr	r2, [pc, #100]	@ (80067d0 <pvPortMalloc+0x184>)
 800676c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800676e:	4b18      	ldr	r3, [pc, #96]	@ (80067d0 <pvPortMalloc+0x184>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	4b19      	ldr	r3, [pc, #100]	@ (80067d8 <pvPortMalloc+0x18c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d203      	bcs.n	8006782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800677a:	4b15      	ldr	r3, [pc, #84]	@ (80067d0 <pvPortMalloc+0x184>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a16      	ldr	r2, [pc, #88]	@ (80067d8 <pvPortMalloc+0x18c>)
 8006780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	4b11      	ldr	r3, [pc, #68]	@ (80067cc <pvPortMalloc+0x180>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	431a      	orrs	r2, r3
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006796:	f7fe f95b 	bl	8004a50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	f003 0307 	and.w	r3, r3, #7
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <pvPortMalloc+0x170>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	60fb      	str	r3, [r7, #12]
}
 80067b6:	bf00      	nop
 80067b8:	bf00      	nop
 80067ba:	e7fd      	b.n	80067b8 <pvPortMalloc+0x16c>
	return pvReturn;
 80067bc:	69fb      	ldr	r3, [r7, #28]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3728      	adds	r7, #40	@ 0x28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20017564 	.word	0x20017564
 80067cc:	20017570 	.word	0x20017570
 80067d0:	20017568 	.word	0x20017568
 80067d4:	2001755c 	.word	0x2001755c
 80067d8:	2001756c 	.word	0x2001756c

080067dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d04a      	beq.n	8006884 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067ee:	2308      	movs	r3, #8
 80067f0:	425b      	negs	r3, r3
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4413      	add	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	4b22      	ldr	r3, [pc, #136]	@ (800688c <vPortFree+0xb0>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4013      	ands	r3, r2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <vPortFree+0x46>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	60fb      	str	r3, [r7, #12]
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	e7fd      	b.n	800681e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <vPortFree+0x66>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	60bb      	str	r3, [r7, #8]
}
 800683c:	bf00      	nop
 800683e:	bf00      	nop
 8006840:	e7fd      	b.n	800683e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	4b11      	ldr	r3, [pc, #68]	@ (800688c <vPortFree+0xb0>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d019      	beq.n	8006884 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d115      	bne.n	8006884 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	4b0b      	ldr	r3, [pc, #44]	@ (800688c <vPortFree+0xb0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	43db      	mvns	r3, r3
 8006862:	401a      	ands	r2, r3
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006868:	f7fe f8e4 	bl	8004a34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	4b07      	ldr	r3, [pc, #28]	@ (8006890 <vPortFree+0xb4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4413      	add	r3, r2
 8006876:	4a06      	ldr	r2, [pc, #24]	@ (8006890 <vPortFree+0xb4>)
 8006878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800687a:	6938      	ldr	r0, [r7, #16]
 800687c:	f000 f884 	bl	8006988 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006880:	f7fe f8e6 	bl	8004a50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006884:	bf00      	nop
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20017570 	.word	0x20017570
 8006890:	20017568 	.word	0x20017568

08006894 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8006898:	4b03      	ldr	r3, [pc, #12]	@ (80068a8 <xPortGetFreeHeapSize+0x14>)
 800689a:	681b      	ldr	r3, [r3, #0]
}
 800689c:	4618      	mov	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	20017568 	.word	0x20017568

080068ac <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 80068b0:	4b03      	ldr	r3, [pc, #12]	@ (80068c0 <xPortGetMinimumEverFreeHeapSize+0x14>)
 80068b2:	681b      	ldr	r3, [r3, #0]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	2001756c 	.word	0x2001756c

080068c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068ca:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80068ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068d0:	4b27      	ldr	r3, [pc, #156]	@ (8006970 <prvHeapInit+0xac>)
 80068d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00c      	beq.n	80068f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3307      	adds	r3, #7
 80068e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006970 <prvHeapInit+0xac>)
 80068f4:	4413      	add	r3, r2
 80068f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006974 <prvHeapInit+0xb0>)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006902:	4b1c      	ldr	r3, [pc, #112]	@ (8006974 <prvHeapInit+0xb0>)
 8006904:	2200      	movs	r2, #0
 8006906:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	4413      	add	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006910:	2208      	movs	r2, #8
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0307 	bic.w	r3, r3, #7
 800691e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4a15      	ldr	r2, [pc, #84]	@ (8006978 <prvHeapInit+0xb4>)
 8006924:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006926:	4b14      	ldr	r3, [pc, #80]	@ (8006978 <prvHeapInit+0xb4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2200      	movs	r2, #0
 800692c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800692e:	4b12      	ldr	r3, [pc, #72]	@ (8006978 <prvHeapInit+0xb4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	1ad2      	subs	r2, r2, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006944:	4b0c      	ldr	r3, [pc, #48]	@ (8006978 <prvHeapInit+0xb4>)
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	4a0a      	ldr	r2, [pc, #40]	@ (800697c <prvHeapInit+0xb8>)
 8006952:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	4a09      	ldr	r2, [pc, #36]	@ (8006980 <prvHeapInit+0xbc>)
 800695a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800695c:	4b09      	ldr	r3, [pc, #36]	@ (8006984 <prvHeapInit+0xc0>)
 800695e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006962:	601a      	str	r2, [r3, #0]
}
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	2000495c 	.word	0x2000495c
 8006974:	2001755c 	.word	0x2001755c
 8006978:	20017564 	.word	0x20017564
 800697c:	2001756c 	.word	0x2001756c
 8006980:	20017568 	.word	0x20017568
 8006984:	20017570 	.word	0x20017570

08006988 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006990:	4b28      	ldr	r3, [pc, #160]	@ (8006a34 <prvInsertBlockIntoFreeList+0xac>)
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	e002      	b.n	800699c <prvInsertBlockIntoFreeList+0x14>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d8f7      	bhi.n	8006996 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	4413      	add	r3, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d108      	bne.n	80069ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	441a      	add	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	441a      	add	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d118      	bne.n	8006a10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	4b15      	ldr	r3, [pc, #84]	@ (8006a38 <prvInsertBlockIntoFreeList+0xb0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d00d      	beq.n	8006a06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	441a      	add	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	e008      	b.n	8006a18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a06:	4b0c      	ldr	r3, [pc, #48]	@ (8006a38 <prvInsertBlockIntoFreeList+0xb0>)
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e003      	b.n	8006a18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d002      	beq.n	8006a26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a26:	bf00      	nop
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	2001755c 	.word	0x2001755c
 8006a38:	20017564 	.word	0x20017564

08006a3c <std>:
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	4604      	mov	r4, r0
 8006a42:	e9c0 3300 	strd	r3, r3, [r0]
 8006a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a4a:	6083      	str	r3, [r0, #8]
 8006a4c:	8181      	strh	r1, [r0, #12]
 8006a4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a50:	81c2      	strh	r2, [r0, #14]
 8006a52:	6183      	str	r3, [r0, #24]
 8006a54:	4619      	mov	r1, r3
 8006a56:	2208      	movs	r2, #8
 8006a58:	305c      	adds	r0, #92	@ 0x5c
 8006a5a:	f000 f981 	bl	8006d60 <memset>
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <std+0x58>)
 8006a60:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a62:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <std+0x5c>)
 8006a64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a66:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <std+0x60>)
 8006a68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa0 <std+0x64>)
 8006a6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa4 <std+0x68>)
 8006a70:	6224      	str	r4, [r4, #32]
 8006a72:	429c      	cmp	r4, r3
 8006a74:	d006      	beq.n	8006a84 <std+0x48>
 8006a76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a7a:	4294      	cmp	r4, r2
 8006a7c:	d002      	beq.n	8006a84 <std+0x48>
 8006a7e:	33d0      	adds	r3, #208	@ 0xd0
 8006a80:	429c      	cmp	r4, r3
 8006a82:	d105      	bne.n	8006a90 <std+0x54>
 8006a84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a8c:	f000 ba50 	b.w	8006f30 <__retarget_lock_init_recursive>
 8006a90:	bd10      	pop	{r4, pc}
 8006a92:	bf00      	nop
 8006a94:	08006c69 	.word	0x08006c69
 8006a98:	08006c8b 	.word	0x08006c8b
 8006a9c:	08006cc3 	.word	0x08006cc3
 8006aa0:	08006ce7 	.word	0x08006ce7
 8006aa4:	20017574 	.word	0x20017574

08006aa8 <stdio_exit_handler>:
 8006aa8:	4a02      	ldr	r2, [pc, #8]	@ (8006ab4 <stdio_exit_handler+0xc>)
 8006aaa:	4903      	ldr	r1, [pc, #12]	@ (8006ab8 <stdio_exit_handler+0x10>)
 8006aac:	4803      	ldr	r0, [pc, #12]	@ (8006abc <stdio_exit_handler+0x14>)
 8006aae:	f000 b869 	b.w	8006b84 <_fwalk_sglue>
 8006ab2:	bf00      	nop
 8006ab4:	20000018 	.word	0x20000018
 8006ab8:	08007875 	.word	0x08007875
 8006abc:	20000028 	.word	0x20000028

08006ac0 <cleanup_stdio>:
 8006ac0:	6841      	ldr	r1, [r0, #4]
 8006ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8006af4 <cleanup_stdio+0x34>)
 8006ac4:	4299      	cmp	r1, r3
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	4604      	mov	r4, r0
 8006aca:	d001      	beq.n	8006ad0 <cleanup_stdio+0x10>
 8006acc:	f000 fed2 	bl	8007874 <_fflush_r>
 8006ad0:	68a1      	ldr	r1, [r4, #8]
 8006ad2:	4b09      	ldr	r3, [pc, #36]	@ (8006af8 <cleanup_stdio+0x38>)
 8006ad4:	4299      	cmp	r1, r3
 8006ad6:	d002      	beq.n	8006ade <cleanup_stdio+0x1e>
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 fecb 	bl	8007874 <_fflush_r>
 8006ade:	68e1      	ldr	r1, [r4, #12]
 8006ae0:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <cleanup_stdio+0x3c>)
 8006ae2:	4299      	cmp	r1, r3
 8006ae4:	d004      	beq.n	8006af0 <cleanup_stdio+0x30>
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aec:	f000 bec2 	b.w	8007874 <_fflush_r>
 8006af0:	bd10      	pop	{r4, pc}
 8006af2:	bf00      	nop
 8006af4:	20017574 	.word	0x20017574
 8006af8:	200175dc 	.word	0x200175dc
 8006afc:	20017644 	.word	0x20017644

08006b00 <global_stdio_init.part.0>:
 8006b00:	b510      	push	{r4, lr}
 8006b02:	4b0b      	ldr	r3, [pc, #44]	@ (8006b30 <global_stdio_init.part.0+0x30>)
 8006b04:	4c0b      	ldr	r4, [pc, #44]	@ (8006b34 <global_stdio_init.part.0+0x34>)
 8006b06:	4a0c      	ldr	r2, [pc, #48]	@ (8006b38 <global_stdio_init.part.0+0x38>)
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2104      	movs	r1, #4
 8006b10:	f7ff ff94 	bl	8006a3c <std>
 8006b14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b18:	2201      	movs	r2, #1
 8006b1a:	2109      	movs	r1, #9
 8006b1c:	f7ff ff8e 	bl	8006a3c <std>
 8006b20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b24:	2202      	movs	r2, #2
 8006b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b2a:	2112      	movs	r1, #18
 8006b2c:	f7ff bf86 	b.w	8006a3c <std>
 8006b30:	200176ac 	.word	0x200176ac
 8006b34:	20017574 	.word	0x20017574
 8006b38:	08006aa9 	.word	0x08006aa9

08006b3c <__sfp_lock_acquire>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	@ (8006b44 <__sfp_lock_acquire+0x8>)
 8006b3e:	f000 b9f8 	b.w	8006f32 <__retarget_lock_acquire_recursive>
 8006b42:	bf00      	nop
 8006b44:	200176b5 	.word	0x200176b5

08006b48 <__sfp_lock_release>:
 8006b48:	4801      	ldr	r0, [pc, #4]	@ (8006b50 <__sfp_lock_release+0x8>)
 8006b4a:	f000 b9f3 	b.w	8006f34 <__retarget_lock_release_recursive>
 8006b4e:	bf00      	nop
 8006b50:	200176b5 	.word	0x200176b5

08006b54 <__sinit>:
 8006b54:	b510      	push	{r4, lr}
 8006b56:	4604      	mov	r4, r0
 8006b58:	f7ff fff0 	bl	8006b3c <__sfp_lock_acquire>
 8006b5c:	6a23      	ldr	r3, [r4, #32]
 8006b5e:	b11b      	cbz	r3, 8006b68 <__sinit+0x14>
 8006b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b64:	f7ff bff0 	b.w	8006b48 <__sfp_lock_release>
 8006b68:	4b04      	ldr	r3, [pc, #16]	@ (8006b7c <__sinit+0x28>)
 8006b6a:	6223      	str	r3, [r4, #32]
 8006b6c:	4b04      	ldr	r3, [pc, #16]	@ (8006b80 <__sinit+0x2c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1f5      	bne.n	8006b60 <__sinit+0xc>
 8006b74:	f7ff ffc4 	bl	8006b00 <global_stdio_init.part.0>
 8006b78:	e7f2      	b.n	8006b60 <__sinit+0xc>
 8006b7a:	bf00      	nop
 8006b7c:	08006ac1 	.word	0x08006ac1
 8006b80:	200176ac 	.word	0x200176ac

08006b84 <_fwalk_sglue>:
 8006b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b88:	4607      	mov	r7, r0
 8006b8a:	4688      	mov	r8, r1
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	2600      	movs	r6, #0
 8006b90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b94:	f1b9 0901 	subs.w	r9, r9, #1
 8006b98:	d505      	bpl.n	8006ba6 <_fwalk_sglue+0x22>
 8006b9a:	6824      	ldr	r4, [r4, #0]
 8006b9c:	2c00      	cmp	r4, #0
 8006b9e:	d1f7      	bne.n	8006b90 <_fwalk_sglue+0xc>
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba6:	89ab      	ldrh	r3, [r5, #12]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d907      	bls.n	8006bbc <_fwalk_sglue+0x38>
 8006bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	d003      	beq.n	8006bbc <_fwalk_sglue+0x38>
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	4638      	mov	r0, r7
 8006bb8:	47c0      	blx	r8
 8006bba:	4306      	orrs	r6, r0
 8006bbc:	3568      	adds	r5, #104	@ 0x68
 8006bbe:	e7e9      	b.n	8006b94 <_fwalk_sglue+0x10>

08006bc0 <sniprintf>:
 8006bc0:	b40c      	push	{r2, r3}
 8006bc2:	b530      	push	{r4, r5, lr}
 8006bc4:	4b17      	ldr	r3, [pc, #92]	@ (8006c24 <sniprintf+0x64>)
 8006bc6:	1e0c      	subs	r4, r1, #0
 8006bc8:	681d      	ldr	r5, [r3, #0]
 8006bca:	b09d      	sub	sp, #116	@ 0x74
 8006bcc:	da08      	bge.n	8006be0 <sniprintf+0x20>
 8006bce:	238b      	movs	r3, #139	@ 0x8b
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd6:	b01d      	add	sp, #116	@ 0x74
 8006bd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bdc:	b002      	add	sp, #8
 8006bde:	4770      	bx	lr
 8006be0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006be4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006be8:	bf14      	ite	ne
 8006bea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006bee:	4623      	moveq	r3, r4
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	9307      	str	r3, [sp, #28]
 8006bf4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006bf8:	9002      	str	r0, [sp, #8]
 8006bfa:	9006      	str	r0, [sp, #24]
 8006bfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c00:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c02:	ab21      	add	r3, sp, #132	@ 0x84
 8006c04:	a902      	add	r1, sp, #8
 8006c06:	4628      	mov	r0, r5
 8006c08:	9301      	str	r3, [sp, #4]
 8006c0a:	f000 fb25 	bl	8007258 <_svfiprintf_r>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	bfbc      	itt	lt
 8006c12:	238b      	movlt	r3, #139	@ 0x8b
 8006c14:	602b      	strlt	r3, [r5, #0]
 8006c16:	2c00      	cmp	r4, #0
 8006c18:	d0dd      	beq.n	8006bd6 <sniprintf+0x16>
 8006c1a:	9b02      	ldr	r3, [sp, #8]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e7d9      	b.n	8006bd6 <sniprintf+0x16>
 8006c22:	bf00      	nop
 8006c24:	20000024 	.word	0x20000024

08006c28 <siprintf>:
 8006c28:	b40e      	push	{r1, r2, r3}
 8006c2a:	b500      	push	{lr}
 8006c2c:	b09c      	sub	sp, #112	@ 0x70
 8006c2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c30:	9002      	str	r0, [sp, #8]
 8006c32:	9006      	str	r0, [sp, #24]
 8006c34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c38:	4809      	ldr	r0, [pc, #36]	@ (8006c60 <siprintf+0x38>)
 8006c3a:	9107      	str	r1, [sp, #28]
 8006c3c:	9104      	str	r1, [sp, #16]
 8006c3e:	4909      	ldr	r1, [pc, #36]	@ (8006c64 <siprintf+0x3c>)
 8006c40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c44:	9105      	str	r1, [sp, #20]
 8006c46:	6800      	ldr	r0, [r0, #0]
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	a902      	add	r1, sp, #8
 8006c4c:	f000 fb04 	bl	8007258 <_svfiprintf_r>
 8006c50:	9b02      	ldr	r3, [sp, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	b01c      	add	sp, #112	@ 0x70
 8006c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c5c:	b003      	add	sp, #12
 8006c5e:	4770      	bx	lr
 8006c60:	20000024 	.word	0x20000024
 8006c64:	ffff0208 	.word	0xffff0208

08006c68 <__sread>:
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c70:	f000 f910 	bl	8006e94 <_read_r>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	bfab      	itete	ge
 8006c78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8006c7c:	181b      	addge	r3, r3, r0
 8006c7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c82:	bfac      	ite	ge
 8006c84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c86:	81a3      	strhlt	r3, [r4, #12]
 8006c88:	bd10      	pop	{r4, pc}

08006c8a <__swrite>:
 8006c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c8e:	461f      	mov	r7, r3
 8006c90:	898b      	ldrh	r3, [r1, #12]
 8006c92:	05db      	lsls	r3, r3, #23
 8006c94:	4605      	mov	r5, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	4616      	mov	r6, r2
 8006c9a:	d505      	bpl.n	8006ca8 <__swrite+0x1e>
 8006c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f000 f8e4 	bl	8006e70 <_lseek_r>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cb2:	81a3      	strh	r3, [r4, #12]
 8006cb4:	4632      	mov	r2, r6
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	4628      	mov	r0, r5
 8006cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cbe:	f000 b8fb 	b.w	8006eb8 <_write_r>

08006cc2 <__sseek>:
 8006cc2:	b510      	push	{r4, lr}
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cca:	f000 f8d1 	bl	8006e70 <_lseek_r>
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	bf15      	itete	ne
 8006cd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cde:	81a3      	strheq	r3, [r4, #12]
 8006ce0:	bf18      	it	ne
 8006ce2:	81a3      	strhne	r3, [r4, #12]
 8006ce4:	bd10      	pop	{r4, pc}

08006ce6 <__sclose>:
 8006ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cea:	f000 b8b1 	b.w	8006e50 <_close_r>

08006cee <_vsniprintf_r>:
 8006cee:	b530      	push	{r4, r5, lr}
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	2c00      	cmp	r4, #0
 8006cf4:	b09b      	sub	sp, #108	@ 0x6c
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	da05      	bge.n	8006d08 <_vsniprintf_r+0x1a>
 8006cfc:	238b      	movs	r3, #139	@ 0x8b
 8006cfe:	6003      	str	r3, [r0, #0]
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295
 8006d04:	b01b      	add	sp, #108	@ 0x6c
 8006d06:	bd30      	pop	{r4, r5, pc}
 8006d08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d0c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006d10:	bf14      	ite	ne
 8006d12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d16:	4623      	moveq	r3, r4
 8006d18:	9302      	str	r3, [sp, #8]
 8006d1a:	9305      	str	r3, [sp, #20]
 8006d1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d20:	9100      	str	r1, [sp, #0]
 8006d22:	9104      	str	r1, [sp, #16]
 8006d24:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006d28:	4669      	mov	r1, sp
 8006d2a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006d2c:	f000 fa94 	bl	8007258 <_svfiprintf_r>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	bfbc      	itt	lt
 8006d34:	238b      	movlt	r3, #139	@ 0x8b
 8006d36:	602b      	strlt	r3, [r5, #0]
 8006d38:	2c00      	cmp	r4, #0
 8006d3a:	d0e3      	beq.n	8006d04 <_vsniprintf_r+0x16>
 8006d3c:	9b00      	ldr	r3, [sp, #0]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	e7df      	b.n	8006d04 <_vsniprintf_r+0x16>

08006d44 <vsniprintf>:
 8006d44:	b507      	push	{r0, r1, r2, lr}
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	460a      	mov	r2, r1
 8006d4c:	4601      	mov	r1, r0
 8006d4e:	4803      	ldr	r0, [pc, #12]	@ (8006d5c <vsniprintf+0x18>)
 8006d50:	6800      	ldr	r0, [r0, #0]
 8006d52:	f7ff ffcc 	bl	8006cee <_vsniprintf_r>
 8006d56:	b003      	add	sp, #12
 8006d58:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d5c:	20000024 	.word	0x20000024

08006d60 <memset>:
 8006d60:	4402      	add	r2, r0
 8006d62:	4603      	mov	r3, r0
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d100      	bne.n	8006d6a <memset+0xa>
 8006d68:	4770      	bx	lr
 8006d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d6e:	e7f9      	b.n	8006d64 <memset+0x4>

08006d70 <strncpy>:
 8006d70:	b510      	push	{r4, lr}
 8006d72:	3901      	subs	r1, #1
 8006d74:	4603      	mov	r3, r0
 8006d76:	b132      	cbz	r2, 8006d86 <strncpy+0x16>
 8006d78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d7c:	f803 4b01 	strb.w	r4, [r3], #1
 8006d80:	3a01      	subs	r2, #1
 8006d82:	2c00      	cmp	r4, #0
 8006d84:	d1f7      	bne.n	8006d76 <strncpy+0x6>
 8006d86:	441a      	add	r2, r3
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d100      	bne.n	8006d90 <strncpy+0x20>
 8006d8e:	bd10      	pop	{r4, pc}
 8006d90:	f803 1b01 	strb.w	r1, [r3], #1
 8006d94:	e7f9      	b.n	8006d8a <strncpy+0x1a>
	...

08006d98 <strtok>:
 8006d98:	4b16      	ldr	r3, [pc, #88]	@ (8006df4 <strtok+0x5c>)
 8006d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9e:	681f      	ldr	r7, [r3, #0]
 8006da0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006da2:	4605      	mov	r5, r0
 8006da4:	460e      	mov	r6, r1
 8006da6:	b9ec      	cbnz	r4, 8006de4 <strtok+0x4c>
 8006da8:	2050      	movs	r0, #80	@ 0x50
 8006daa:	f000 f943 	bl	8007034 <malloc>
 8006dae:	4602      	mov	r2, r0
 8006db0:	6478      	str	r0, [r7, #68]	@ 0x44
 8006db2:	b920      	cbnz	r0, 8006dbe <strtok+0x26>
 8006db4:	4b10      	ldr	r3, [pc, #64]	@ (8006df8 <strtok+0x60>)
 8006db6:	4811      	ldr	r0, [pc, #68]	@ (8006dfc <strtok+0x64>)
 8006db8:	215b      	movs	r1, #91	@ 0x5b
 8006dba:	f000 f8d3 	bl	8006f64 <__assert_func>
 8006dbe:	e9c0 4400 	strd	r4, r4, [r0]
 8006dc2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006dc6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006dca:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006dce:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006dd2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006dd6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006dda:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006dde:	6184      	str	r4, [r0, #24]
 8006de0:	7704      	strb	r4, [r0, #28]
 8006de2:	6244      	str	r4, [r0, #36]	@ 0x24
 8006de4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006de6:	4631      	mov	r1, r6
 8006de8:	4628      	mov	r0, r5
 8006dea:	2301      	movs	r3, #1
 8006dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006df0:	f000 b806 	b.w	8006e00 <__strtok_r>
 8006df4:	20000024 	.word	0x20000024
 8006df8:	08008a24 	.word	0x08008a24
 8006dfc:	08008a3b 	.word	0x08008a3b

08006e00 <__strtok_r>:
 8006e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e02:	4604      	mov	r4, r0
 8006e04:	b908      	cbnz	r0, 8006e0a <__strtok_r+0xa>
 8006e06:	6814      	ldr	r4, [r2, #0]
 8006e08:	b144      	cbz	r4, 8006e1c <__strtok_r+0x1c>
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006e10:	460f      	mov	r7, r1
 8006e12:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e16:	b91e      	cbnz	r6, 8006e20 <__strtok_r+0x20>
 8006e18:	b965      	cbnz	r5, 8006e34 <__strtok_r+0x34>
 8006e1a:	6015      	str	r5, [r2, #0]
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e005      	b.n	8006e2c <__strtok_r+0x2c>
 8006e20:	42b5      	cmp	r5, r6
 8006e22:	d1f6      	bne.n	8006e12 <__strtok_r+0x12>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1f0      	bne.n	8006e0a <__strtok_r+0xa>
 8006e28:	6014      	str	r4, [r2, #0]
 8006e2a:	7003      	strb	r3, [r0, #0]
 8006e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e2e:	461c      	mov	r4, r3
 8006e30:	e00c      	b.n	8006e4c <__strtok_r+0x4c>
 8006e32:	b915      	cbnz	r5, 8006e3a <__strtok_r+0x3a>
 8006e34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e38:	460e      	mov	r6, r1
 8006e3a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006e3e:	42ab      	cmp	r3, r5
 8006e40:	d1f7      	bne.n	8006e32 <__strtok_r+0x32>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f3      	beq.n	8006e2e <__strtok_r+0x2e>
 8006e46:	2300      	movs	r3, #0
 8006e48:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006e4c:	6014      	str	r4, [r2, #0]
 8006e4e:	e7ed      	b.n	8006e2c <__strtok_r+0x2c>

08006e50 <_close_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	4d06      	ldr	r5, [pc, #24]	@ (8006e6c <_close_r+0x1c>)
 8006e54:	2300      	movs	r3, #0
 8006e56:	4604      	mov	r4, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	602b      	str	r3, [r5, #0]
 8006e5c:	f7fa fec6 	bl	8001bec <_close>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_close_r+0x1a>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_close_r+0x1a>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	200176b0 	.word	0x200176b0

08006e70 <_lseek_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4d07      	ldr	r5, [pc, #28]	@ (8006e90 <_lseek_r+0x20>)
 8006e74:	4604      	mov	r4, r0
 8006e76:	4608      	mov	r0, r1
 8006e78:	4611      	mov	r1, r2
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	602a      	str	r2, [r5, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f7fa fedb 	bl	8001c3a <_lseek>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d102      	bne.n	8006e8e <_lseek_r+0x1e>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	b103      	cbz	r3, 8006e8e <_lseek_r+0x1e>
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	200176b0 	.word	0x200176b0

08006e94 <_read_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d07      	ldr	r5, [pc, #28]	@ (8006eb4 <_read_r+0x20>)
 8006e98:	4604      	mov	r4, r0
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	602a      	str	r2, [r5, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f7fa fe69 	bl	8001b7a <_read>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	d102      	bne.n	8006eb2 <_read_r+0x1e>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	b103      	cbz	r3, 8006eb2 <_read_r+0x1e>
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	bd38      	pop	{r3, r4, r5, pc}
 8006eb4:	200176b0 	.word	0x200176b0

08006eb8 <_write_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4d07      	ldr	r5, [pc, #28]	@ (8006ed8 <_write_r+0x20>)
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	4608      	mov	r0, r1
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	602a      	str	r2, [r5, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f7fa fe74 	bl	8001bb4 <_write>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d102      	bne.n	8006ed6 <_write_r+0x1e>
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	b103      	cbz	r3, 8006ed6 <_write_r+0x1e>
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	200176b0 	.word	0x200176b0

08006edc <__errno>:
 8006edc:	4b01      	ldr	r3, [pc, #4]	@ (8006ee4 <__errno+0x8>)
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000024 	.word	0x20000024

08006ee8 <__libc_init_array>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4d0d      	ldr	r5, [pc, #52]	@ (8006f20 <__libc_init_array+0x38>)
 8006eec:	4c0d      	ldr	r4, [pc, #52]	@ (8006f24 <__libc_init_array+0x3c>)
 8006eee:	1b64      	subs	r4, r4, r5
 8006ef0:	10a4      	asrs	r4, r4, #2
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	42a6      	cmp	r6, r4
 8006ef6:	d109      	bne.n	8006f0c <__libc_init_array+0x24>
 8006ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8006f28 <__libc_init_array+0x40>)
 8006efa:	4c0c      	ldr	r4, [pc, #48]	@ (8006f2c <__libc_init_array+0x44>)
 8006efc:	f000 fff8 	bl	8007ef0 <_init>
 8006f00:	1b64      	subs	r4, r4, r5
 8006f02:	10a4      	asrs	r4, r4, #2
 8006f04:	2600      	movs	r6, #0
 8006f06:	42a6      	cmp	r6, r4
 8006f08:	d105      	bne.n	8006f16 <__libc_init_array+0x2e>
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f10:	4798      	blx	r3
 8006f12:	3601      	adds	r6, #1
 8006f14:	e7ee      	b.n	8006ef4 <__libc_init_array+0xc>
 8006f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1a:	4798      	blx	r3
 8006f1c:	3601      	adds	r6, #1
 8006f1e:	e7f2      	b.n	8006f06 <__libc_init_array+0x1e>
 8006f20:	08008b0c 	.word	0x08008b0c
 8006f24:	08008b0c 	.word	0x08008b0c
 8006f28:	08008b0c 	.word	0x08008b0c
 8006f2c:	08008b10 	.word	0x08008b10

08006f30 <__retarget_lock_init_recursive>:
 8006f30:	4770      	bx	lr

08006f32 <__retarget_lock_acquire_recursive>:
 8006f32:	4770      	bx	lr

08006f34 <__retarget_lock_release_recursive>:
 8006f34:	4770      	bx	lr

08006f36 <strcpy>:
 8006f36:	4603      	mov	r3, r0
 8006f38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f3c:	f803 2b01 	strb.w	r2, [r3], #1
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	d1f9      	bne.n	8006f38 <strcpy+0x2>
 8006f44:	4770      	bx	lr

08006f46 <memcpy>:
 8006f46:	440a      	add	r2, r1
 8006f48:	4291      	cmp	r1, r2
 8006f4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f4e:	d100      	bne.n	8006f52 <memcpy+0xc>
 8006f50:	4770      	bx	lr
 8006f52:	b510      	push	{r4, lr}
 8006f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f5c:	4291      	cmp	r1, r2
 8006f5e:	d1f9      	bne.n	8006f54 <memcpy+0xe>
 8006f60:	bd10      	pop	{r4, pc}
	...

08006f64 <__assert_func>:
 8006f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f66:	4614      	mov	r4, r2
 8006f68:	461a      	mov	r2, r3
 8006f6a:	4b09      	ldr	r3, [pc, #36]	@ (8006f90 <__assert_func+0x2c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4605      	mov	r5, r0
 8006f70:	68d8      	ldr	r0, [r3, #12]
 8006f72:	b954      	cbnz	r4, 8006f8a <__assert_func+0x26>
 8006f74:	4b07      	ldr	r3, [pc, #28]	@ (8006f94 <__assert_func+0x30>)
 8006f76:	461c      	mov	r4, r3
 8006f78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f7c:	9100      	str	r1, [sp, #0]
 8006f7e:	462b      	mov	r3, r5
 8006f80:	4905      	ldr	r1, [pc, #20]	@ (8006f98 <__assert_func+0x34>)
 8006f82:	f000 fc9f 	bl	80078c4 <fiprintf>
 8006f86:	f000 fcd9 	bl	800793c <abort>
 8006f8a:	4b04      	ldr	r3, [pc, #16]	@ (8006f9c <__assert_func+0x38>)
 8006f8c:	e7f4      	b.n	8006f78 <__assert_func+0x14>
 8006f8e:	bf00      	nop
 8006f90:	20000024 	.word	0x20000024
 8006f94:	08008ad0 	.word	0x08008ad0
 8006f98:	08008aa2 	.word	0x08008aa2
 8006f9c:	08008a95 	.word	0x08008a95

08006fa0 <_free_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	2900      	cmp	r1, #0
 8006fa6:	d041      	beq.n	800702c <_free_r+0x8c>
 8006fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fac:	1f0c      	subs	r4, r1, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bfb8      	it	lt
 8006fb2:	18e4      	addlt	r4, r4, r3
 8006fb4:	f000 f8e8 	bl	8007188 <__malloc_lock>
 8006fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007030 <_free_r+0x90>)
 8006fba:	6813      	ldr	r3, [r2, #0]
 8006fbc:	b933      	cbnz	r3, 8006fcc <_free_r+0x2c>
 8006fbe:	6063      	str	r3, [r4, #4]
 8006fc0:	6014      	str	r4, [r2, #0]
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fc8:	f000 b8e4 	b.w	8007194 <__malloc_unlock>
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	d908      	bls.n	8006fe2 <_free_r+0x42>
 8006fd0:	6820      	ldr	r0, [r4, #0]
 8006fd2:	1821      	adds	r1, r4, r0
 8006fd4:	428b      	cmp	r3, r1
 8006fd6:	bf01      	itttt	eq
 8006fd8:	6819      	ldreq	r1, [r3, #0]
 8006fda:	685b      	ldreq	r3, [r3, #4]
 8006fdc:	1809      	addeq	r1, r1, r0
 8006fde:	6021      	streq	r1, [r4, #0]
 8006fe0:	e7ed      	b.n	8006fbe <_free_r+0x1e>
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	b10b      	cbz	r3, 8006fec <_free_r+0x4c>
 8006fe8:	42a3      	cmp	r3, r4
 8006fea:	d9fa      	bls.n	8006fe2 <_free_r+0x42>
 8006fec:	6811      	ldr	r1, [r2, #0]
 8006fee:	1850      	adds	r0, r2, r1
 8006ff0:	42a0      	cmp	r0, r4
 8006ff2:	d10b      	bne.n	800700c <_free_r+0x6c>
 8006ff4:	6820      	ldr	r0, [r4, #0]
 8006ff6:	4401      	add	r1, r0
 8006ff8:	1850      	adds	r0, r2, r1
 8006ffa:	4283      	cmp	r3, r0
 8006ffc:	6011      	str	r1, [r2, #0]
 8006ffe:	d1e0      	bne.n	8006fc2 <_free_r+0x22>
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	6053      	str	r3, [r2, #4]
 8007006:	4408      	add	r0, r1
 8007008:	6010      	str	r0, [r2, #0]
 800700a:	e7da      	b.n	8006fc2 <_free_r+0x22>
 800700c:	d902      	bls.n	8007014 <_free_r+0x74>
 800700e:	230c      	movs	r3, #12
 8007010:	602b      	str	r3, [r5, #0]
 8007012:	e7d6      	b.n	8006fc2 <_free_r+0x22>
 8007014:	6820      	ldr	r0, [r4, #0]
 8007016:	1821      	adds	r1, r4, r0
 8007018:	428b      	cmp	r3, r1
 800701a:	bf04      	itt	eq
 800701c:	6819      	ldreq	r1, [r3, #0]
 800701e:	685b      	ldreq	r3, [r3, #4]
 8007020:	6063      	str	r3, [r4, #4]
 8007022:	bf04      	itt	eq
 8007024:	1809      	addeq	r1, r1, r0
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	6054      	str	r4, [r2, #4]
 800702a:	e7ca      	b.n	8006fc2 <_free_r+0x22>
 800702c:	bd38      	pop	{r3, r4, r5, pc}
 800702e:	bf00      	nop
 8007030:	200176bc 	.word	0x200176bc

08007034 <malloc>:
 8007034:	4b02      	ldr	r3, [pc, #8]	@ (8007040 <malloc+0xc>)
 8007036:	4601      	mov	r1, r0
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	f000 b825 	b.w	8007088 <_malloc_r>
 800703e:	bf00      	nop
 8007040:	20000024 	.word	0x20000024

08007044 <sbrk_aligned>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	4e0f      	ldr	r6, [pc, #60]	@ (8007084 <sbrk_aligned+0x40>)
 8007048:	460c      	mov	r4, r1
 800704a:	6831      	ldr	r1, [r6, #0]
 800704c:	4605      	mov	r5, r0
 800704e:	b911      	cbnz	r1, 8007056 <sbrk_aligned+0x12>
 8007050:	f000 fc64 	bl	800791c <_sbrk_r>
 8007054:	6030      	str	r0, [r6, #0]
 8007056:	4621      	mov	r1, r4
 8007058:	4628      	mov	r0, r5
 800705a:	f000 fc5f 	bl	800791c <_sbrk_r>
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	d103      	bne.n	800706a <sbrk_aligned+0x26>
 8007062:	f04f 34ff 	mov.w	r4, #4294967295
 8007066:	4620      	mov	r0, r4
 8007068:	bd70      	pop	{r4, r5, r6, pc}
 800706a:	1cc4      	adds	r4, r0, #3
 800706c:	f024 0403 	bic.w	r4, r4, #3
 8007070:	42a0      	cmp	r0, r4
 8007072:	d0f8      	beq.n	8007066 <sbrk_aligned+0x22>
 8007074:	1a21      	subs	r1, r4, r0
 8007076:	4628      	mov	r0, r5
 8007078:	f000 fc50 	bl	800791c <_sbrk_r>
 800707c:	3001      	adds	r0, #1
 800707e:	d1f2      	bne.n	8007066 <sbrk_aligned+0x22>
 8007080:	e7ef      	b.n	8007062 <sbrk_aligned+0x1e>
 8007082:	bf00      	nop
 8007084:	200176b8 	.word	0x200176b8

08007088 <_malloc_r>:
 8007088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800708c:	1ccd      	adds	r5, r1, #3
 800708e:	f025 0503 	bic.w	r5, r5, #3
 8007092:	3508      	adds	r5, #8
 8007094:	2d0c      	cmp	r5, #12
 8007096:	bf38      	it	cc
 8007098:	250c      	movcc	r5, #12
 800709a:	2d00      	cmp	r5, #0
 800709c:	4606      	mov	r6, r0
 800709e:	db01      	blt.n	80070a4 <_malloc_r+0x1c>
 80070a0:	42a9      	cmp	r1, r5
 80070a2:	d904      	bls.n	80070ae <_malloc_r+0x26>
 80070a4:	230c      	movs	r3, #12
 80070a6:	6033      	str	r3, [r6, #0]
 80070a8:	2000      	movs	r0, #0
 80070aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007184 <_malloc_r+0xfc>
 80070b2:	f000 f869 	bl	8007188 <__malloc_lock>
 80070b6:	f8d8 3000 	ldr.w	r3, [r8]
 80070ba:	461c      	mov	r4, r3
 80070bc:	bb44      	cbnz	r4, 8007110 <_malloc_r+0x88>
 80070be:	4629      	mov	r1, r5
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7ff ffbf 	bl	8007044 <sbrk_aligned>
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	4604      	mov	r4, r0
 80070ca:	d158      	bne.n	800717e <_malloc_r+0xf6>
 80070cc:	f8d8 4000 	ldr.w	r4, [r8]
 80070d0:	4627      	mov	r7, r4
 80070d2:	2f00      	cmp	r7, #0
 80070d4:	d143      	bne.n	800715e <_malloc_r+0xd6>
 80070d6:	2c00      	cmp	r4, #0
 80070d8:	d04b      	beq.n	8007172 <_malloc_r+0xea>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	4639      	mov	r1, r7
 80070de:	4630      	mov	r0, r6
 80070e0:	eb04 0903 	add.w	r9, r4, r3
 80070e4:	f000 fc1a 	bl	800791c <_sbrk_r>
 80070e8:	4581      	cmp	r9, r0
 80070ea:	d142      	bne.n	8007172 <_malloc_r+0xea>
 80070ec:	6821      	ldr	r1, [r4, #0]
 80070ee:	1a6d      	subs	r5, r5, r1
 80070f0:	4629      	mov	r1, r5
 80070f2:	4630      	mov	r0, r6
 80070f4:	f7ff ffa6 	bl	8007044 <sbrk_aligned>
 80070f8:	3001      	adds	r0, #1
 80070fa:	d03a      	beq.n	8007172 <_malloc_r+0xea>
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	442b      	add	r3, r5
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	f8d8 3000 	ldr.w	r3, [r8]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	bb62      	cbnz	r2, 8007164 <_malloc_r+0xdc>
 800710a:	f8c8 7000 	str.w	r7, [r8]
 800710e:	e00f      	b.n	8007130 <_malloc_r+0xa8>
 8007110:	6822      	ldr	r2, [r4, #0]
 8007112:	1b52      	subs	r2, r2, r5
 8007114:	d420      	bmi.n	8007158 <_malloc_r+0xd0>
 8007116:	2a0b      	cmp	r2, #11
 8007118:	d917      	bls.n	800714a <_malloc_r+0xc2>
 800711a:	1961      	adds	r1, r4, r5
 800711c:	42a3      	cmp	r3, r4
 800711e:	6025      	str	r5, [r4, #0]
 8007120:	bf18      	it	ne
 8007122:	6059      	strne	r1, [r3, #4]
 8007124:	6863      	ldr	r3, [r4, #4]
 8007126:	bf08      	it	eq
 8007128:	f8c8 1000 	streq.w	r1, [r8]
 800712c:	5162      	str	r2, [r4, r5]
 800712e:	604b      	str	r3, [r1, #4]
 8007130:	4630      	mov	r0, r6
 8007132:	f000 f82f 	bl	8007194 <__malloc_unlock>
 8007136:	f104 000b 	add.w	r0, r4, #11
 800713a:	1d23      	adds	r3, r4, #4
 800713c:	f020 0007 	bic.w	r0, r0, #7
 8007140:	1ac2      	subs	r2, r0, r3
 8007142:	bf1c      	itt	ne
 8007144:	1a1b      	subne	r3, r3, r0
 8007146:	50a3      	strne	r3, [r4, r2]
 8007148:	e7af      	b.n	80070aa <_malloc_r+0x22>
 800714a:	6862      	ldr	r2, [r4, #4]
 800714c:	42a3      	cmp	r3, r4
 800714e:	bf0c      	ite	eq
 8007150:	f8c8 2000 	streq.w	r2, [r8]
 8007154:	605a      	strne	r2, [r3, #4]
 8007156:	e7eb      	b.n	8007130 <_malloc_r+0xa8>
 8007158:	4623      	mov	r3, r4
 800715a:	6864      	ldr	r4, [r4, #4]
 800715c:	e7ae      	b.n	80070bc <_malloc_r+0x34>
 800715e:	463c      	mov	r4, r7
 8007160:	687f      	ldr	r7, [r7, #4]
 8007162:	e7b6      	b.n	80070d2 <_malloc_r+0x4a>
 8007164:	461a      	mov	r2, r3
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	42a3      	cmp	r3, r4
 800716a:	d1fb      	bne.n	8007164 <_malloc_r+0xdc>
 800716c:	2300      	movs	r3, #0
 800716e:	6053      	str	r3, [r2, #4]
 8007170:	e7de      	b.n	8007130 <_malloc_r+0xa8>
 8007172:	230c      	movs	r3, #12
 8007174:	6033      	str	r3, [r6, #0]
 8007176:	4630      	mov	r0, r6
 8007178:	f000 f80c 	bl	8007194 <__malloc_unlock>
 800717c:	e794      	b.n	80070a8 <_malloc_r+0x20>
 800717e:	6005      	str	r5, [r0, #0]
 8007180:	e7d6      	b.n	8007130 <_malloc_r+0xa8>
 8007182:	bf00      	nop
 8007184:	200176bc 	.word	0x200176bc

08007188 <__malloc_lock>:
 8007188:	4801      	ldr	r0, [pc, #4]	@ (8007190 <__malloc_lock+0x8>)
 800718a:	f7ff bed2 	b.w	8006f32 <__retarget_lock_acquire_recursive>
 800718e:	bf00      	nop
 8007190:	200176b4 	.word	0x200176b4

08007194 <__malloc_unlock>:
 8007194:	4801      	ldr	r0, [pc, #4]	@ (800719c <__malloc_unlock+0x8>)
 8007196:	f7ff becd 	b.w	8006f34 <__retarget_lock_release_recursive>
 800719a:	bf00      	nop
 800719c:	200176b4 	.word	0x200176b4

080071a0 <__ssputs_r>:
 80071a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a4:	688e      	ldr	r6, [r1, #8]
 80071a6:	461f      	mov	r7, r3
 80071a8:	42be      	cmp	r6, r7
 80071aa:	680b      	ldr	r3, [r1, #0]
 80071ac:	4682      	mov	sl, r0
 80071ae:	460c      	mov	r4, r1
 80071b0:	4690      	mov	r8, r2
 80071b2:	d82d      	bhi.n	8007210 <__ssputs_r+0x70>
 80071b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071bc:	d026      	beq.n	800720c <__ssputs_r+0x6c>
 80071be:	6965      	ldr	r5, [r4, #20]
 80071c0:	6909      	ldr	r1, [r1, #16]
 80071c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071c6:	eba3 0901 	sub.w	r9, r3, r1
 80071ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071ce:	1c7b      	adds	r3, r7, #1
 80071d0:	444b      	add	r3, r9
 80071d2:	106d      	asrs	r5, r5, #1
 80071d4:	429d      	cmp	r5, r3
 80071d6:	bf38      	it	cc
 80071d8:	461d      	movcc	r5, r3
 80071da:	0553      	lsls	r3, r2, #21
 80071dc:	d527      	bpl.n	800722e <__ssputs_r+0x8e>
 80071de:	4629      	mov	r1, r5
 80071e0:	f7ff ff52 	bl	8007088 <_malloc_r>
 80071e4:	4606      	mov	r6, r0
 80071e6:	b360      	cbz	r0, 8007242 <__ssputs_r+0xa2>
 80071e8:	6921      	ldr	r1, [r4, #16]
 80071ea:	464a      	mov	r2, r9
 80071ec:	f7ff feab 	bl	8006f46 <memcpy>
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071fa:	81a3      	strh	r3, [r4, #12]
 80071fc:	6126      	str	r6, [r4, #16]
 80071fe:	6165      	str	r5, [r4, #20]
 8007200:	444e      	add	r6, r9
 8007202:	eba5 0509 	sub.w	r5, r5, r9
 8007206:	6026      	str	r6, [r4, #0]
 8007208:	60a5      	str	r5, [r4, #8]
 800720a:	463e      	mov	r6, r7
 800720c:	42be      	cmp	r6, r7
 800720e:	d900      	bls.n	8007212 <__ssputs_r+0x72>
 8007210:	463e      	mov	r6, r7
 8007212:	6820      	ldr	r0, [r4, #0]
 8007214:	4632      	mov	r2, r6
 8007216:	4641      	mov	r1, r8
 8007218:	f000 fb66 	bl	80078e8 <memmove>
 800721c:	68a3      	ldr	r3, [r4, #8]
 800721e:	1b9b      	subs	r3, r3, r6
 8007220:	60a3      	str	r3, [r4, #8]
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	4433      	add	r3, r6
 8007226:	6023      	str	r3, [r4, #0]
 8007228:	2000      	movs	r0, #0
 800722a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722e:	462a      	mov	r2, r5
 8007230:	f000 fb8b 	bl	800794a <_realloc_r>
 8007234:	4606      	mov	r6, r0
 8007236:	2800      	cmp	r0, #0
 8007238:	d1e0      	bne.n	80071fc <__ssputs_r+0x5c>
 800723a:	6921      	ldr	r1, [r4, #16]
 800723c:	4650      	mov	r0, sl
 800723e:	f7ff feaf 	bl	8006fa0 <_free_r>
 8007242:	230c      	movs	r3, #12
 8007244:	f8ca 3000 	str.w	r3, [sl]
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	f04f 30ff 	mov.w	r0, #4294967295
 8007254:	e7e9      	b.n	800722a <__ssputs_r+0x8a>
	...

08007258 <_svfiprintf_r>:
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	4698      	mov	r8, r3
 800725e:	898b      	ldrh	r3, [r1, #12]
 8007260:	061b      	lsls	r3, r3, #24
 8007262:	b09d      	sub	sp, #116	@ 0x74
 8007264:	4607      	mov	r7, r0
 8007266:	460d      	mov	r5, r1
 8007268:	4614      	mov	r4, r2
 800726a:	d510      	bpl.n	800728e <_svfiprintf_r+0x36>
 800726c:	690b      	ldr	r3, [r1, #16]
 800726e:	b973      	cbnz	r3, 800728e <_svfiprintf_r+0x36>
 8007270:	2140      	movs	r1, #64	@ 0x40
 8007272:	f7ff ff09 	bl	8007088 <_malloc_r>
 8007276:	6028      	str	r0, [r5, #0]
 8007278:	6128      	str	r0, [r5, #16]
 800727a:	b930      	cbnz	r0, 800728a <_svfiprintf_r+0x32>
 800727c:	230c      	movs	r3, #12
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	b01d      	add	sp, #116	@ 0x74
 8007286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728a:	2340      	movs	r3, #64	@ 0x40
 800728c:	616b      	str	r3, [r5, #20]
 800728e:	2300      	movs	r3, #0
 8007290:	9309      	str	r3, [sp, #36]	@ 0x24
 8007292:	2320      	movs	r3, #32
 8007294:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007298:	f8cd 800c 	str.w	r8, [sp, #12]
 800729c:	2330      	movs	r3, #48	@ 0x30
 800729e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800743c <_svfiprintf_r+0x1e4>
 80072a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072a6:	f04f 0901 	mov.w	r9, #1
 80072aa:	4623      	mov	r3, r4
 80072ac:	469a      	mov	sl, r3
 80072ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072b2:	b10a      	cbz	r2, 80072b8 <_svfiprintf_r+0x60>
 80072b4:	2a25      	cmp	r2, #37	@ 0x25
 80072b6:	d1f9      	bne.n	80072ac <_svfiprintf_r+0x54>
 80072b8:	ebba 0b04 	subs.w	fp, sl, r4
 80072bc:	d00b      	beq.n	80072d6 <_svfiprintf_r+0x7e>
 80072be:	465b      	mov	r3, fp
 80072c0:	4622      	mov	r2, r4
 80072c2:	4629      	mov	r1, r5
 80072c4:	4638      	mov	r0, r7
 80072c6:	f7ff ff6b 	bl	80071a0 <__ssputs_r>
 80072ca:	3001      	adds	r0, #1
 80072cc:	f000 80a7 	beq.w	800741e <_svfiprintf_r+0x1c6>
 80072d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072d2:	445a      	add	r2, fp
 80072d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80072d6:	f89a 3000 	ldrb.w	r3, [sl]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 809f 	beq.w	800741e <_svfiprintf_r+0x1c6>
 80072e0:	2300      	movs	r3, #0
 80072e2:	f04f 32ff 	mov.w	r2, #4294967295
 80072e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ea:	f10a 0a01 	add.w	sl, sl, #1
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	9307      	str	r3, [sp, #28]
 80072f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80072f8:	4654      	mov	r4, sl
 80072fa:	2205      	movs	r2, #5
 80072fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007300:	484e      	ldr	r0, [pc, #312]	@ (800743c <_svfiprintf_r+0x1e4>)
 8007302:	f7f8 ff7d 	bl	8000200 <memchr>
 8007306:	9a04      	ldr	r2, [sp, #16]
 8007308:	b9d8      	cbnz	r0, 8007342 <_svfiprintf_r+0xea>
 800730a:	06d0      	lsls	r0, r2, #27
 800730c:	bf44      	itt	mi
 800730e:	2320      	movmi	r3, #32
 8007310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007314:	0711      	lsls	r1, r2, #28
 8007316:	bf44      	itt	mi
 8007318:	232b      	movmi	r3, #43	@ 0x2b
 800731a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800731e:	f89a 3000 	ldrb.w	r3, [sl]
 8007322:	2b2a      	cmp	r3, #42	@ 0x2a
 8007324:	d015      	beq.n	8007352 <_svfiprintf_r+0xfa>
 8007326:	9a07      	ldr	r2, [sp, #28]
 8007328:	4654      	mov	r4, sl
 800732a:	2000      	movs	r0, #0
 800732c:	f04f 0c0a 	mov.w	ip, #10
 8007330:	4621      	mov	r1, r4
 8007332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007336:	3b30      	subs	r3, #48	@ 0x30
 8007338:	2b09      	cmp	r3, #9
 800733a:	d94b      	bls.n	80073d4 <_svfiprintf_r+0x17c>
 800733c:	b1b0      	cbz	r0, 800736c <_svfiprintf_r+0x114>
 800733e:	9207      	str	r2, [sp, #28]
 8007340:	e014      	b.n	800736c <_svfiprintf_r+0x114>
 8007342:	eba0 0308 	sub.w	r3, r0, r8
 8007346:	fa09 f303 	lsl.w	r3, r9, r3
 800734a:	4313      	orrs	r3, r2
 800734c:	9304      	str	r3, [sp, #16]
 800734e:	46a2      	mov	sl, r4
 8007350:	e7d2      	b.n	80072f8 <_svfiprintf_r+0xa0>
 8007352:	9b03      	ldr	r3, [sp, #12]
 8007354:	1d19      	adds	r1, r3, #4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	9103      	str	r1, [sp, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	bfbb      	ittet	lt
 800735e:	425b      	neglt	r3, r3
 8007360:	f042 0202 	orrlt.w	r2, r2, #2
 8007364:	9307      	strge	r3, [sp, #28]
 8007366:	9307      	strlt	r3, [sp, #28]
 8007368:	bfb8      	it	lt
 800736a:	9204      	strlt	r2, [sp, #16]
 800736c:	7823      	ldrb	r3, [r4, #0]
 800736e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007370:	d10a      	bne.n	8007388 <_svfiprintf_r+0x130>
 8007372:	7863      	ldrb	r3, [r4, #1]
 8007374:	2b2a      	cmp	r3, #42	@ 0x2a
 8007376:	d132      	bne.n	80073de <_svfiprintf_r+0x186>
 8007378:	9b03      	ldr	r3, [sp, #12]
 800737a:	1d1a      	adds	r2, r3, #4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	9203      	str	r2, [sp, #12]
 8007380:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007384:	3402      	adds	r4, #2
 8007386:	9305      	str	r3, [sp, #20]
 8007388:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800744c <_svfiprintf_r+0x1f4>
 800738c:	7821      	ldrb	r1, [r4, #0]
 800738e:	2203      	movs	r2, #3
 8007390:	4650      	mov	r0, sl
 8007392:	f7f8 ff35 	bl	8000200 <memchr>
 8007396:	b138      	cbz	r0, 80073a8 <_svfiprintf_r+0x150>
 8007398:	9b04      	ldr	r3, [sp, #16]
 800739a:	eba0 000a 	sub.w	r0, r0, sl
 800739e:	2240      	movs	r2, #64	@ 0x40
 80073a0:	4082      	lsls	r2, r0
 80073a2:	4313      	orrs	r3, r2
 80073a4:	3401      	adds	r4, #1
 80073a6:	9304      	str	r3, [sp, #16]
 80073a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ac:	4824      	ldr	r0, [pc, #144]	@ (8007440 <_svfiprintf_r+0x1e8>)
 80073ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073b2:	2206      	movs	r2, #6
 80073b4:	f7f8 ff24 	bl	8000200 <memchr>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d036      	beq.n	800742a <_svfiprintf_r+0x1d2>
 80073bc:	4b21      	ldr	r3, [pc, #132]	@ (8007444 <_svfiprintf_r+0x1ec>)
 80073be:	bb1b      	cbnz	r3, 8007408 <_svfiprintf_r+0x1b0>
 80073c0:	9b03      	ldr	r3, [sp, #12]
 80073c2:	3307      	adds	r3, #7
 80073c4:	f023 0307 	bic.w	r3, r3, #7
 80073c8:	3308      	adds	r3, #8
 80073ca:	9303      	str	r3, [sp, #12]
 80073cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ce:	4433      	add	r3, r6
 80073d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d2:	e76a      	b.n	80072aa <_svfiprintf_r+0x52>
 80073d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80073d8:	460c      	mov	r4, r1
 80073da:	2001      	movs	r0, #1
 80073dc:	e7a8      	b.n	8007330 <_svfiprintf_r+0xd8>
 80073de:	2300      	movs	r3, #0
 80073e0:	3401      	adds	r4, #1
 80073e2:	9305      	str	r3, [sp, #20]
 80073e4:	4619      	mov	r1, r3
 80073e6:	f04f 0c0a 	mov.w	ip, #10
 80073ea:	4620      	mov	r0, r4
 80073ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073f0:	3a30      	subs	r2, #48	@ 0x30
 80073f2:	2a09      	cmp	r2, #9
 80073f4:	d903      	bls.n	80073fe <_svfiprintf_r+0x1a6>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0c6      	beq.n	8007388 <_svfiprintf_r+0x130>
 80073fa:	9105      	str	r1, [sp, #20]
 80073fc:	e7c4      	b.n	8007388 <_svfiprintf_r+0x130>
 80073fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007402:	4604      	mov	r4, r0
 8007404:	2301      	movs	r3, #1
 8007406:	e7f0      	b.n	80073ea <_svfiprintf_r+0x192>
 8007408:	ab03      	add	r3, sp, #12
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	462a      	mov	r2, r5
 800740e:	4b0e      	ldr	r3, [pc, #56]	@ (8007448 <_svfiprintf_r+0x1f0>)
 8007410:	a904      	add	r1, sp, #16
 8007412:	4638      	mov	r0, r7
 8007414:	f3af 8000 	nop.w
 8007418:	1c42      	adds	r2, r0, #1
 800741a:	4606      	mov	r6, r0
 800741c:	d1d6      	bne.n	80073cc <_svfiprintf_r+0x174>
 800741e:	89ab      	ldrh	r3, [r5, #12]
 8007420:	065b      	lsls	r3, r3, #25
 8007422:	f53f af2d 	bmi.w	8007280 <_svfiprintf_r+0x28>
 8007426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007428:	e72c      	b.n	8007284 <_svfiprintf_r+0x2c>
 800742a:	ab03      	add	r3, sp, #12
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	462a      	mov	r2, r5
 8007430:	4b05      	ldr	r3, [pc, #20]	@ (8007448 <_svfiprintf_r+0x1f0>)
 8007432:	a904      	add	r1, sp, #16
 8007434:	4638      	mov	r0, r7
 8007436:	f000 f879 	bl	800752c <_printf_i>
 800743a:	e7ed      	b.n	8007418 <_svfiprintf_r+0x1c0>
 800743c:	08008ad1 	.word	0x08008ad1
 8007440:	08008adb 	.word	0x08008adb
 8007444:	00000000 	.word	0x00000000
 8007448:	080071a1 	.word	0x080071a1
 800744c:	08008ad7 	.word	0x08008ad7

08007450 <_printf_common>:
 8007450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007454:	4616      	mov	r6, r2
 8007456:	4698      	mov	r8, r3
 8007458:	688a      	ldr	r2, [r1, #8]
 800745a:	690b      	ldr	r3, [r1, #16]
 800745c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007460:	4293      	cmp	r3, r2
 8007462:	bfb8      	it	lt
 8007464:	4613      	movlt	r3, r2
 8007466:	6033      	str	r3, [r6, #0]
 8007468:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800746c:	4607      	mov	r7, r0
 800746e:	460c      	mov	r4, r1
 8007470:	b10a      	cbz	r2, 8007476 <_printf_common+0x26>
 8007472:	3301      	adds	r3, #1
 8007474:	6033      	str	r3, [r6, #0]
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	0699      	lsls	r1, r3, #26
 800747a:	bf42      	ittt	mi
 800747c:	6833      	ldrmi	r3, [r6, #0]
 800747e:	3302      	addmi	r3, #2
 8007480:	6033      	strmi	r3, [r6, #0]
 8007482:	6825      	ldr	r5, [r4, #0]
 8007484:	f015 0506 	ands.w	r5, r5, #6
 8007488:	d106      	bne.n	8007498 <_printf_common+0x48>
 800748a:	f104 0a19 	add.w	sl, r4, #25
 800748e:	68e3      	ldr	r3, [r4, #12]
 8007490:	6832      	ldr	r2, [r6, #0]
 8007492:	1a9b      	subs	r3, r3, r2
 8007494:	42ab      	cmp	r3, r5
 8007496:	dc26      	bgt.n	80074e6 <_printf_common+0x96>
 8007498:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800749c:	6822      	ldr	r2, [r4, #0]
 800749e:	3b00      	subs	r3, #0
 80074a0:	bf18      	it	ne
 80074a2:	2301      	movne	r3, #1
 80074a4:	0692      	lsls	r2, r2, #26
 80074a6:	d42b      	bmi.n	8007500 <_printf_common+0xb0>
 80074a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074ac:	4641      	mov	r1, r8
 80074ae:	4638      	mov	r0, r7
 80074b0:	47c8      	blx	r9
 80074b2:	3001      	adds	r0, #1
 80074b4:	d01e      	beq.n	80074f4 <_printf_common+0xa4>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	6922      	ldr	r2, [r4, #16]
 80074ba:	f003 0306 	and.w	r3, r3, #6
 80074be:	2b04      	cmp	r3, #4
 80074c0:	bf02      	ittt	eq
 80074c2:	68e5      	ldreq	r5, [r4, #12]
 80074c4:	6833      	ldreq	r3, [r6, #0]
 80074c6:	1aed      	subeq	r5, r5, r3
 80074c8:	68a3      	ldr	r3, [r4, #8]
 80074ca:	bf0c      	ite	eq
 80074cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074d0:	2500      	movne	r5, #0
 80074d2:	4293      	cmp	r3, r2
 80074d4:	bfc4      	itt	gt
 80074d6:	1a9b      	subgt	r3, r3, r2
 80074d8:	18ed      	addgt	r5, r5, r3
 80074da:	2600      	movs	r6, #0
 80074dc:	341a      	adds	r4, #26
 80074de:	42b5      	cmp	r5, r6
 80074e0:	d11a      	bne.n	8007518 <_printf_common+0xc8>
 80074e2:	2000      	movs	r0, #0
 80074e4:	e008      	b.n	80074f8 <_printf_common+0xa8>
 80074e6:	2301      	movs	r3, #1
 80074e8:	4652      	mov	r2, sl
 80074ea:	4641      	mov	r1, r8
 80074ec:	4638      	mov	r0, r7
 80074ee:	47c8      	blx	r9
 80074f0:	3001      	adds	r0, #1
 80074f2:	d103      	bne.n	80074fc <_printf_common+0xac>
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295
 80074f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074fc:	3501      	adds	r5, #1
 80074fe:	e7c6      	b.n	800748e <_printf_common+0x3e>
 8007500:	18e1      	adds	r1, r4, r3
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	2030      	movs	r0, #48	@ 0x30
 8007506:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800750a:	4422      	add	r2, r4
 800750c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007510:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007514:	3302      	adds	r3, #2
 8007516:	e7c7      	b.n	80074a8 <_printf_common+0x58>
 8007518:	2301      	movs	r3, #1
 800751a:	4622      	mov	r2, r4
 800751c:	4641      	mov	r1, r8
 800751e:	4638      	mov	r0, r7
 8007520:	47c8      	blx	r9
 8007522:	3001      	adds	r0, #1
 8007524:	d0e6      	beq.n	80074f4 <_printf_common+0xa4>
 8007526:	3601      	adds	r6, #1
 8007528:	e7d9      	b.n	80074de <_printf_common+0x8e>
	...

0800752c <_printf_i>:
 800752c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007530:	7e0f      	ldrb	r7, [r1, #24]
 8007532:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007534:	2f78      	cmp	r7, #120	@ 0x78
 8007536:	4691      	mov	r9, r2
 8007538:	4680      	mov	r8, r0
 800753a:	460c      	mov	r4, r1
 800753c:	469a      	mov	sl, r3
 800753e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007542:	d807      	bhi.n	8007554 <_printf_i+0x28>
 8007544:	2f62      	cmp	r7, #98	@ 0x62
 8007546:	d80a      	bhi.n	800755e <_printf_i+0x32>
 8007548:	2f00      	cmp	r7, #0
 800754a:	f000 80d2 	beq.w	80076f2 <_printf_i+0x1c6>
 800754e:	2f58      	cmp	r7, #88	@ 0x58
 8007550:	f000 80b9 	beq.w	80076c6 <_printf_i+0x19a>
 8007554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007558:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800755c:	e03a      	b.n	80075d4 <_printf_i+0xa8>
 800755e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007562:	2b15      	cmp	r3, #21
 8007564:	d8f6      	bhi.n	8007554 <_printf_i+0x28>
 8007566:	a101      	add	r1, pc, #4	@ (adr r1, 800756c <_printf_i+0x40>)
 8007568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800756c:	080075c5 	.word	0x080075c5
 8007570:	080075d9 	.word	0x080075d9
 8007574:	08007555 	.word	0x08007555
 8007578:	08007555 	.word	0x08007555
 800757c:	08007555 	.word	0x08007555
 8007580:	08007555 	.word	0x08007555
 8007584:	080075d9 	.word	0x080075d9
 8007588:	08007555 	.word	0x08007555
 800758c:	08007555 	.word	0x08007555
 8007590:	08007555 	.word	0x08007555
 8007594:	08007555 	.word	0x08007555
 8007598:	080076d9 	.word	0x080076d9
 800759c:	08007603 	.word	0x08007603
 80075a0:	08007693 	.word	0x08007693
 80075a4:	08007555 	.word	0x08007555
 80075a8:	08007555 	.word	0x08007555
 80075ac:	080076fb 	.word	0x080076fb
 80075b0:	08007555 	.word	0x08007555
 80075b4:	08007603 	.word	0x08007603
 80075b8:	08007555 	.word	0x08007555
 80075bc:	08007555 	.word	0x08007555
 80075c0:	0800769b 	.word	0x0800769b
 80075c4:	6833      	ldr	r3, [r6, #0]
 80075c6:	1d1a      	adds	r2, r3, #4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6032      	str	r2, [r6, #0]
 80075cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075d4:	2301      	movs	r3, #1
 80075d6:	e09d      	b.n	8007714 <_printf_i+0x1e8>
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	6820      	ldr	r0, [r4, #0]
 80075dc:	1d19      	adds	r1, r3, #4
 80075de:	6031      	str	r1, [r6, #0]
 80075e0:	0606      	lsls	r6, r0, #24
 80075e2:	d501      	bpl.n	80075e8 <_printf_i+0xbc>
 80075e4:	681d      	ldr	r5, [r3, #0]
 80075e6:	e003      	b.n	80075f0 <_printf_i+0xc4>
 80075e8:	0645      	lsls	r5, r0, #25
 80075ea:	d5fb      	bpl.n	80075e4 <_printf_i+0xb8>
 80075ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075f0:	2d00      	cmp	r5, #0
 80075f2:	da03      	bge.n	80075fc <_printf_i+0xd0>
 80075f4:	232d      	movs	r3, #45	@ 0x2d
 80075f6:	426d      	negs	r5, r5
 80075f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075fc:	4859      	ldr	r0, [pc, #356]	@ (8007764 <_printf_i+0x238>)
 80075fe:	230a      	movs	r3, #10
 8007600:	e011      	b.n	8007626 <_printf_i+0xfa>
 8007602:	6821      	ldr	r1, [r4, #0]
 8007604:	6833      	ldr	r3, [r6, #0]
 8007606:	0608      	lsls	r0, r1, #24
 8007608:	f853 5b04 	ldr.w	r5, [r3], #4
 800760c:	d402      	bmi.n	8007614 <_printf_i+0xe8>
 800760e:	0649      	lsls	r1, r1, #25
 8007610:	bf48      	it	mi
 8007612:	b2ad      	uxthmi	r5, r5
 8007614:	2f6f      	cmp	r7, #111	@ 0x6f
 8007616:	4853      	ldr	r0, [pc, #332]	@ (8007764 <_printf_i+0x238>)
 8007618:	6033      	str	r3, [r6, #0]
 800761a:	bf14      	ite	ne
 800761c:	230a      	movne	r3, #10
 800761e:	2308      	moveq	r3, #8
 8007620:	2100      	movs	r1, #0
 8007622:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007626:	6866      	ldr	r6, [r4, #4]
 8007628:	60a6      	str	r6, [r4, #8]
 800762a:	2e00      	cmp	r6, #0
 800762c:	bfa2      	ittt	ge
 800762e:	6821      	ldrge	r1, [r4, #0]
 8007630:	f021 0104 	bicge.w	r1, r1, #4
 8007634:	6021      	strge	r1, [r4, #0]
 8007636:	b90d      	cbnz	r5, 800763c <_printf_i+0x110>
 8007638:	2e00      	cmp	r6, #0
 800763a:	d04b      	beq.n	80076d4 <_printf_i+0x1a8>
 800763c:	4616      	mov	r6, r2
 800763e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007642:	fb03 5711 	mls	r7, r3, r1, r5
 8007646:	5dc7      	ldrb	r7, [r0, r7]
 8007648:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800764c:	462f      	mov	r7, r5
 800764e:	42bb      	cmp	r3, r7
 8007650:	460d      	mov	r5, r1
 8007652:	d9f4      	bls.n	800763e <_printf_i+0x112>
 8007654:	2b08      	cmp	r3, #8
 8007656:	d10b      	bne.n	8007670 <_printf_i+0x144>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	07df      	lsls	r7, r3, #31
 800765c:	d508      	bpl.n	8007670 <_printf_i+0x144>
 800765e:	6923      	ldr	r3, [r4, #16]
 8007660:	6861      	ldr	r1, [r4, #4]
 8007662:	4299      	cmp	r1, r3
 8007664:	bfde      	ittt	le
 8007666:	2330      	movle	r3, #48	@ 0x30
 8007668:	f806 3c01 	strble.w	r3, [r6, #-1]
 800766c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007670:	1b92      	subs	r2, r2, r6
 8007672:	6122      	str	r2, [r4, #16]
 8007674:	f8cd a000 	str.w	sl, [sp]
 8007678:	464b      	mov	r3, r9
 800767a:	aa03      	add	r2, sp, #12
 800767c:	4621      	mov	r1, r4
 800767e:	4640      	mov	r0, r8
 8007680:	f7ff fee6 	bl	8007450 <_printf_common>
 8007684:	3001      	adds	r0, #1
 8007686:	d14a      	bne.n	800771e <_printf_i+0x1f2>
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	b004      	add	sp, #16
 800768e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	f043 0320 	orr.w	r3, r3, #32
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	4833      	ldr	r0, [pc, #204]	@ (8007768 <_printf_i+0x23c>)
 800769c:	2778      	movs	r7, #120	@ 0x78
 800769e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	6831      	ldr	r1, [r6, #0]
 80076a6:	061f      	lsls	r7, r3, #24
 80076a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80076ac:	d402      	bmi.n	80076b4 <_printf_i+0x188>
 80076ae:	065f      	lsls	r7, r3, #25
 80076b0:	bf48      	it	mi
 80076b2:	b2ad      	uxthmi	r5, r5
 80076b4:	6031      	str	r1, [r6, #0]
 80076b6:	07d9      	lsls	r1, r3, #31
 80076b8:	bf44      	itt	mi
 80076ba:	f043 0320 	orrmi.w	r3, r3, #32
 80076be:	6023      	strmi	r3, [r4, #0]
 80076c0:	b11d      	cbz	r5, 80076ca <_printf_i+0x19e>
 80076c2:	2310      	movs	r3, #16
 80076c4:	e7ac      	b.n	8007620 <_printf_i+0xf4>
 80076c6:	4827      	ldr	r0, [pc, #156]	@ (8007764 <_printf_i+0x238>)
 80076c8:	e7e9      	b.n	800769e <_printf_i+0x172>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	f023 0320 	bic.w	r3, r3, #32
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	e7f6      	b.n	80076c2 <_printf_i+0x196>
 80076d4:	4616      	mov	r6, r2
 80076d6:	e7bd      	b.n	8007654 <_printf_i+0x128>
 80076d8:	6833      	ldr	r3, [r6, #0]
 80076da:	6825      	ldr	r5, [r4, #0]
 80076dc:	6961      	ldr	r1, [r4, #20]
 80076de:	1d18      	adds	r0, r3, #4
 80076e0:	6030      	str	r0, [r6, #0]
 80076e2:	062e      	lsls	r6, r5, #24
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	d501      	bpl.n	80076ec <_printf_i+0x1c0>
 80076e8:	6019      	str	r1, [r3, #0]
 80076ea:	e002      	b.n	80076f2 <_printf_i+0x1c6>
 80076ec:	0668      	lsls	r0, r5, #25
 80076ee:	d5fb      	bpl.n	80076e8 <_printf_i+0x1bc>
 80076f0:	8019      	strh	r1, [r3, #0]
 80076f2:	2300      	movs	r3, #0
 80076f4:	6123      	str	r3, [r4, #16]
 80076f6:	4616      	mov	r6, r2
 80076f8:	e7bc      	b.n	8007674 <_printf_i+0x148>
 80076fa:	6833      	ldr	r3, [r6, #0]
 80076fc:	1d1a      	adds	r2, r3, #4
 80076fe:	6032      	str	r2, [r6, #0]
 8007700:	681e      	ldr	r6, [r3, #0]
 8007702:	6862      	ldr	r2, [r4, #4]
 8007704:	2100      	movs	r1, #0
 8007706:	4630      	mov	r0, r6
 8007708:	f7f8 fd7a 	bl	8000200 <memchr>
 800770c:	b108      	cbz	r0, 8007712 <_printf_i+0x1e6>
 800770e:	1b80      	subs	r0, r0, r6
 8007710:	6060      	str	r0, [r4, #4]
 8007712:	6863      	ldr	r3, [r4, #4]
 8007714:	6123      	str	r3, [r4, #16]
 8007716:	2300      	movs	r3, #0
 8007718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800771c:	e7aa      	b.n	8007674 <_printf_i+0x148>
 800771e:	6923      	ldr	r3, [r4, #16]
 8007720:	4632      	mov	r2, r6
 8007722:	4649      	mov	r1, r9
 8007724:	4640      	mov	r0, r8
 8007726:	47d0      	blx	sl
 8007728:	3001      	adds	r0, #1
 800772a:	d0ad      	beq.n	8007688 <_printf_i+0x15c>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	079b      	lsls	r3, r3, #30
 8007730:	d413      	bmi.n	800775a <_printf_i+0x22e>
 8007732:	68e0      	ldr	r0, [r4, #12]
 8007734:	9b03      	ldr	r3, [sp, #12]
 8007736:	4298      	cmp	r0, r3
 8007738:	bfb8      	it	lt
 800773a:	4618      	movlt	r0, r3
 800773c:	e7a6      	b.n	800768c <_printf_i+0x160>
 800773e:	2301      	movs	r3, #1
 8007740:	4632      	mov	r2, r6
 8007742:	4649      	mov	r1, r9
 8007744:	4640      	mov	r0, r8
 8007746:	47d0      	blx	sl
 8007748:	3001      	adds	r0, #1
 800774a:	d09d      	beq.n	8007688 <_printf_i+0x15c>
 800774c:	3501      	adds	r5, #1
 800774e:	68e3      	ldr	r3, [r4, #12]
 8007750:	9903      	ldr	r1, [sp, #12]
 8007752:	1a5b      	subs	r3, r3, r1
 8007754:	42ab      	cmp	r3, r5
 8007756:	dcf2      	bgt.n	800773e <_printf_i+0x212>
 8007758:	e7eb      	b.n	8007732 <_printf_i+0x206>
 800775a:	2500      	movs	r5, #0
 800775c:	f104 0619 	add.w	r6, r4, #25
 8007760:	e7f5      	b.n	800774e <_printf_i+0x222>
 8007762:	bf00      	nop
 8007764:	08008ae2 	.word	0x08008ae2
 8007768:	08008af3 	.word	0x08008af3

0800776c <__sflush_r>:
 800776c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007774:	0716      	lsls	r6, r2, #28
 8007776:	4605      	mov	r5, r0
 8007778:	460c      	mov	r4, r1
 800777a:	d454      	bmi.n	8007826 <__sflush_r+0xba>
 800777c:	684b      	ldr	r3, [r1, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	dc02      	bgt.n	8007788 <__sflush_r+0x1c>
 8007782:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007784:	2b00      	cmp	r3, #0
 8007786:	dd48      	ble.n	800781a <__sflush_r+0xae>
 8007788:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800778a:	2e00      	cmp	r6, #0
 800778c:	d045      	beq.n	800781a <__sflush_r+0xae>
 800778e:	2300      	movs	r3, #0
 8007790:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007794:	682f      	ldr	r7, [r5, #0]
 8007796:	6a21      	ldr	r1, [r4, #32]
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	d030      	beq.n	80077fe <__sflush_r+0x92>
 800779c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	0759      	lsls	r1, r3, #29
 80077a2:	d505      	bpl.n	80077b0 <__sflush_r+0x44>
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077aa:	b10b      	cbz	r3, 80077b0 <__sflush_r+0x44>
 80077ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077ae:	1ad2      	subs	r2, r2, r3
 80077b0:	2300      	movs	r3, #0
 80077b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077b4:	6a21      	ldr	r1, [r4, #32]
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b0      	blx	r6
 80077ba:	1c43      	adds	r3, r0, #1
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	d106      	bne.n	80077ce <__sflush_r+0x62>
 80077c0:	6829      	ldr	r1, [r5, #0]
 80077c2:	291d      	cmp	r1, #29
 80077c4:	d82b      	bhi.n	800781e <__sflush_r+0xb2>
 80077c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007870 <__sflush_r+0x104>)
 80077c8:	410a      	asrs	r2, r1
 80077ca:	07d6      	lsls	r6, r2, #31
 80077cc:	d427      	bmi.n	800781e <__sflush_r+0xb2>
 80077ce:	2200      	movs	r2, #0
 80077d0:	6062      	str	r2, [r4, #4]
 80077d2:	04d9      	lsls	r1, r3, #19
 80077d4:	6922      	ldr	r2, [r4, #16]
 80077d6:	6022      	str	r2, [r4, #0]
 80077d8:	d504      	bpl.n	80077e4 <__sflush_r+0x78>
 80077da:	1c42      	adds	r2, r0, #1
 80077dc:	d101      	bne.n	80077e2 <__sflush_r+0x76>
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	b903      	cbnz	r3, 80077e4 <__sflush_r+0x78>
 80077e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80077e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077e6:	602f      	str	r7, [r5, #0]
 80077e8:	b1b9      	cbz	r1, 800781a <__sflush_r+0xae>
 80077ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077ee:	4299      	cmp	r1, r3
 80077f0:	d002      	beq.n	80077f8 <__sflush_r+0x8c>
 80077f2:	4628      	mov	r0, r5
 80077f4:	f7ff fbd4 	bl	8006fa0 <_free_r>
 80077f8:	2300      	movs	r3, #0
 80077fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80077fc:	e00d      	b.n	800781a <__sflush_r+0xae>
 80077fe:	2301      	movs	r3, #1
 8007800:	4628      	mov	r0, r5
 8007802:	47b0      	blx	r6
 8007804:	4602      	mov	r2, r0
 8007806:	1c50      	adds	r0, r2, #1
 8007808:	d1c9      	bne.n	800779e <__sflush_r+0x32>
 800780a:	682b      	ldr	r3, [r5, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0c6      	beq.n	800779e <__sflush_r+0x32>
 8007810:	2b1d      	cmp	r3, #29
 8007812:	d001      	beq.n	8007818 <__sflush_r+0xac>
 8007814:	2b16      	cmp	r3, #22
 8007816:	d11e      	bne.n	8007856 <__sflush_r+0xea>
 8007818:	602f      	str	r7, [r5, #0]
 800781a:	2000      	movs	r0, #0
 800781c:	e022      	b.n	8007864 <__sflush_r+0xf8>
 800781e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007822:	b21b      	sxth	r3, r3
 8007824:	e01b      	b.n	800785e <__sflush_r+0xf2>
 8007826:	690f      	ldr	r7, [r1, #16]
 8007828:	2f00      	cmp	r7, #0
 800782a:	d0f6      	beq.n	800781a <__sflush_r+0xae>
 800782c:	0793      	lsls	r3, r2, #30
 800782e:	680e      	ldr	r6, [r1, #0]
 8007830:	bf08      	it	eq
 8007832:	694b      	ldreq	r3, [r1, #20]
 8007834:	600f      	str	r7, [r1, #0]
 8007836:	bf18      	it	ne
 8007838:	2300      	movne	r3, #0
 800783a:	eba6 0807 	sub.w	r8, r6, r7
 800783e:	608b      	str	r3, [r1, #8]
 8007840:	f1b8 0f00 	cmp.w	r8, #0
 8007844:	dde9      	ble.n	800781a <__sflush_r+0xae>
 8007846:	6a21      	ldr	r1, [r4, #32]
 8007848:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800784a:	4643      	mov	r3, r8
 800784c:	463a      	mov	r2, r7
 800784e:	4628      	mov	r0, r5
 8007850:	47b0      	blx	r6
 8007852:	2800      	cmp	r0, #0
 8007854:	dc08      	bgt.n	8007868 <__sflush_r+0xfc>
 8007856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800785a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007868:	4407      	add	r7, r0
 800786a:	eba8 0800 	sub.w	r8, r8, r0
 800786e:	e7e7      	b.n	8007840 <__sflush_r+0xd4>
 8007870:	dfbffffe 	.word	0xdfbffffe

08007874 <_fflush_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	690b      	ldr	r3, [r1, #16]
 8007878:	4605      	mov	r5, r0
 800787a:	460c      	mov	r4, r1
 800787c:	b913      	cbnz	r3, 8007884 <_fflush_r+0x10>
 800787e:	2500      	movs	r5, #0
 8007880:	4628      	mov	r0, r5
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	b118      	cbz	r0, 800788e <_fflush_r+0x1a>
 8007886:	6a03      	ldr	r3, [r0, #32]
 8007888:	b90b      	cbnz	r3, 800788e <_fflush_r+0x1a>
 800788a:	f7ff f963 	bl	8006b54 <__sinit>
 800788e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0f3      	beq.n	800787e <_fflush_r+0xa>
 8007896:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007898:	07d0      	lsls	r0, r2, #31
 800789a:	d404      	bmi.n	80078a6 <_fflush_r+0x32>
 800789c:	0599      	lsls	r1, r3, #22
 800789e:	d402      	bmi.n	80078a6 <_fflush_r+0x32>
 80078a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078a2:	f7ff fb46 	bl	8006f32 <__retarget_lock_acquire_recursive>
 80078a6:	4628      	mov	r0, r5
 80078a8:	4621      	mov	r1, r4
 80078aa:	f7ff ff5f 	bl	800776c <__sflush_r>
 80078ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078b0:	07da      	lsls	r2, r3, #31
 80078b2:	4605      	mov	r5, r0
 80078b4:	d4e4      	bmi.n	8007880 <_fflush_r+0xc>
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	059b      	lsls	r3, r3, #22
 80078ba:	d4e1      	bmi.n	8007880 <_fflush_r+0xc>
 80078bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078be:	f7ff fb39 	bl	8006f34 <__retarget_lock_release_recursive>
 80078c2:	e7dd      	b.n	8007880 <_fflush_r+0xc>

080078c4 <fiprintf>:
 80078c4:	b40e      	push	{r1, r2, r3}
 80078c6:	b503      	push	{r0, r1, lr}
 80078c8:	4601      	mov	r1, r0
 80078ca:	ab03      	add	r3, sp, #12
 80078cc:	4805      	ldr	r0, [pc, #20]	@ (80078e4 <fiprintf+0x20>)
 80078ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d2:	6800      	ldr	r0, [r0, #0]
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	f000 f88f 	bl	80079f8 <_vfiprintf_r>
 80078da:	b002      	add	sp, #8
 80078dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078e0:	b003      	add	sp, #12
 80078e2:	4770      	bx	lr
 80078e4:	20000024 	.word	0x20000024

080078e8 <memmove>:
 80078e8:	4288      	cmp	r0, r1
 80078ea:	b510      	push	{r4, lr}
 80078ec:	eb01 0402 	add.w	r4, r1, r2
 80078f0:	d902      	bls.n	80078f8 <memmove+0x10>
 80078f2:	4284      	cmp	r4, r0
 80078f4:	4623      	mov	r3, r4
 80078f6:	d807      	bhi.n	8007908 <memmove+0x20>
 80078f8:	1e43      	subs	r3, r0, #1
 80078fa:	42a1      	cmp	r1, r4
 80078fc:	d008      	beq.n	8007910 <memmove+0x28>
 80078fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007902:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007906:	e7f8      	b.n	80078fa <memmove+0x12>
 8007908:	4402      	add	r2, r0
 800790a:	4601      	mov	r1, r0
 800790c:	428a      	cmp	r2, r1
 800790e:	d100      	bne.n	8007912 <memmove+0x2a>
 8007910:	bd10      	pop	{r4, pc}
 8007912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800791a:	e7f7      	b.n	800790c <memmove+0x24>

0800791c <_sbrk_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4d06      	ldr	r5, [pc, #24]	@ (8007938 <_sbrk_r+0x1c>)
 8007920:	2300      	movs	r3, #0
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	602b      	str	r3, [r5, #0]
 8007928:	f7fa f994 	bl	8001c54 <_sbrk>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_sbrk_r+0x1a>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	b103      	cbz	r3, 8007936 <_sbrk_r+0x1a>
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	200176b0 	.word	0x200176b0

0800793c <abort>:
 800793c:	b508      	push	{r3, lr}
 800793e:	2006      	movs	r0, #6
 8007940:	f000 fa2e 	bl	8007da0 <raise>
 8007944:	2001      	movs	r0, #1
 8007946:	f7fa f90d 	bl	8001b64 <_exit>

0800794a <_realloc_r>:
 800794a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794e:	4680      	mov	r8, r0
 8007950:	4615      	mov	r5, r2
 8007952:	460c      	mov	r4, r1
 8007954:	b921      	cbnz	r1, 8007960 <_realloc_r+0x16>
 8007956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800795a:	4611      	mov	r1, r2
 800795c:	f7ff bb94 	b.w	8007088 <_malloc_r>
 8007960:	b92a      	cbnz	r2, 800796e <_realloc_r+0x24>
 8007962:	f7ff fb1d 	bl	8006fa0 <_free_r>
 8007966:	2400      	movs	r4, #0
 8007968:	4620      	mov	r0, r4
 800796a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800796e:	f000 fa33 	bl	8007dd8 <_malloc_usable_size_r>
 8007972:	4285      	cmp	r5, r0
 8007974:	4606      	mov	r6, r0
 8007976:	d802      	bhi.n	800797e <_realloc_r+0x34>
 8007978:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800797c:	d8f4      	bhi.n	8007968 <_realloc_r+0x1e>
 800797e:	4629      	mov	r1, r5
 8007980:	4640      	mov	r0, r8
 8007982:	f7ff fb81 	bl	8007088 <_malloc_r>
 8007986:	4607      	mov	r7, r0
 8007988:	2800      	cmp	r0, #0
 800798a:	d0ec      	beq.n	8007966 <_realloc_r+0x1c>
 800798c:	42b5      	cmp	r5, r6
 800798e:	462a      	mov	r2, r5
 8007990:	4621      	mov	r1, r4
 8007992:	bf28      	it	cs
 8007994:	4632      	movcs	r2, r6
 8007996:	f7ff fad6 	bl	8006f46 <memcpy>
 800799a:	4621      	mov	r1, r4
 800799c:	4640      	mov	r0, r8
 800799e:	f7ff faff 	bl	8006fa0 <_free_r>
 80079a2:	463c      	mov	r4, r7
 80079a4:	e7e0      	b.n	8007968 <_realloc_r+0x1e>

080079a6 <__sfputc_r>:
 80079a6:	6893      	ldr	r3, [r2, #8]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	b410      	push	{r4}
 80079ae:	6093      	str	r3, [r2, #8]
 80079b0:	da08      	bge.n	80079c4 <__sfputc_r+0x1e>
 80079b2:	6994      	ldr	r4, [r2, #24]
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	db01      	blt.n	80079bc <__sfputc_r+0x16>
 80079b8:	290a      	cmp	r1, #10
 80079ba:	d103      	bne.n	80079c4 <__sfputc_r+0x1e>
 80079bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079c0:	f000 b932 	b.w	8007c28 <__swbuf_r>
 80079c4:	6813      	ldr	r3, [r2, #0]
 80079c6:	1c58      	adds	r0, r3, #1
 80079c8:	6010      	str	r0, [r2, #0]
 80079ca:	7019      	strb	r1, [r3, #0]
 80079cc:	4608      	mov	r0, r1
 80079ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <__sfputs_r>:
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d6:	4606      	mov	r6, r0
 80079d8:	460f      	mov	r7, r1
 80079da:	4614      	mov	r4, r2
 80079dc:	18d5      	adds	r5, r2, r3
 80079de:	42ac      	cmp	r4, r5
 80079e0:	d101      	bne.n	80079e6 <__sfputs_r+0x12>
 80079e2:	2000      	movs	r0, #0
 80079e4:	e007      	b.n	80079f6 <__sfputs_r+0x22>
 80079e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ea:	463a      	mov	r2, r7
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7ff ffda 	bl	80079a6 <__sfputc_r>
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	d1f3      	bne.n	80079de <__sfputs_r+0xa>
 80079f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080079f8 <_vfiprintf_r>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	460d      	mov	r5, r1
 80079fe:	b09d      	sub	sp, #116	@ 0x74
 8007a00:	4614      	mov	r4, r2
 8007a02:	4698      	mov	r8, r3
 8007a04:	4606      	mov	r6, r0
 8007a06:	b118      	cbz	r0, 8007a10 <_vfiprintf_r+0x18>
 8007a08:	6a03      	ldr	r3, [r0, #32]
 8007a0a:	b90b      	cbnz	r3, 8007a10 <_vfiprintf_r+0x18>
 8007a0c:	f7ff f8a2 	bl	8006b54 <__sinit>
 8007a10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a12:	07d9      	lsls	r1, r3, #31
 8007a14:	d405      	bmi.n	8007a22 <_vfiprintf_r+0x2a>
 8007a16:	89ab      	ldrh	r3, [r5, #12]
 8007a18:	059a      	lsls	r2, r3, #22
 8007a1a:	d402      	bmi.n	8007a22 <_vfiprintf_r+0x2a>
 8007a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a1e:	f7ff fa88 	bl	8006f32 <__retarget_lock_acquire_recursive>
 8007a22:	89ab      	ldrh	r3, [r5, #12]
 8007a24:	071b      	lsls	r3, r3, #28
 8007a26:	d501      	bpl.n	8007a2c <_vfiprintf_r+0x34>
 8007a28:	692b      	ldr	r3, [r5, #16]
 8007a2a:	b99b      	cbnz	r3, 8007a54 <_vfiprintf_r+0x5c>
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f000 f938 	bl	8007ca4 <__swsetup_r>
 8007a34:	b170      	cbz	r0, 8007a54 <_vfiprintf_r+0x5c>
 8007a36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a38:	07dc      	lsls	r4, r3, #31
 8007a3a:	d504      	bpl.n	8007a46 <_vfiprintf_r+0x4e>
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	b01d      	add	sp, #116	@ 0x74
 8007a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a46:	89ab      	ldrh	r3, [r5, #12]
 8007a48:	0598      	lsls	r0, r3, #22
 8007a4a:	d4f7      	bmi.n	8007a3c <_vfiprintf_r+0x44>
 8007a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a4e:	f7ff fa71 	bl	8006f34 <__retarget_lock_release_recursive>
 8007a52:	e7f3      	b.n	8007a3c <_vfiprintf_r+0x44>
 8007a54:	2300      	movs	r3, #0
 8007a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a58:	2320      	movs	r3, #32
 8007a5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a62:	2330      	movs	r3, #48	@ 0x30
 8007a64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c14 <_vfiprintf_r+0x21c>
 8007a68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a6c:	f04f 0901 	mov.w	r9, #1
 8007a70:	4623      	mov	r3, r4
 8007a72:	469a      	mov	sl, r3
 8007a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a78:	b10a      	cbz	r2, 8007a7e <_vfiprintf_r+0x86>
 8007a7a:	2a25      	cmp	r2, #37	@ 0x25
 8007a7c:	d1f9      	bne.n	8007a72 <_vfiprintf_r+0x7a>
 8007a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8007a82:	d00b      	beq.n	8007a9c <_vfiprintf_r+0xa4>
 8007a84:	465b      	mov	r3, fp
 8007a86:	4622      	mov	r2, r4
 8007a88:	4629      	mov	r1, r5
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f7ff ffa2 	bl	80079d4 <__sfputs_r>
 8007a90:	3001      	adds	r0, #1
 8007a92:	f000 80a7 	beq.w	8007be4 <_vfiprintf_r+0x1ec>
 8007a96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a98:	445a      	add	r2, fp
 8007a9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 809f 	beq.w	8007be4 <_vfiprintf_r+0x1ec>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8007aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ab0:	f10a 0a01 	add.w	sl, sl, #1
 8007ab4:	9304      	str	r3, [sp, #16]
 8007ab6:	9307      	str	r3, [sp, #28]
 8007ab8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007abc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007abe:	4654      	mov	r4, sl
 8007ac0:	2205      	movs	r2, #5
 8007ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ac6:	4853      	ldr	r0, [pc, #332]	@ (8007c14 <_vfiprintf_r+0x21c>)
 8007ac8:	f7f8 fb9a 	bl	8000200 <memchr>
 8007acc:	9a04      	ldr	r2, [sp, #16]
 8007ace:	b9d8      	cbnz	r0, 8007b08 <_vfiprintf_r+0x110>
 8007ad0:	06d1      	lsls	r1, r2, #27
 8007ad2:	bf44      	itt	mi
 8007ad4:	2320      	movmi	r3, #32
 8007ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ada:	0713      	lsls	r3, r2, #28
 8007adc:	bf44      	itt	mi
 8007ade:	232b      	movmi	r3, #43	@ 0x2b
 8007ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aea:	d015      	beq.n	8007b18 <_vfiprintf_r+0x120>
 8007aec:	9a07      	ldr	r2, [sp, #28]
 8007aee:	4654      	mov	r4, sl
 8007af0:	2000      	movs	r0, #0
 8007af2:	f04f 0c0a 	mov.w	ip, #10
 8007af6:	4621      	mov	r1, r4
 8007af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007afc:	3b30      	subs	r3, #48	@ 0x30
 8007afe:	2b09      	cmp	r3, #9
 8007b00:	d94b      	bls.n	8007b9a <_vfiprintf_r+0x1a2>
 8007b02:	b1b0      	cbz	r0, 8007b32 <_vfiprintf_r+0x13a>
 8007b04:	9207      	str	r2, [sp, #28]
 8007b06:	e014      	b.n	8007b32 <_vfiprintf_r+0x13a>
 8007b08:	eba0 0308 	sub.w	r3, r0, r8
 8007b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b10:	4313      	orrs	r3, r2
 8007b12:	9304      	str	r3, [sp, #16]
 8007b14:	46a2      	mov	sl, r4
 8007b16:	e7d2      	b.n	8007abe <_vfiprintf_r+0xc6>
 8007b18:	9b03      	ldr	r3, [sp, #12]
 8007b1a:	1d19      	adds	r1, r3, #4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	9103      	str	r1, [sp, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bfbb      	ittet	lt
 8007b24:	425b      	neglt	r3, r3
 8007b26:	f042 0202 	orrlt.w	r2, r2, #2
 8007b2a:	9307      	strge	r3, [sp, #28]
 8007b2c:	9307      	strlt	r3, [sp, #28]
 8007b2e:	bfb8      	it	lt
 8007b30:	9204      	strlt	r2, [sp, #16]
 8007b32:	7823      	ldrb	r3, [r4, #0]
 8007b34:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b36:	d10a      	bne.n	8007b4e <_vfiprintf_r+0x156>
 8007b38:	7863      	ldrb	r3, [r4, #1]
 8007b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b3c:	d132      	bne.n	8007ba4 <_vfiprintf_r+0x1ac>
 8007b3e:	9b03      	ldr	r3, [sp, #12]
 8007b40:	1d1a      	adds	r2, r3, #4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	9203      	str	r2, [sp, #12]
 8007b46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b4a:	3402      	adds	r4, #2
 8007b4c:	9305      	str	r3, [sp, #20]
 8007b4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c24 <_vfiprintf_r+0x22c>
 8007b52:	7821      	ldrb	r1, [r4, #0]
 8007b54:	2203      	movs	r2, #3
 8007b56:	4650      	mov	r0, sl
 8007b58:	f7f8 fb52 	bl	8000200 <memchr>
 8007b5c:	b138      	cbz	r0, 8007b6e <_vfiprintf_r+0x176>
 8007b5e:	9b04      	ldr	r3, [sp, #16]
 8007b60:	eba0 000a 	sub.w	r0, r0, sl
 8007b64:	2240      	movs	r2, #64	@ 0x40
 8007b66:	4082      	lsls	r2, r0
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	3401      	adds	r4, #1
 8007b6c:	9304      	str	r3, [sp, #16]
 8007b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b72:	4829      	ldr	r0, [pc, #164]	@ (8007c18 <_vfiprintf_r+0x220>)
 8007b74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b78:	2206      	movs	r2, #6
 8007b7a:	f7f8 fb41 	bl	8000200 <memchr>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d03f      	beq.n	8007c02 <_vfiprintf_r+0x20a>
 8007b82:	4b26      	ldr	r3, [pc, #152]	@ (8007c1c <_vfiprintf_r+0x224>)
 8007b84:	bb1b      	cbnz	r3, 8007bce <_vfiprintf_r+0x1d6>
 8007b86:	9b03      	ldr	r3, [sp, #12]
 8007b88:	3307      	adds	r3, #7
 8007b8a:	f023 0307 	bic.w	r3, r3, #7
 8007b8e:	3308      	adds	r3, #8
 8007b90:	9303      	str	r3, [sp, #12]
 8007b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b94:	443b      	add	r3, r7
 8007b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b98:	e76a      	b.n	8007a70 <_vfiprintf_r+0x78>
 8007b9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	2001      	movs	r0, #1
 8007ba2:	e7a8      	b.n	8007af6 <_vfiprintf_r+0xfe>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	3401      	adds	r4, #1
 8007ba8:	9305      	str	r3, [sp, #20]
 8007baa:	4619      	mov	r1, r3
 8007bac:	f04f 0c0a 	mov.w	ip, #10
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bb6:	3a30      	subs	r2, #48	@ 0x30
 8007bb8:	2a09      	cmp	r2, #9
 8007bba:	d903      	bls.n	8007bc4 <_vfiprintf_r+0x1cc>
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0c6      	beq.n	8007b4e <_vfiprintf_r+0x156>
 8007bc0:	9105      	str	r1, [sp, #20]
 8007bc2:	e7c4      	b.n	8007b4e <_vfiprintf_r+0x156>
 8007bc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bc8:	4604      	mov	r4, r0
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e7f0      	b.n	8007bb0 <_vfiprintf_r+0x1b8>
 8007bce:	ab03      	add	r3, sp, #12
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	462a      	mov	r2, r5
 8007bd4:	4b12      	ldr	r3, [pc, #72]	@ (8007c20 <_vfiprintf_r+0x228>)
 8007bd6:	a904      	add	r1, sp, #16
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f3af 8000 	nop.w
 8007bde:	4607      	mov	r7, r0
 8007be0:	1c78      	adds	r0, r7, #1
 8007be2:	d1d6      	bne.n	8007b92 <_vfiprintf_r+0x19a>
 8007be4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007be6:	07d9      	lsls	r1, r3, #31
 8007be8:	d405      	bmi.n	8007bf6 <_vfiprintf_r+0x1fe>
 8007bea:	89ab      	ldrh	r3, [r5, #12]
 8007bec:	059a      	lsls	r2, r3, #22
 8007bee:	d402      	bmi.n	8007bf6 <_vfiprintf_r+0x1fe>
 8007bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bf2:	f7ff f99f 	bl	8006f34 <__retarget_lock_release_recursive>
 8007bf6:	89ab      	ldrh	r3, [r5, #12]
 8007bf8:	065b      	lsls	r3, r3, #25
 8007bfa:	f53f af1f 	bmi.w	8007a3c <_vfiprintf_r+0x44>
 8007bfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c00:	e71e      	b.n	8007a40 <_vfiprintf_r+0x48>
 8007c02:	ab03      	add	r3, sp, #12
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	462a      	mov	r2, r5
 8007c08:	4b05      	ldr	r3, [pc, #20]	@ (8007c20 <_vfiprintf_r+0x228>)
 8007c0a:	a904      	add	r1, sp, #16
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f7ff fc8d 	bl	800752c <_printf_i>
 8007c12:	e7e4      	b.n	8007bde <_vfiprintf_r+0x1e6>
 8007c14:	08008ad1 	.word	0x08008ad1
 8007c18:	08008adb 	.word	0x08008adb
 8007c1c:	00000000 	.word	0x00000000
 8007c20:	080079d5 	.word	0x080079d5
 8007c24:	08008ad7 	.word	0x08008ad7

08007c28 <__swbuf_r>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	460e      	mov	r6, r1
 8007c2c:	4614      	mov	r4, r2
 8007c2e:	4605      	mov	r5, r0
 8007c30:	b118      	cbz	r0, 8007c3a <__swbuf_r+0x12>
 8007c32:	6a03      	ldr	r3, [r0, #32]
 8007c34:	b90b      	cbnz	r3, 8007c3a <__swbuf_r+0x12>
 8007c36:	f7fe ff8d 	bl	8006b54 <__sinit>
 8007c3a:	69a3      	ldr	r3, [r4, #24]
 8007c3c:	60a3      	str	r3, [r4, #8]
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	071a      	lsls	r2, r3, #28
 8007c42:	d501      	bpl.n	8007c48 <__swbuf_r+0x20>
 8007c44:	6923      	ldr	r3, [r4, #16]
 8007c46:	b943      	cbnz	r3, 8007c5a <__swbuf_r+0x32>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f000 f82a 	bl	8007ca4 <__swsetup_r>
 8007c50:	b118      	cbz	r0, 8007c5a <__swbuf_r+0x32>
 8007c52:	f04f 37ff 	mov.w	r7, #4294967295
 8007c56:	4638      	mov	r0, r7
 8007c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	6922      	ldr	r2, [r4, #16]
 8007c5e:	1a98      	subs	r0, r3, r2
 8007c60:	6963      	ldr	r3, [r4, #20]
 8007c62:	b2f6      	uxtb	r6, r6
 8007c64:	4283      	cmp	r3, r0
 8007c66:	4637      	mov	r7, r6
 8007c68:	dc05      	bgt.n	8007c76 <__swbuf_r+0x4e>
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f7ff fe01 	bl	8007874 <_fflush_r>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d1ed      	bne.n	8007c52 <__swbuf_r+0x2a>
 8007c76:	68a3      	ldr	r3, [r4, #8]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	60a3      	str	r3, [r4, #8]
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	6022      	str	r2, [r4, #0]
 8007c82:	701e      	strb	r6, [r3, #0]
 8007c84:	6962      	ldr	r2, [r4, #20]
 8007c86:	1c43      	adds	r3, r0, #1
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d004      	beq.n	8007c96 <__swbuf_r+0x6e>
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	07db      	lsls	r3, r3, #31
 8007c90:	d5e1      	bpl.n	8007c56 <__swbuf_r+0x2e>
 8007c92:	2e0a      	cmp	r6, #10
 8007c94:	d1df      	bne.n	8007c56 <__swbuf_r+0x2e>
 8007c96:	4621      	mov	r1, r4
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f7ff fdeb 	bl	8007874 <_fflush_r>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d0d9      	beq.n	8007c56 <__swbuf_r+0x2e>
 8007ca2:	e7d6      	b.n	8007c52 <__swbuf_r+0x2a>

08007ca4 <__swsetup_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4b29      	ldr	r3, [pc, #164]	@ (8007d4c <__swsetup_r+0xa8>)
 8007ca8:	4605      	mov	r5, r0
 8007caa:	6818      	ldr	r0, [r3, #0]
 8007cac:	460c      	mov	r4, r1
 8007cae:	b118      	cbz	r0, 8007cb8 <__swsetup_r+0x14>
 8007cb0:	6a03      	ldr	r3, [r0, #32]
 8007cb2:	b90b      	cbnz	r3, 8007cb8 <__swsetup_r+0x14>
 8007cb4:	f7fe ff4e 	bl	8006b54 <__sinit>
 8007cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cbc:	0719      	lsls	r1, r3, #28
 8007cbe:	d422      	bmi.n	8007d06 <__swsetup_r+0x62>
 8007cc0:	06da      	lsls	r2, r3, #27
 8007cc2:	d407      	bmi.n	8007cd4 <__swsetup_r+0x30>
 8007cc4:	2209      	movs	r2, #9
 8007cc6:	602a      	str	r2, [r5, #0]
 8007cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ccc:	81a3      	strh	r3, [r4, #12]
 8007cce:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd2:	e033      	b.n	8007d3c <__swsetup_r+0x98>
 8007cd4:	0758      	lsls	r0, r3, #29
 8007cd6:	d512      	bpl.n	8007cfe <__swsetup_r+0x5a>
 8007cd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cda:	b141      	cbz	r1, 8007cee <__swsetup_r+0x4a>
 8007cdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ce0:	4299      	cmp	r1, r3
 8007ce2:	d002      	beq.n	8007cea <__swsetup_r+0x46>
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f7ff f95b 	bl	8006fa0 <_free_r>
 8007cea:	2300      	movs	r3, #0
 8007cec:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	6063      	str	r3, [r4, #4]
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f043 0308 	orr.w	r3, r3, #8
 8007d04:	81a3      	strh	r3, [r4, #12]
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	b94b      	cbnz	r3, 8007d1e <__swsetup_r+0x7a>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d14:	d003      	beq.n	8007d1e <__swsetup_r+0x7a>
 8007d16:	4621      	mov	r1, r4
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f000 f88b 	bl	8007e34 <__smakebuf_r>
 8007d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d22:	f013 0201 	ands.w	r2, r3, #1
 8007d26:	d00a      	beq.n	8007d3e <__swsetup_r+0x9a>
 8007d28:	2200      	movs	r2, #0
 8007d2a:	60a2      	str	r2, [r4, #8]
 8007d2c:	6962      	ldr	r2, [r4, #20]
 8007d2e:	4252      	negs	r2, r2
 8007d30:	61a2      	str	r2, [r4, #24]
 8007d32:	6922      	ldr	r2, [r4, #16]
 8007d34:	b942      	cbnz	r2, 8007d48 <__swsetup_r+0xa4>
 8007d36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d3a:	d1c5      	bne.n	8007cc8 <__swsetup_r+0x24>
 8007d3c:	bd38      	pop	{r3, r4, r5, pc}
 8007d3e:	0799      	lsls	r1, r3, #30
 8007d40:	bf58      	it	pl
 8007d42:	6962      	ldrpl	r2, [r4, #20]
 8007d44:	60a2      	str	r2, [r4, #8]
 8007d46:	e7f4      	b.n	8007d32 <__swsetup_r+0x8e>
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e7f7      	b.n	8007d3c <__swsetup_r+0x98>
 8007d4c:	20000024 	.word	0x20000024

08007d50 <_raise_r>:
 8007d50:	291f      	cmp	r1, #31
 8007d52:	b538      	push	{r3, r4, r5, lr}
 8007d54:	4605      	mov	r5, r0
 8007d56:	460c      	mov	r4, r1
 8007d58:	d904      	bls.n	8007d64 <_raise_r+0x14>
 8007d5a:	2316      	movs	r3, #22
 8007d5c:	6003      	str	r3, [r0, #0]
 8007d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
 8007d64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007d66:	b112      	cbz	r2, 8007d6e <_raise_r+0x1e>
 8007d68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d6c:	b94b      	cbnz	r3, 8007d82 <_raise_r+0x32>
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f000 f830 	bl	8007dd4 <_getpid_r>
 8007d74:	4622      	mov	r2, r4
 8007d76:	4601      	mov	r1, r0
 8007d78:	4628      	mov	r0, r5
 8007d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d7e:	f000 b817 	b.w	8007db0 <_kill_r>
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d00a      	beq.n	8007d9c <_raise_r+0x4c>
 8007d86:	1c59      	adds	r1, r3, #1
 8007d88:	d103      	bne.n	8007d92 <_raise_r+0x42>
 8007d8a:	2316      	movs	r3, #22
 8007d8c:	6003      	str	r3, [r0, #0]
 8007d8e:	2001      	movs	r0, #1
 8007d90:	e7e7      	b.n	8007d62 <_raise_r+0x12>
 8007d92:	2100      	movs	r1, #0
 8007d94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007d98:	4620      	mov	r0, r4
 8007d9a:	4798      	blx	r3
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	e7e0      	b.n	8007d62 <_raise_r+0x12>

08007da0 <raise>:
 8007da0:	4b02      	ldr	r3, [pc, #8]	@ (8007dac <raise+0xc>)
 8007da2:	4601      	mov	r1, r0
 8007da4:	6818      	ldr	r0, [r3, #0]
 8007da6:	f7ff bfd3 	b.w	8007d50 <_raise_r>
 8007daa:	bf00      	nop
 8007dac:	20000024 	.word	0x20000024

08007db0 <_kill_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4d07      	ldr	r5, [pc, #28]	@ (8007dd0 <_kill_r+0x20>)
 8007db4:	2300      	movs	r3, #0
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	4611      	mov	r1, r2
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	f7f9 fec1 	bl	8001b44 <_kill>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	d102      	bne.n	8007dcc <_kill_r+0x1c>
 8007dc6:	682b      	ldr	r3, [r5, #0]
 8007dc8:	b103      	cbz	r3, 8007dcc <_kill_r+0x1c>
 8007dca:	6023      	str	r3, [r4, #0]
 8007dcc:	bd38      	pop	{r3, r4, r5, pc}
 8007dce:	bf00      	nop
 8007dd0:	200176b0 	.word	0x200176b0

08007dd4 <_getpid_r>:
 8007dd4:	f7f9 beae 	b.w	8001b34 <_getpid>

08007dd8 <_malloc_usable_size_r>:
 8007dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ddc:	1f18      	subs	r0, r3, #4
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	bfbc      	itt	lt
 8007de2:	580b      	ldrlt	r3, [r1, r0]
 8007de4:	18c0      	addlt	r0, r0, r3
 8007de6:	4770      	bx	lr

08007de8 <__swhatbuf_r>:
 8007de8:	b570      	push	{r4, r5, r6, lr}
 8007dea:	460c      	mov	r4, r1
 8007dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df0:	2900      	cmp	r1, #0
 8007df2:	b096      	sub	sp, #88	@ 0x58
 8007df4:	4615      	mov	r5, r2
 8007df6:	461e      	mov	r6, r3
 8007df8:	da0d      	bge.n	8007e16 <__swhatbuf_r+0x2e>
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e00:	f04f 0100 	mov.w	r1, #0
 8007e04:	bf14      	ite	ne
 8007e06:	2340      	movne	r3, #64	@ 0x40
 8007e08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	6031      	str	r1, [r6, #0]
 8007e10:	602b      	str	r3, [r5, #0]
 8007e12:	b016      	add	sp, #88	@ 0x58
 8007e14:	bd70      	pop	{r4, r5, r6, pc}
 8007e16:	466a      	mov	r2, sp
 8007e18:	f000 f848 	bl	8007eac <_fstat_r>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	dbec      	blt.n	8007dfa <__swhatbuf_r+0x12>
 8007e20:	9901      	ldr	r1, [sp, #4]
 8007e22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e2a:	4259      	negs	r1, r3
 8007e2c:	4159      	adcs	r1, r3
 8007e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e32:	e7eb      	b.n	8007e0c <__swhatbuf_r+0x24>

08007e34 <__smakebuf_r>:
 8007e34:	898b      	ldrh	r3, [r1, #12]
 8007e36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e38:	079d      	lsls	r5, r3, #30
 8007e3a:	4606      	mov	r6, r0
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	d507      	bpl.n	8007e50 <__smakebuf_r+0x1c>
 8007e40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	6123      	str	r3, [r4, #16]
 8007e48:	2301      	movs	r3, #1
 8007e4a:	6163      	str	r3, [r4, #20]
 8007e4c:	b003      	add	sp, #12
 8007e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e50:	ab01      	add	r3, sp, #4
 8007e52:	466a      	mov	r2, sp
 8007e54:	f7ff ffc8 	bl	8007de8 <__swhatbuf_r>
 8007e58:	9f00      	ldr	r7, [sp, #0]
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f7ff f912 	bl	8007088 <_malloc_r>
 8007e64:	b948      	cbnz	r0, 8007e7a <__smakebuf_r+0x46>
 8007e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e6a:	059a      	lsls	r2, r3, #22
 8007e6c:	d4ee      	bmi.n	8007e4c <__smakebuf_r+0x18>
 8007e6e:	f023 0303 	bic.w	r3, r3, #3
 8007e72:	f043 0302 	orr.w	r3, r3, #2
 8007e76:	81a3      	strh	r3, [r4, #12]
 8007e78:	e7e2      	b.n	8007e40 <__smakebuf_r+0xc>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	6020      	str	r0, [r4, #0]
 8007e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e82:	81a3      	strh	r3, [r4, #12]
 8007e84:	9b01      	ldr	r3, [sp, #4]
 8007e86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e8a:	b15b      	cbz	r3, 8007ea4 <__smakebuf_r+0x70>
 8007e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e90:	4630      	mov	r0, r6
 8007e92:	f000 f81d 	bl	8007ed0 <_isatty_r>
 8007e96:	b128      	cbz	r0, 8007ea4 <__smakebuf_r+0x70>
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	f023 0303 	bic.w	r3, r3, #3
 8007e9e:	f043 0301 	orr.w	r3, r3, #1
 8007ea2:	81a3      	strh	r3, [r4, #12]
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	431d      	orrs	r5, r3
 8007ea8:	81a5      	strh	r5, [r4, #12]
 8007eaa:	e7cf      	b.n	8007e4c <__smakebuf_r+0x18>

08007eac <_fstat_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4d07      	ldr	r5, [pc, #28]	@ (8007ecc <_fstat_r+0x20>)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	4608      	mov	r0, r1
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	f7f9 fea3 	bl	8001c04 <_fstat>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	d102      	bne.n	8007ec8 <_fstat_r+0x1c>
 8007ec2:	682b      	ldr	r3, [r5, #0]
 8007ec4:	b103      	cbz	r3, 8007ec8 <_fstat_r+0x1c>
 8007ec6:	6023      	str	r3, [r4, #0]
 8007ec8:	bd38      	pop	{r3, r4, r5, pc}
 8007eca:	bf00      	nop
 8007ecc:	200176b0 	.word	0x200176b0

08007ed0 <_isatty_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4d06      	ldr	r5, [pc, #24]	@ (8007eec <_isatty_r+0x1c>)
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	4608      	mov	r0, r1
 8007eda:	602b      	str	r3, [r5, #0]
 8007edc:	f7f9 fea2 	bl	8001c24 <_isatty>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	d102      	bne.n	8007eea <_isatty_r+0x1a>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	b103      	cbz	r3, 8007eea <_isatty_r+0x1a>
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	200176b0 	.word	0x200176b0

08007ef0 <_init>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	bf00      	nop
 8007ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef6:	bc08      	pop	{r3}
 8007ef8:	469e      	mov	lr, r3
 8007efa:	4770      	bx	lr

08007efc <_fini>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	bf00      	nop
 8007f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f02:	bc08      	pop	{r3}
 8007f04:	469e      	mov	lr, r3
 8007f06:	4770      	bx	lr
