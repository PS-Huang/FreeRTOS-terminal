
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007334  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  080074c4  080074c4  000084c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cf0  08007cf0  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007cf0  08007cf0  00008cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cf8  08007cf8  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cf8  08007cf8  00008cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cfc  08007cfc  00008cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007d00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009074  2**0
                  CONTENTS
 10 .bss          00013134  20000074  20000074  00009074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200131a8  200131a8  00009074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012dcf  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fe8  00000000  00000000  0001be73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  0001ee60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df0  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022db4  00000000  00000000  00020e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ced  00000000  00000000  00043bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4e92  00000000  00000000  000588e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d77b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056c4  00000000  00000000  0012d7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00132e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080074ac 	.word	0x080074ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080074ac 	.word	0x080074ac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <AppTimerStatsInit>:
//	const char* msg = "UART Initialized\r\n";
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//}
// UART TEST END

void AppTimerStatsInit(void) {
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	g_osRuntimeCounter = 0;
 8000594:	4b03      	ldr	r3, [pc, #12]	@ (80005a4 <AppTimerStatsInit+0x14>)
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	200000d8 	.word	0x200000d8

080005a8 <AppTimerStatsValue>:

uint32_t AppTimerStatsValue(void) {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	 return g_osRuntimeCounter;
 80005ac:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <AppTimerStatsValue+0x14>)
 80005ae:	681b      	ldr	r3, [r3, #0]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000d8 	.word	0x200000d8

080005c0 <LED_Task>:
}

BaseType_t xReturned;
TaskHandle_t xHandle=NULL;

void LED_Task( void ){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80005ca:	480c      	ldr	r0, [pc, #48]	@ (80005fc <LED_Task+0x3c>)
 80005cc:	f001 fa8e 	bl	8001aec <HAL_GPIO_WritePin>
	for(;;){

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET );
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d6:	4809      	ldr	r0, [pc, #36]	@ (80005fc <LED_Task+0x3c>)
 80005d8:	f001 fa88 	bl	8001aec <HAL_GPIO_WritePin>
		vTaskDelay(500);
 80005dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005e0:	f003 fd54 	bl	800408c <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET );
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ea:	4804      	ldr	r0, [pc, #16]	@ (80005fc <LED_Task+0x3c>)
 80005ec:	f001 fa7e 	bl	8001aec <HAL_GPIO_WritePin>
		vTaskDelay(500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f4:	f003 fd4a 	bl	800408c <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET );
 80005f8:	bf00      	nop
 80005fa:	e7e9      	b.n	80005d0 <LED_Task+0x10>
 80005fc:	40020c00 	.word	0x40020c00

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 ffb1 	bl	800156c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f835 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8c7 	bl	80007a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f89b 	bl	800074c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //xTaskCreate(LED_Task, "LED", 128, NULL, 3, NULL);
  TaskHandle_t hLed;
  if (xTaskCreate(LED_Task, "LED", 128, NULL, 3, &hLed) == pdPASS) {
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2303      	movs	r3, #3
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2300      	movs	r3, #0
 8000620:	2280      	movs	r2, #128	@ 0x80
 8000622:	4911      	ldr	r1, [pc, #68]	@ (8000668 <main+0x68>)
 8000624:	4811      	ldr	r0, [pc, #68]	@ (800066c <main+0x6c>)
 8000626:	f003 fbef 	bl	8003e08 <xTaskCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	2b01      	cmp	r3, #1
 800062e:	d105      	bne.n	800063c <main+0x3c>
      RegisterUserTask(hLed, "LED", 128);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2280      	movs	r2, #128	@ 0x80
 8000634:	490c      	ldr	r1, [pc, #48]	@ (8000668 <main+0x68>)
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fa4a 	bl	8000ad0 <RegisterUserTask>
  }
  //xTaskCreate(ShellTask, "Shell", 1024, NULL, 2, NULL);
  TaskHandle_t hShell;
  xTaskCreate(ShellTask, "ShellTask", 1024, NULL, 2, &hShell);
 800063c:	463b      	mov	r3, r7
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2302      	movs	r3, #2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800064a:	4909      	ldr	r1, [pc, #36]	@ (8000670 <main+0x70>)
 800064c:	4809      	ldr	r0, [pc, #36]	@ (8000674 <main+0x74>)
 800064e:	f003 fbdb 	bl	8003e08 <xTaskCreate>
  RegisterUserTask(hShell, "ShellTask", 1024);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000658:	4905      	ldr	r1, [pc, #20]	@ (8000670 <main+0x70>)
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fa38 	bl	8000ad0 <RegisterUserTask>

  vTaskStartScheduler();
 8000660:	f003 fdb2 	bl	80041c8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <main+0x64>
 8000668:	080074f8 	.word	0x080074f8
 800066c:	080005c1 	.word	0x080005c1
 8000670:	080074fc 	.word	0x080074fc
 8000674:	0800108d 	.word	0x0800108d

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	@ 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	@ 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 fe49 	bl	800631e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	@ (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	@ (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	@ (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	@ (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a21      	ldr	r2, [pc, #132]	@ (8000748 <SystemClock_Config+0xd0>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e8:	2308      	movs	r3, #8
 80006ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006ec:	2332      	movs	r3, #50	@ 0x32
 80006ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f4:	2307      	movs	r3, #7
 80006f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fa0f 	bl	8001b20 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000708:	f000 f9c6 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000718:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fc70 	bl	8002010 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000736:	f000 f9af 	bl	8000a98 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	@ 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000752:	4a12      	ldr	r2, [pc, #72]	@ (800079c <MX_USART2_UART_Init+0x50>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000784:	f002 f932 	bl	80029ec <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800078e:	f000 f983 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000090 	.word	0x20000090
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	@ 0x30
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	4ba2      	ldr	r3, [pc, #648]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4aa1      	ldr	r2, [pc, #644]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 80007c0:	f043 0310 	orr.w	r3, r3, #16
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b9f      	ldr	r3, [pc, #636]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	4b9b      	ldr	r3, [pc, #620]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a9a      	ldr	r2, [pc, #616]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b98      	ldr	r3, [pc, #608]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b94      	ldr	r3, [pc, #592]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a93      	ldr	r2, [pc, #588]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b91      	ldr	r3, [pc, #580]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b8d      	ldr	r3, [pc, #564]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a8c      	ldr	r2, [pc, #560]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b8a      	ldr	r3, [pc, #552]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b86      	ldr	r3, [pc, #536]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a85      	ldr	r2, [pc, #532]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b83      	ldr	r3, [pc, #524]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b7f      	ldr	r3, [pc, #508]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a7e      	ldr	r2, [pc, #504]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b7c      	ldr	r3, [pc, #496]	@ (8000a44 <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2108      	movs	r1, #8
 8000862:	4879      	ldr	r0, [pc, #484]	@ (8000a48 <MX_GPIO_Init+0x2a8>)
 8000864:	f001 f942 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2101      	movs	r1, #1
 800086c:	4877      	ldr	r0, [pc, #476]	@ (8000a4c <MX_GPIO_Init+0x2ac>)
 800086e:	f001 f93d 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000872:	2200      	movs	r2, #0
 8000874:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000878:	4875      	ldr	r0, [pc, #468]	@ (8000a50 <MX_GPIO_Init+0x2b0>)
 800087a:	f001 f937 	bl	8001aec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800087e:	2308      	movs	r3, #8
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	486c      	ldr	r0, [pc, #432]	@ (8000a48 <MX_GPIO_Init+0x2a8>)
 8000896:	f000 ff8d 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800089a:	2301      	movs	r3, #1
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4866      	ldr	r0, [pc, #408]	@ (8000a4c <MX_GPIO_Init+0x2ac>)
 80008b2:	f000 ff7f 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b6:	2308      	movs	r3, #8
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c6:	2305      	movs	r3, #5
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	485e      	ldr	r0, [pc, #376]	@ (8000a4c <MX_GPIO_Init+0x2ac>)
 80008d2:	f000 ff6f 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	485a      	ldr	r0, [pc, #360]	@ (8000a54 <MX_GPIO_Init+0x2b4>)
 80008ec:	f000 ff62 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008f0:	2310      	movs	r3, #16
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000900:	2306      	movs	r3, #6
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4852      	ldr	r0, [pc, #328]	@ (8000a54 <MX_GPIO_Init+0x2b4>)
 800090c:	f000 ff52 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000910:	23e0      	movs	r3, #224	@ 0xe0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000920:	2305      	movs	r3, #5
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	484a      	ldr	r0, [pc, #296]	@ (8000a54 <MX_GPIO_Init+0x2b4>)
 800092c:	f000 ff42 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000930:	2304      	movs	r3, #4
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4845      	ldr	r0, [pc, #276]	@ (8000a58 <MX_GPIO_Init+0x2b8>)
 8000944:	f000 ff36 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000948:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095a:	2305      	movs	r3, #5
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	483c      	ldr	r0, [pc, #240]	@ (8000a58 <MX_GPIO_Init+0x2b8>)
 8000966:	f000 ff25 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800096a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800096e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4833      	ldr	r0, [pc, #204]	@ (8000a50 <MX_GPIO_Init+0x2b0>)
 8000984:	f000 ff16 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000988:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800099a:	2306      	movs	r3, #6
 800099c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4829      	ldr	r0, [pc, #164]	@ (8000a4c <MX_GPIO_Init+0x2ac>)
 80009a6:	f000 ff05 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4825      	ldr	r0, [pc, #148]	@ (8000a54 <MX_GPIO_Init+0x2b4>)
 80009c0:	f000 fef8 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009c4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009d6:	230a      	movs	r3, #10
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	481c      	ldr	r0, [pc, #112]	@ (8000a54 <MX_GPIO_Init+0x2b4>)
 80009e2:	f000 fee7 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e6:	2320      	movs	r3, #32
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4815      	ldr	r0, [pc, #84]	@ (8000a50 <MX_GPIO_Init+0x2b0>)
 80009fa:	f000 fedb 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009fe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a04:	2312      	movs	r3, #18
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a10:	2304      	movs	r3, #4
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480f      	ldr	r0, [pc, #60]	@ (8000a58 <MX_GPIO_Init+0x2b8>)
 8000a1c:	f000 feca 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a24:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <MX_GPIO_Init+0x2a8>)
 8000a36:	f000 febd 	bl	80017b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3730      	adds	r7, #48	@ 0x30
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	40020c00 	.word	0x40020c00
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40020400 	.word	0x40020400

08000a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6e:	f000 fd9f 	bl	80015b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a06      	ldr	r2, [pc, #24]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d104      	bne.n	8000a86 <HAL_TIM_PeriodElapsedCallback+0x2a>
	g_osRuntimeCounter++;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a84:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40001400 	.word	0x40001400
 8000a94:	200000d8 	.word	0x200000d8

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <shell_write>:
};

#define CMD_COUNT (sizeof(cli_commands)/sizeof(cli_commands[0]))

// 將吃到的字元返還
static void shell_write(const char* s) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), HAL_MAX_DELAY);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff fb99 	bl	80001e4 <strlen>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	4803      	ldr	r0, [pc, #12]	@ (8000acc <shell_write+0x28>)
 8000abe:	f001 ffe5 	bl	8002a8c <HAL_UART_Transmit>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000090 	.word	0x20000090

08000ad0 <RegisterUserTask>:
        HAL_UART_Transmit(&huart2, (uint8_t*)s, strlen(s), HAL_MAX_DELAY);
    }
}

void RegisterUserTask(TaskHandle_t h, const char *name, uint16_t stackSize)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	4613      	mov	r3, r2
 8000adc:	80fb      	strh	r3, [r7, #6]
    if (g_taskCount < MAX_USER_TASKS) {
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <RegisterUserTask+0x70>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	d827      	bhi.n	8000b36 <RegisterUserTask+0x66>
        g_taskTable[g_taskCount].handle    = h;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <RegisterUserTask+0x70>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4916      	ldr	r1, [pc, #88]	@ (8000b44 <RegisterUserTask+0x74>)
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	440b      	add	r3, r1
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	601a      	str	r2, [r3, #0]
        strncpy(g_taskTable[g_taskCount].name, name, sizeof(g_taskTable[g_taskCount].name)-1);
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <RegisterUserTask+0x70>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4613      	mov	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	4a0f      	ldr	r2, [pc, #60]	@ (8000b44 <RegisterUserTask+0x74>)
 8000b08:	4413      	add	r3, r2
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	220f      	movs	r2, #15
 8000b0e:	68b9      	ldr	r1, [r7, #8]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f005 fc0c 	bl	800632e <strncpy>
        g_taskTable[g_taskCount].stackSize = stackSize;
 8000b16:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <RegisterUserTask+0x70>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	490a      	ldr	r1, [pc, #40]	@ (8000b44 <RegisterUserTask+0x74>)
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	440b      	add	r3, r1
 8000b26:	3314      	adds	r3, #20
 8000b28:	88fa      	ldrh	r2, [r7, #6]
 8000b2a:	801a      	strh	r2, [r3, #0]
        g_taskCount++;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <RegisterUserTask+0x70>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	4a03      	ldr	r2, [pc, #12]	@ (8000b40 <RegisterUserTask+0x70>)
 8000b34:	6013      	str	r3, [r2, #0]
    }
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000025c 	.word	0x2000025c
 8000b44:	200000dc 	.word	0x200000dc

08000b48 <findStackSize>:

static uint16_t findStackSize(TaskHandle_t h)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    for (UBaseType_t i = 0; i < g_taskCount; i++) {
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	e017      	b.n	8000b86 <findStackSize+0x3e>
        if (g_taskTable[i].handle == h) {
 8000b56:	4912      	ldr	r1, [pc, #72]	@ (8000ba0 <findStackSize+0x58>)
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	440b      	add	r3, r1
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d109      	bne.n	8000b80 <findStackSize+0x38>
            return g_taskTable[i].stackSize;    // user-defined task
 8000b6c:	490c      	ldr	r1, [pc, #48]	@ (8000ba0 <findStackSize+0x58>)
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	4613      	mov	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4413      	add	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	440b      	add	r3, r1
 8000b7a:	3314      	adds	r3, #20
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	e008      	b.n	8000b92 <findStackSize+0x4a>
    for (UBaseType_t i = 0; i < g_taskCount; i++) {
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3301      	adds	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <findStackSize+0x5c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d3e2      	bcc.n	8000b56 <findStackSize+0xe>
        }
    }
    return 0;     // fallback
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200000dc 	.word	0x200000dc
 8000ba4:	2000025c 	.word	0x2000025c

08000ba8 <cmd_help>:

static void cmd_help(int argc, char** argv) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
    shell_write("\r\nAvailable commands:\r\n");
 8000bb2:	4810      	ldr	r0, [pc, #64]	@ (8000bf4 <cmd_help+0x4c>)
 8000bb4:	f7ff ff76 	bl	8000aa4 <shell_write>
    for (int i = 0; i < CMD_COUNT; i++) {
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	e011      	b.n	8000be2 <cmd_help+0x3a>
        shell_write("  ");
 8000bbe:	480e      	ldr	r0, [pc, #56]	@ (8000bf8 <cmd_help+0x50>)
 8000bc0:	f7ff ff70 	bl	8000aa4 <shell_write>
        shell_write(cli_commands[i].help);
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <cmd_help+0x54>)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	4413      	add	r3, r2
 8000bcc:	330c      	adds	r3, #12
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff67 	bl	8000aa4 <shell_write>
        shell_write("\r\n");
 8000bd6:	480a      	ldr	r0, [pc, #40]	@ (8000c00 <cmd_help+0x58>)
 8000bd8:	f7ff ff64 	bl	8000aa4 <shell_write>
    for (int i = 0; i < CMD_COUNT; i++) {
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2b05      	cmp	r3, #5
 8000be6:	d9ea      	bls.n	8000bbe <cmd_help+0x16>
    }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	080078c4 	.word	0x080078c4
 8000bf8:	080078dc 	.word	0x080078dc
 8000bfc:	08007b98 	.word	0x08007b98
 8000c00:	080078e0 	.word	0x080078e0

08000c04 <cmd_echo>:

static void cmd_echo(int argc, char** argv) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
    // 從 argv[1] 開始輸出所有參數
    for (int i = 1; i < argc; i++) {
 8000c0e:	2301      	movs	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	e012      	b.n	8000c3a <cmd_echo+0x36>
        shell_write(argv[i]);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff40 	bl	8000aa4 <shell_write>
        if (i < argc - 1) shell_write(" ");
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	da02      	bge.n	8000c34 <cmd_echo+0x30>
 8000c2e:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <cmd_echo+0x4c>)
 8000c30:	f7ff ff38 	bl	8000aa4 <shell_write>
    for (int i = 1; i < argc; i++) {
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	dbe8      	blt.n	8000c14 <cmd_echo+0x10>
    }
    shell_write("\r\n");
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <cmd_echo+0x50>)
 8000c44:	f7ff ff2e 	bl	8000aa4 <shell_write>
}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	080078e4 	.word	0x080078e4
 8000c54:	080078e0 	.word	0x080078e0

08000c58 <cmd_status>:

static void cmd_status(int argc, char** argv) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	f5ad 6dfb 	sub.w	sp, sp, #2008	@ 0x7d8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8000c64:	f2a3 73d4 	subw	r3, r3, #2004	@ 0x7d4
 8000c68:	6018      	str	r0, [r3, #0]
 8000c6a:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8000c6e:	f5a3 63fb 	sub.w	r3, r3, #2008	@ 0x7d8
 8000c72:	6019      	str	r1, [r3, #0]
	uint8_t InfoBuffer[1000];
	uint8_t RunTimeBuffer[1000];
    vTaskList((char *)&InfoBuffer);
 8000c74:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 f911 	bl	8004ea0 <vTaskList>
    vTaskGetRunTimeStats((char *)&RunTimeBuffer);
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4618      	mov	r0, r3
 8000c84:	f004 f9a2 	bl	8004fcc <vTaskGetRunTimeStats>
    shell_write("Name          State     Pr     Stack  TaskNum\r\n");
 8000c88:	480e      	ldr	r0, [pc, #56]	@ (8000cc4 <cmd_status+0x6c>)
 8000c8a:	f7ff ff0b 	bl	8000aa4 <shell_write>
    shell_write("---------------------------------------------\r\n");
 8000c8e:	480e      	ldr	r0, [pc, #56]	@ (8000cc8 <cmd_status+0x70>)
 8000c90:	f7ff ff08 	bl	8000aa4 <shell_write>
    shell_write(InfoBuffer);
 8000c94:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff03 	bl	8000aa4 <shell_write>
    shell_write("\r\n");
 8000c9e:	480b      	ldr	r0, [pc, #44]	@ (8000ccc <cmd_status+0x74>)
 8000ca0:	f7ff ff00 	bl	8000aa4 <shell_write>
    shell_write("Name            Count        Utlization\r\n");
 8000ca4:	480a      	ldr	r0, [pc, #40]	@ (8000cd0 <cmd_status+0x78>)
 8000ca6:	f7ff fefd 	bl	8000aa4 <shell_write>
    shell_write("---------------------------------------\r\n");
 8000caa:	480a      	ldr	r0, [pc, #40]	@ (8000cd4 <cmd_status+0x7c>)
 8000cac:	f7ff fefa 	bl	8000aa4 <shell_write>
    shell_write(RunTimeBuffer);
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fef5 	bl	8000aa4 <shell_write>
}
 8000cba:	bf00      	nop
 8000cbc:	f507 67fb 	add.w	r7, r7, #2008	@ 0x7d8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	080078e8 	.word	0x080078e8
 8000cc8:	08007918 	.word	0x08007918
 8000ccc:	080078e0 	.word	0x080078e0
 8000cd0:	08007948 	.word	0x08007948
 8000cd4:	08007974 	.word	0x08007974

08000cd8 <cmd_uptime>:

static void cmd_uptime(int argc, char** argv) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b09c      	sub	sp, #112	@ 0x70
 8000cdc:	af04      	add	r7, sp, #16
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
    TickType_t ticks = xTaskGetTickCount(); // 取得系統經過的 ticks
 8000ce2:	f003 fb6d 	bl	80043c0 <xTaskGetTickCount>
 8000ce6:	65f8      	str	r0, [r7, #92]	@ 0x5c
    uint32_t ms = ticks * portTICK_PERIOD_MS;
 8000ce8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000cea:	65bb      	str	r3, [r7, #88]	@ 0x58

    uint32_t seconds = ms / 1000;
 8000cec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000cee:	4a1e      	ldr	r2, [pc, #120]	@ (8000d68 <cmd_uptime+0x90>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	099b      	lsrs	r3, r3, #6
 8000cf6:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t minutes = seconds / 60;
 8000cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000d6c <cmd_uptime+0x94>)
 8000cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000d00:	095b      	lsrs	r3, r3, #5
 8000d02:	653b      	str	r3, [r7, #80]	@ 0x50
    uint32_t hours   = minutes / 60;
 8000d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d06:	4a19      	ldr	r2, [pc, #100]	@ (8000d6c <cmd_uptime+0x94>)
 8000d08:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0c:	095b      	lsrs	r3, r3, #5
 8000d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    seconds = seconds % 60;
 8000d10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000d12:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <cmd_uptime+0x94>)
 8000d14:	fba3 1302 	umull	r1, r3, r3, r2
 8000d18:	0959      	lsrs	r1, r3, #5
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	1a5b      	subs	r3, r3, r1
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	657b      	str	r3, [r7, #84]	@ 0x54
    minutes = minutes % 60;
 8000d26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000d28:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <cmd_uptime+0x94>)
 8000d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d2e:	0959      	lsrs	r1, r3, #5
 8000d30:	460b      	mov	r3, r1
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	1a5b      	subs	r3, r3, r1
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	653b      	str	r3, [r7, #80]	@ 0x50

    char line[64];
    snprintf(line, sizeof(line), "Uptime: %02lu:%02lu:%02lu (%lu ms)\r\n",
 8000d3c:	f107 000c 	add.w	r0, r7, #12
 8000d40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d42:	9302      	str	r3, [sp, #8]
 8000d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d4e:	4a08      	ldr	r2, [pc, #32]	@ (8000d70 <cmd_uptime+0x98>)
 8000d50:	2140      	movs	r1, #64	@ 0x40
 8000d52:	f005 fa4d 	bl	80061f0 <sniprintf>
             hours, minutes, seconds, ms);
    shell_write(line);
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fea2 	bl	8000aa4 <shell_write>
}
 8000d60:	bf00      	nop
 8000d62:	3760      	adds	r7, #96	@ 0x60
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	10624dd3 	.word	0x10624dd3
 8000d6c:	88888889 	.word	0x88888889
 8000d70:	080079a0 	.word	0x080079a0

08000d74 <cmd_log>:

static void cmd_log(int argc, char** argv) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
    if (strcmp(argv[1], "on") == 0) {
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	3304      	adds	r3, #4
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4912      	ldr	r1, [pc, #72]	@ (8000dd0 <cmd_log+0x5c>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fa22 	bl	80001d0 <strcmp>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d106      	bne.n	8000da0 <cmd_log+0x2c>
        log_enabled = true;
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <cmd_log+0x60>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]
        shell_write("Logging enabled\r\n");
 8000d98:	480f      	ldr	r0, [pc, #60]	@ (8000dd8 <cmd_log+0x64>)
 8000d9a:	f7ff fe83 	bl	8000aa4 <shell_write>
        log_enabled = false;
        shell_write("Logging disabled\r\n");
    } else {
        shell_write("Usage: log on / off\r\n");
    }
}
 8000d9e:	e013      	b.n	8000dc8 <cmd_log+0x54>
    } else if (strcmp(argv[1], "off") == 0) {
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	3304      	adds	r3, #4
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	490d      	ldr	r1, [pc, #52]	@ (8000ddc <cmd_log+0x68>)
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fa11 	bl	80001d0 <strcmp>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d106      	bne.n	8000dc2 <cmd_log+0x4e>
        log_enabled = false;
 8000db4:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <cmd_log+0x60>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
        shell_write("Logging disabled\r\n");
 8000dba:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <cmd_log+0x6c>)
 8000dbc:	f7ff fe72 	bl	8000aa4 <shell_write>
}
 8000dc0:	e002      	b.n	8000dc8 <cmd_log+0x54>
        shell_write("Usage: log on / off\r\n");
 8000dc2:	4808      	ldr	r0, [pc, #32]	@ (8000de4 <cmd_log+0x70>)
 8000dc4:	f7ff fe6e 	bl	8000aa4 <shell_write>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	080079c8 	.word	0x080079c8
 8000dd4:	20000260 	.word	0x20000260
 8000dd8:	080079cc 	.word	0x080079cc
 8000ddc:	080079e0 	.word	0x080079e0
 8000de0:	080079e4 	.word	0x080079e4
 8000de4:	080079f8 	.word	0x080079f8

08000de8 <cmd_mem>:

static void cmd_mem(int argc, char **argv)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b0c6      	sub	sp, #280	@ 0x118
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000df6:	6018      	str	r0, [r3, #0]
 8000df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000e00:	6019      	str	r1, [r3, #0]
    /* 先列出 Heap 資訊 … */
	char line[128];
	size_t heap_free = xPortGetFreeHeapSize();
 8000e02:	f005 f85f 	bl	8005ec4 <xPortGetFreeHeapSize>
 8000e06:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
	size_t heap_min = xPortGetMinimumEverFreeHeapSize();
 8000e0a:	f005 f867 	bl	8005edc <xPortGetMinimumEverFreeHeapSize>
 8000e0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
	shell_write("\r\nMemory Summary:\r\n\r\n");
 8000e12:	485a      	ldr	r0, [pc, #360]	@ (8000f7c <cmd_mem+0x194>)
 8000e14:	f7ff fe46 	bl	8000aa4 <shell_write>

	snprintf(line, sizeof(line), "    Heap Total Free      : %lu bytes\r\n", (unsigned long)heap_free);
 8000e18:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8000e1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000e20:	4a57      	ldr	r2, [pc, #348]	@ (8000f80 <cmd_mem+0x198>)
 8000e22:	2180      	movs	r1, #128	@ 0x80
 8000e24:	f005 f9e4 	bl	80061f0 <sniprintf>
	shell_write(line);
 8000e28:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe39 	bl	8000aa4 <shell_write>
	snprintf(line, sizeof(line), "    Heap Min Ever Free   : %lu bytes\r\n\r\n", (unsigned long)heap_min);
 8000e32:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8000e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000e3a:	4a52      	ldr	r2, [pc, #328]	@ (8000f84 <cmd_mem+0x19c>)
 8000e3c:	2180      	movs	r1, #128	@ 0x80
 8000e3e:	f005 f9d7 	bl	80061f0 <sniprintf>
	shell_write(line);
 8000e42:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fe2c 	bl	8000aa4 <shell_write>


    UBaseType_t n = uxTaskGetNumberOfTasks();
 8000e4c:	f003 fac8 	bl	80043e0 <uxTaskGetNumberOfTasks>
 8000e50:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
    TaskStatus_t *tsArray = pvPortMalloc(n * sizeof(TaskStatus_t));
 8000e54:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8000e58:	4613      	mov	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 ff0b 	bl	8005c7c <pvPortMalloc>
 8000e66:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    n = uxTaskGetSystemState(tsArray, n, NULL);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8000e70:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8000e74:	f003 fac0 	bl	80043f8 <uxTaskGetSystemState>
 8000e78:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8

    shell_write("\r\nTask            Stack  Used Free            %%\r\n"
 8000e7c:	4842      	ldr	r0, [pc, #264]	@ (8000f88 <cmd_mem+0x1a0>)
 8000e7e:	f7ff fe11 	bl	8000aa4 <shell_write>
                "--------------- ------ ---- ---- -------------\r\n");

    char buf[96];
    for (UBaseType_t i = 0; i < n; i++) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000e88:	e069      	b.n	8000f5e <cmd_mem+0x176>
        TaskStatus_t *t = &tsArray[i];
 8000e8a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000e8e:	4613      	mov	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4413      	add	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	461a      	mov	r2, r3
 8000e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        uint16_t total = findStackSize(t->xHandle);
 8000ea2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fe4d 	bl	8000b48 <findStackSize>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
        uint16_t free  = t->usStackHighWaterMark;
 8000eb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000eb8:	8c1b      	ldrh	r3, [r3, #32]
 8000eba:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
        uint16_t used  = total - free;
 8000ebe:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	@ 0xee
 8000ec2:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
        uint8_t  pct   = (used * 100UL) / total;
 8000ecc:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8000ed0:	2264      	movs	r2, #100	@ 0x64
 8000ed2:	fb03 f202 	mul.w	r2, r3, r2
 8000ed6:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9

        if(total == 0){
 8000ee2:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d118      	bne.n	8000f1c <cmd_mem+0x134>
        	snprintf(buf, sizeof(buf), "%-15s %5s  %4s %4u %13s\r\n",
 8000eea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8000ef4:	f107 0008 	add.w	r0, r7, #8
 8000ef8:	4924      	ldr	r1, [pc, #144]	@ (8000f8c <cmd_mem+0x1a4>)
 8000efa:	9103      	str	r1, [sp, #12]
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <cmd_mem+0x1a8>)
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <cmd_mem+0x1a8>)
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	4613      	mov	r3, r2
 8000f08:	4a22      	ldr	r2, [pc, #136]	@ (8000f94 <cmd_mem+0x1ac>)
 8000f0a:	2160      	movs	r1, #96	@ 0x60
 8000f0c:	f005 f970 	bl	80061f0 <sniprintf>
        	        	                 t->pcTaskName, "N/A","N/A", free, "system task");
        	        	        shell_write(buf);
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fdc5 	bl	8000aa4 <shell_write>
 8000f1a:	e01b      	b.n	8000f54 <cmd_mem+0x16c>
        }
        else{
        	 snprintf(buf, sizeof(buf), "%-15s %5u  %4u %4u %12u%%\r\n",
 8000f1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000f20:	685d      	ldr	r5, [r3, #4]
 8000f22:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8000f26:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	@ 0xea
 8000f2a:	f8b7 10ec 	ldrh.w	r1, [r7, #236]	@ 0xec
 8000f2e:	f897 00e9 	ldrb.w	r0, [r7, #233]	@ 0xe9
 8000f32:	f107 0408 	add.w	r4, r7, #8
 8000f36:	9003      	str	r0, [sp, #12]
 8000f38:	9102      	str	r1, [sp, #8]
 8000f3a:	9201      	str	r2, [sp, #4]
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	462b      	mov	r3, r5
 8000f40:	4a15      	ldr	r2, [pc, #84]	@ (8000f98 <cmd_mem+0x1b0>)
 8000f42:	2160      	movs	r1, #96	@ 0x60
 8000f44:	4620      	mov	r0, r4
 8000f46:	f005 f953 	bl	80061f0 <sniprintf>
        	                 t->pcTaskName, total, used, free, pct);
        	        shell_write(buf);
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fda8 	bl	8000aa4 <shell_write>
    for (UBaseType_t i = 0; i < n; i++) {
 8000f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f58:	3301      	adds	r3, #1
 8000f5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f5e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000f62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d38f      	bcc.n	8000e8a <cmd_mem+0xa2>
        }
    }
    vPortFree(tsArray);
 8000f6a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8000f6e:	f004 ff4d 	bl	8005e0c <vPortFree>
}
 8000f72:	bf00      	nop
 8000f74:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7c:	08007a10 	.word	0x08007a10
 8000f80:	08007a28 	.word	0x08007a28
 8000f84:	08007a50 	.word	0x08007a50
 8000f88:	08007a7c 	.word	0x08007a7c
 8000f8c:	08007afc 	.word	0x08007afc
 8000f90:	08007b08 	.word	0x08007b08
 8000f94:	08007ae0 	.word	0x08007ae0
 8000f98:	08007b0c 	.word	0x08007b0c

08000f9c <parse_and_execute>:

// Parser function
static void parse_and_execute(char* line) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b090      	sub	sp, #64	@ 0x40
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    char* argv[10];
    int argc = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char* p = strtok(line, " ");
 8000fa8:	4933      	ldr	r1, [pc, #204]	@ (8001078 <parse_and_execute+0xdc>)
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f005 f9d2 	bl	8006354 <strtok>
 8000fb0:	63b8      	str	r0, [r7, #56]	@ 0x38
    while (p && argc < 10) {
 8000fb2:	e00d      	b.n	8000fd0 <parse_and_execute+0x34>
        argv[argc++] = p;
 8000fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	3340      	adds	r3, #64	@ 0x40
 8000fbe:	443b      	add	r3, r7
 8000fc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000fc2:	f843 2c34 	str.w	r2, [r3, #-52]
        p = strtok(NULL, " ");
 8000fc6:	492c      	ldr	r1, [pc, #176]	@ (8001078 <parse_and_execute+0xdc>)
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f005 f9c3 	bl	8006354 <strtok>
 8000fce:	63b8      	str	r0, [r7, #56]	@ 0x38
    while (p && argc < 10) {
 8000fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <parse_and_execute+0x40>
 8000fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fd8:	2b09      	cmp	r3, #9
 8000fda:	ddeb      	ble.n	8000fb4 <parse_and_execute+0x18>
    }
    if (argc == 0) return;
 8000fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d045      	beq.n	800106e <parse_and_execute+0xd2>

    for (int i = 0; i < CMD_COUNT; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fe6:	e034      	b.n	8001052 <parse_and_execute+0xb6>
        if (strcmp(argv[0], cli_commands[i].name) == 0) {
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	4924      	ldr	r1, [pc, #144]	@ (800107c <parse_and_execute+0xe0>)
 8000fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	440b      	add	r3, r1
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	f7ff f8ea 	bl	80001d0 <strcmp>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d124      	bne.n	800104c <parse_and_execute+0xb0>
            if (argc - 1 < cli_commands[i].argc_min) {
 8001002:	4a1e      	ldr	r2, [pc, #120]	@ (800107c <parse_and_execute+0xe0>)
 8001004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	3304      	adds	r3, #4
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001010:	429a      	cmp	r2, r3
 8001012:	dc0f      	bgt.n	8001034 <parse_and_execute+0x98>
                shell_write("Usage: ");
 8001014:	481a      	ldr	r0, [pc, #104]	@ (8001080 <parse_and_execute+0xe4>)
 8001016:	f7ff fd45 	bl	8000aa4 <shell_write>
                shell_write(cli_commands[i].help);
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <parse_and_execute+0xe0>)
 800101c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	4413      	add	r3, r2
 8001022:	330c      	adds	r3, #12
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fd3c 	bl	8000aa4 <shell_write>
                shell_write("\r\n");
 800102c:	4815      	ldr	r0, [pc, #84]	@ (8001084 <parse_and_execute+0xe8>)
 800102e:	f7ff fd39 	bl	8000aa4 <shell_write>
            } else {
                cli_commands[i].handler(argc, argv);
            }
            return;
 8001032:	e01d      	b.n	8001070 <parse_and_execute+0xd4>
                cli_commands[i].handler(argc, argv);
 8001034:	4a11      	ldr	r2, [pc, #68]	@ (800107c <parse_and_execute+0xe0>)
 8001036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4413      	add	r3, r2
 800103c:	3308      	adds	r3, #8
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f107 020c 	add.w	r2, r7, #12
 8001044:	4611      	mov	r1, r2
 8001046:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001048:	4798      	blx	r3
            return;
 800104a:	e011      	b.n	8001070 <parse_and_execute+0xd4>
    for (int i = 0; i < CMD_COUNT; i++) {
 800104c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800104e:	3301      	adds	r3, #1
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
 8001052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001054:	2b05      	cmp	r3, #5
 8001056:	d9c7      	bls.n	8000fe8 <parse_and_execute+0x4c>
        }
    }
    shell_write("Unknown command: ");
 8001058:	480b      	ldr	r0, [pc, #44]	@ (8001088 <parse_and_execute+0xec>)
 800105a:	f7ff fd23 	bl	8000aa4 <shell_write>
    shell_write(argv[0]);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fd1f 	bl	8000aa4 <shell_write>
    shell_write("\r\n");
 8001066:	4807      	ldr	r0, [pc, #28]	@ (8001084 <parse_and_execute+0xe8>)
 8001068:	f7ff fd1c 	bl	8000aa4 <shell_write>
 800106c:	e000      	b.n	8001070 <parse_and_execute+0xd4>
    if (argc == 0) return;
 800106e:	bf00      	nop
}
 8001070:	3740      	adds	r7, #64	@ 0x40
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	080078e4 	.word	0x080078e4
 800107c:	08007b98 	.word	0x08007b98
 8001080:	08007b28 	.word	0x08007b28
 8001084:	080078e0 	.word	0x080078e0
 8001088:	08007b30 	.word	0x08007b30

0800108c <ShellTask>:

// Shell Task
void ShellTask(void* argument) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b0a4      	sub	sp, #144	@ 0x90
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    static const char* banner =
       "FreeShellRTOS:/$ ";  // 已經在這前面印 banner 的程式

    char buf[128];
    int idx = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    char ch;

    shell_write(shell_banner);
 800109a:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <ShellTask+0xa4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fd00 	bl	8000aa4 <shell_write>
    shell_write(banner);
 80010a4:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <ShellTask+0xa8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fcfb 	bl	8000aa4 <shell_write>

    while (1) {
        if (HAL_UART_Receive(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY) == HAL_OK) {
 80010ae:	f107 010b 	add.w	r1, r7, #11
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	2201      	movs	r2, #1
 80010b8:	481f      	ldr	r0, [pc, #124]	@ (8001138 <ShellTask+0xac>)
 80010ba:	f001 fd72 	bl	8002ba2 <HAL_UART_Receive>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1f4      	bne.n	80010ae <ShellTask+0x22>
            if (ch == '\r') {
 80010c4:	7afb      	ldrb	r3, [r7, #11]
 80010c6:	2b0d      	cmp	r3, #13
 80010c8:	d115      	bne.n	80010f6 <ShellTask+0x6a>
                buf[idx] = '\0';
 80010ca:	f107 020c 	add.w	r2, r7, #12
 80010ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010d2:	4413      	add	r3, r2
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
                shell_write("\r\n");
 80010d8:	4818      	ldr	r0, [pc, #96]	@ (800113c <ShellTask+0xb0>)
 80010da:	f7ff fce3 	bl	8000aa4 <shell_write>
                parse_and_execute(buf);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff5a 	bl	8000f9c <parse_and_execute>
                shell_write("FreeShellRTOS:/$ ");
 80010e8:	4815      	ldr	r0, [pc, #84]	@ (8001140 <ShellTask+0xb4>)
 80010ea:	f7ff fcdb 	bl	8000aa4 <shell_write>
                idx = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80010f4:	e7db      	b.n	80010ae <ShellTask+0x22>
            } else if (idx < (int)sizeof(buf) - 1 && ch >= 32 && ch <= 126) {
 80010f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010fa:	2b7e      	cmp	r3, #126	@ 0x7e
 80010fc:	dcd7      	bgt.n	80010ae <ShellTask+0x22>
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	2b1f      	cmp	r3, #31
 8001102:	d9d4      	bls.n	80010ae <ShellTask+0x22>
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	2b7e      	cmp	r3, #126	@ 0x7e
 8001108:	d8d1      	bhi.n	80010ae <ShellTask+0x22>
                buf[idx++] = ch;
 800110a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001114:	7afa      	ldrb	r2, [r7, #11]
 8001116:	3390      	adds	r3, #144	@ 0x90
 8001118:	443b      	add	r3, r7
 800111a:	f803 2c84 	strb.w	r2, [r3, #-132]
                HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800111e:	f107 010b 	add.w	r1, r7, #11
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	2201      	movs	r2, #1
 8001128:	4803      	ldr	r0, [pc, #12]	@ (8001138 <ShellTask+0xac>)
 800112a:	f001 fcaf 	bl	8002a8c <HAL_UART_Transmit>
        if (HAL_UART_Receive(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY) == HAL_OK) {
 800112e:	e7be      	b.n	80010ae <ShellTask+0x22>
 8001130:	20000000 	.word	0x20000000
 8001134:	20000004 	.word	0x20000004
 8001138:	20000090 	.word	0x20000090
 800113c:	080078e0 	.word	0x080078e0
 8001140:	08007b44 	.word	0x08007b44

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <HAL_MspInit+0x4c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	4a0f      	ldr	r2, [pc, #60]	@ (8001190 <HAL_MspInit+0x4c>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001158:	6453      	str	r3, [r2, #68]	@ 0x44
 800115a:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <HAL_MspInit+0x4c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <HAL_MspInit+0x4c>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	4a08      	ldr	r2, [pc, #32]	@ (8001190 <HAL_MspInit+0x4c>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001174:	6413      	str	r3, [r2, #64]	@ 0x40
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_MspInit+0x4c>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800

08001194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a19      	ldr	r2, [pc, #100]	@ (8001218 <HAL_UART_MspInit+0x84>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d12b      	bne.n	800120e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <HAL_UART_MspInit+0x88>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	4a17      	ldr	r2, [pc, #92]	@ (800121c <HAL_UART_MspInit+0x88>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <HAL_UART_MspInit+0x88>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <HAL_UART_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <HAL_UART_MspInit+0x88>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <HAL_UART_MspInit+0x88>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ee:	230c      	movs	r3, #12
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fe:	2307      	movs	r3, #7
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	@ (8001220 <HAL_UART_MspInit+0x8c>)
 800120a:	f000 fad3 	bl	80017b4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	@ 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40004400 	.word	0x40004400
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000

08001224 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	@ 0x38
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	4b33      	ldr	r3, [pc, #204]	@ (8001308 <HAL_InitTick+0xe4>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	4a32      	ldr	r2, [pc, #200]	@ (8001308 <HAL_InitTick+0xe4>)
 800123e:	f043 0320 	orr.w	r3, r3, #32
 8001242:	6413      	str	r3, [r2, #64]	@ 0x40
 8001244:	4b30      	ldr	r3, [pc, #192]	@ (8001308 <HAL_InitTick+0xe4>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001250:	f107 0210 	add.w	r2, r7, #16
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f001 f8f8 	bl	8002450 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001266:	2b00      	cmp	r3, #0
 8001268:	d103      	bne.n	8001272 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800126a:	f001 f8c9 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 800126e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001270:	e004      	b.n	800127c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001272:	f001 f8c5 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 8001276:	4603      	mov	r3, r0
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800127c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800127e:	4a23      	ldr	r2, [pc, #140]	@ (800130c <HAL_InitTick+0xe8>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0c9b      	lsrs	r3, r3, #18
 8001286:	3b01      	subs	r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <HAL_InitTick+0xec>)
 800128c:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <HAL_InitTick+0xf0>)
 800128e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <HAL_InitTick+0xec>)
 8001292:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001296:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001298:	4a1d      	ldr	r2, [pc, #116]	@ (8001310 <HAL_InitTick+0xec>)
 800129a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800129c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <HAL_InitTick+0xec>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <HAL_InitTick+0xec>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <HAL_InitTick+0xec>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80012b0:	4817      	ldr	r0, [pc, #92]	@ (8001310 <HAL_InitTick+0xec>)
 80012b2:	f001 f8ff 	bl	80024b4 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d11b      	bne.n	80012fc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80012c4:	4812      	ldr	r0, [pc, #72]	@ (8001310 <HAL_InitTick+0xec>)
 80012c6:	f001 f94f 	bl	8002568 <HAL_TIM_Base_Start_IT>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d111      	bne.n	80012fc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012d8:	2037      	movs	r0, #55	@ 0x37
 80012da:	f000 fa5d 	bl	8001798 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d808      	bhi.n	80012f6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	2037      	movs	r0, #55	@ 0x37
 80012ea:	f000 fa39 	bl	8001760 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <HAL_InitTick+0xf4>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e002      	b.n	80012fc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001300:	4618      	mov	r0, r3
 8001302:	3738      	adds	r7, #56	@ 0x38
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	431bde83 	.word	0x431bde83
 8001310:	20000264 	.word	0x20000264
 8001314:	40001400 	.word	0x40001400
 8001318:	2000000c 	.word	0x2000000c

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <NMI_Handler+0x4>

08001324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <MemManage_Handler+0x4>

08001334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <UsageFault_Handler+0x4>

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <TIM7_IRQHandler+0x10>)
 800135a:	f001 f975 	bl	8002648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000264 	.word	0x20000264

08001368 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_kill>:

int _kill(int pid, int sig)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001382:	f005 f889 	bl	8006498 <__errno>
 8001386:	4603      	mov	r3, r0
 8001388:	2216      	movs	r2, #22
 800138a:	601a      	str	r2, [r3, #0]
  return -1;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_exit>:

void _exit (int status)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ffe7 	bl	8001378 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013aa:	bf00      	nop
 80013ac:	e7fd      	b.n	80013aa <_exit+0x12>

080013ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e00a      	b.n	80013d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c0:	f3af 8000 	nop.w
 80013c4:	4601      	mov	r1, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	60ba      	str	r2, [r7, #8]
 80013cc:	b2ca      	uxtb	r2, r1
 80013ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	dbf0      	blt.n	80013c0 <_read+0x12>
  }

  return len;
 80013de:	687b      	ldr	r3, [r7, #4]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e009      	b.n	800140e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	60ba      	str	r2, [r7, #8]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	429a      	cmp	r2, r3
 8001414:	dbf1      	blt.n	80013fa <_write+0x12>
  }
  return len;
 8001416:	687b      	ldr	r3, [r7, #4]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_close>:

int _close(int file)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001448:	605a      	str	r2, [r3, #4]
  return 0;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_isatty>:

int _isatty(int file)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f004 ffee 	bl	8006498 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20020000 	.word	0x20020000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	200002ac 	.word	0x200002ac
 80014f0:	200131a8 	.word	0x200131a8

080014f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <SystemInit+0x20>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014fe:	4a05      	ldr	r2, [pc, #20]	@ (8001514 <SystemInit+0x20>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001550 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800151c:	f7ff ffea 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001522:	490d      	ldr	r1, [pc, #52]	@ (8001558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001524:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001538:	4c0a      	ldr	r4, [pc, #40]	@ (8001564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001546:	f004 ffad 	bl	80064a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154a:	f7ff f859 	bl	8000600 <main>
  bx  lr    
 800154e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800155c:	08007d00 	.word	0x08007d00
  ldr r2, =_sbss
 8001560:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001564:	200131a8 	.word	0x200131a8

08001568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <HAL_Init+0x40>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800157a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	@ (80015ac <HAL_Init+0x40>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	@ (80015ac <HAL_Init+0x40>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 f8d8 	bl	800174a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fe42 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff fdd0 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_IncTick+0x20>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_IncTick+0x24>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a04      	ldr	r2, [pc, #16]	@ (80015d4 <HAL_IncTick+0x24>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000010 	.word	0x20000010
 80015d4:	200002b0 	.word	0x200002b0

080015d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return uwTick;
 80015dc:	4b03      	ldr	r3, [pc, #12]	@ (80015ec <HAL_GetTick+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	200002b0 	.word	0x200002b0

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	@ (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	@ (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	@ (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	@ 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	@ 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff4c 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001772:	f7ff ff61 	bl	8001638 <__NVIC_GetPriorityGrouping>
 8001776:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	6978      	ldr	r0, [r7, #20]
 800177e:	f7ff ffb1 	bl	80016e4 <NVIC_EncodePriority>
 8001782:	4602      	mov	r2, r0
 8001784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff80 	bl	8001690 <__NVIC_SetPriority>
}
 8001790:	bf00      	nop
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff54 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	e16b      	b.n	8001aa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 815a 	bne.w	8001aa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d005      	beq.n	8001806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001802:	2b02      	cmp	r3, #2
 8001804:	d130      	bne.n	8001868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 0201 	and.w	r2, r3, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b03      	cmp	r3, #3
 8001872:	d017      	beq.n	80018a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d123      	bne.n	80018f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	69b9      	ldr	r1, [r7, #24]
 80018f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0203 	and.w	r2, r3, #3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80b4 	beq.w	8001aa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b60      	ldr	r3, [pc, #384]	@ (8001ac0 <HAL_GPIO_Init+0x30c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	4a5f      	ldr	r2, [pc, #380]	@ (8001ac0 <HAL_GPIO_Init+0x30c>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001948:	6453      	str	r3, [r2, #68]	@ 0x44
 800194a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac0 <HAL_GPIO_Init+0x30c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001956:	4a5b      	ldr	r2, [pc, #364]	@ (8001ac4 <HAL_GPIO_Init+0x310>)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a52      	ldr	r2, [pc, #328]	@ (8001ac8 <HAL_GPIO_Init+0x314>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d02b      	beq.n	80019da <HAL_GPIO_Init+0x226>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a51      	ldr	r2, [pc, #324]	@ (8001acc <HAL_GPIO_Init+0x318>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d025      	beq.n	80019d6 <HAL_GPIO_Init+0x222>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a50      	ldr	r2, [pc, #320]	@ (8001ad0 <HAL_GPIO_Init+0x31c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d01f      	beq.n	80019d2 <HAL_GPIO_Init+0x21e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad4 <HAL_GPIO_Init+0x320>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d019      	beq.n	80019ce <HAL_GPIO_Init+0x21a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ad8 <HAL_GPIO_Init+0x324>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_GPIO_Init+0x216>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4d      	ldr	r2, [pc, #308]	@ (8001adc <HAL_GPIO_Init+0x328>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00d      	beq.n	80019c6 <HAL_GPIO_Init+0x212>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae0 <HAL_GPIO_Init+0x32c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d007      	beq.n	80019c2 <HAL_GPIO_Init+0x20e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae4 <HAL_GPIO_Init+0x330>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_GPIO_Init+0x20a>
 80019ba:	2307      	movs	r3, #7
 80019bc:	e00e      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019be:	2308      	movs	r3, #8
 80019c0:	e00c      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019c2:	2306      	movs	r3, #6
 80019c4:	e00a      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019c6:	2305      	movs	r3, #5
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019da:	2300      	movs	r3, #0
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ec:	4935      	ldr	r1, [pc, #212]	@ (8001ac4 <HAL_GPIO_Init+0x310>)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1e:	4a32      	ldr	r2, [pc, #200]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a24:	4b30      	ldr	r3, [pc, #192]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a48:	4a27      	ldr	r2, [pc, #156]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a9c:	4a12      	ldr	r2, [pc, #72]	@ (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f67f ae90 	bls.w	80017d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3724      	adds	r7, #36	@ 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40021400 	.word	0x40021400
 8001ae0:	40021800 	.word	0x40021800
 8001ae4:	40021c00 	.word	0x40021c00
 8001ae8:	40013c00 	.word	0x40013c00

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e267      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d075      	beq.n	8001c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b3e:	4b88      	ldr	r3, [pc, #544]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d00c      	beq.n	8001b64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4a:	4b85      	ldr	r3, [pc, #532]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d112      	bne.n	8001b7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b56:	4b82      	ldr	r3, [pc, #520]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b62:	d10b      	bne.n	8001b7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	4b7e      	ldr	r3, [pc, #504]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d05b      	beq.n	8001c28 <HAL_RCC_OscConfig+0x108>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d157      	bne.n	8001c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e242      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b84:	d106      	bne.n	8001b94 <HAL_RCC_OscConfig+0x74>
 8001b86:	4b76      	ldr	r3, [pc, #472]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a75      	ldr	r2, [pc, #468]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e01d      	b.n	8001bd0 <HAL_RCC_OscConfig+0xb0>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x98>
 8001b9e:	4b70      	ldr	r3, [pc, #448]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a6f      	ldr	r2, [pc, #444]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b6d      	ldr	r3, [pc, #436]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6c      	ldr	r2, [pc, #432]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0xb0>
 8001bb8:	4b69      	ldr	r3, [pc, #420]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a68      	ldr	r2, [pc, #416]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b66      	ldr	r3, [pc, #408]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a65      	ldr	r2, [pc, #404]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d013      	beq.n	8001c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fcfe 	bl	80015d8 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff fcfa 	bl	80015d8 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	@ 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e207      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0xc0>
 8001bfe:	e014      	b.n	8001c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff fcea 	bl	80015d8 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff fce6 	bl	80015d8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	@ 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1f3      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	4b51      	ldr	r3, [pc, #324]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0xe8>
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d063      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c36:	4b4a      	ldr	r3, [pc, #296]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c42:	4b47      	ldr	r3, [pc, #284]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d11c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4e:	4b44      	ldr	r3, [pc, #272]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d116      	bne.n	8001c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	4b41      	ldr	r3, [pc, #260]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_RCC_OscConfig+0x152>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e1c7      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b3b      	ldr	r3, [pc, #236]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4937      	ldr	r1, [pc, #220]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c86:	e03a      	b.n	8001cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c90:	4b34      	ldr	r3, [pc, #208]	@ (8001d64 <HAL_RCC_OscConfig+0x244>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7ff fc9f 	bl	80015d8 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fc9b 	bl	80015d8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e1a8      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4925      	ldr	r1, [pc, #148]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd2:	4b24      	ldr	r3, [pc, #144]	@ (8001d64 <HAL_RCC_OscConfig+0x244>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fc7e 	bl	80015d8 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fc7a 	bl	80015d8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e187      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d036      	beq.n	8001d78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d016      	beq.n	8001d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_RCC_OscConfig+0x248>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7ff fc5e 	bl	80015d8 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d20:	f7ff fc5a 	bl	80015d8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e167      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <HAL_RCC_OscConfig+0x240>)
 8001d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x200>
 8001d3e:	e01b      	b.n	8001d78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d40:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <HAL_RCC_OscConfig+0x248>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7ff fc47 	bl	80015d8 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	e00e      	b.n	8001d6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fc43 	bl	80015d8 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d907      	bls.n	8001d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e150      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
 8001d60:	40023800 	.word	0x40023800
 8001d64:	42470000 	.word	0x42470000
 8001d68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6c:	4b88      	ldr	r3, [pc, #544]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1ea      	bne.n	8001d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 8097 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8a:	4b81      	ldr	r3, [pc, #516]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10f      	bne.n	8001db6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da6:	4b7a      	ldr	r3, [pc, #488]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db2:	2301      	movs	r3, #1
 8001db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	4b77      	ldr	r3, [pc, #476]	@ (8001f94 <HAL_RCC_OscConfig+0x474>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d118      	bne.n	8001df4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc2:	4b74      	ldr	r3, [pc, #464]	@ (8001f94 <HAL_RCC_OscConfig+0x474>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a73      	ldr	r2, [pc, #460]	@ (8001f94 <HAL_RCC_OscConfig+0x474>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dce:	f7ff fc03 	bl	80015d8 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd6:	f7ff fbff 	bl	80015d8 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e10c      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f94 <HAL_RCC_OscConfig+0x474>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x2ea>
 8001dfc:	4b64      	ldr	r3, [pc, #400]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e00:	4a63      	ldr	r2, [pc, #396]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e08:	e01c      	b.n	8001e44 <HAL_RCC_OscConfig+0x324>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b05      	cmp	r3, #5
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x30c>
 8001e12:	4b5f      	ldr	r3, [pc, #380]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e16:	4a5e      	ldr	r2, [pc, #376]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	4a5b      	ldr	r2, [pc, #364]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0x324>
 8001e2c:	4b58      	ldr	r3, [pc, #352]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e30:	4a57      	ldr	r2, [pc, #348]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e38:	4b55      	ldr	r3, [pc, #340]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	4a54      	ldr	r2, [pc, #336]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e3e:	f023 0304 	bic.w	r3, r3, #4
 8001e42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d015      	beq.n	8001e78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff fbc4 	bl	80015d8 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e54:	f7ff fbc0 	bl	80015d8 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0cb      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6a:	4b49      	ldr	r3, [pc, #292]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0ee      	beq.n	8001e54 <HAL_RCC_OscConfig+0x334>
 8001e76:	e014      	b.n	8001ea2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e78:	f7ff fbae 	bl	80015d8 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7ff fbaa 	bl	80015d8 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e0b5      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e96:	4b3e      	ldr	r3, [pc, #248]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1ee      	bne.n	8001e80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	4b39      	ldr	r3, [pc, #228]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	4a38      	ldr	r2, [pc, #224]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a1 	beq.w	8002000 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ebe:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d05c      	beq.n	8001f84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d141      	bne.n	8001f56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b31      	ldr	r3, [pc, #196]	@ (8001f98 <HAL_RCC_OscConfig+0x478>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fb7e 	bl	80015d8 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff fb7a 	bl	80015d8 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e087      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef2:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	019b      	lsls	r3, r3, #6
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f14:	085b      	lsrs	r3, r3, #1
 8001f16:	3b01      	subs	r3, #1
 8001f18:	041b      	lsls	r3, r3, #16
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f20:	061b      	lsls	r3, r3, #24
 8001f22:	491b      	ldr	r1, [pc, #108]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f28:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <HAL_RCC_OscConfig+0x478>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fb53 	bl	80015d8 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff fb4f 	bl	80015d8 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e05c      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f48:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x416>
 8001f54:	e054      	b.n	8002000 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <HAL_RCC_OscConfig+0x478>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fb3c 	bl	80015d8 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff fb38 	bl	80015d8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e045      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_RCC_OscConfig+0x470>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x444>
 8001f82:	e03d      	b.n	8002000 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e038      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40007000 	.word	0x40007000
 8001f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <HAL_RCC_OscConfig+0x4ec>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d028      	beq.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d121      	bne.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d11a      	bne.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fcc:	4013      	ands	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d111      	bne.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe2:	085b      	lsrs	r3, r3, #1
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800

08002010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0cc      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b68      	ldr	r3, [pc, #416]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d90c      	bls.n	800204c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b65      	ldr	r3, [pc, #404]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b63      	ldr	r3, [pc, #396]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0b8      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002064:	4b59      	ldr	r3, [pc, #356]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a58      	ldr	r2, [pc, #352]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800206e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800207c:	4b53      	ldr	r3, [pc, #332]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a52      	ldr	r2, [pc, #328]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b50      	ldr	r3, [pc, #320]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	494d      	ldr	r1, [pc, #308]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d044      	beq.n	8002130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b47      	ldr	r3, [pc, #284]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d119      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e07f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	4b3f      	ldr	r3, [pc, #252]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	4b3b      	ldr	r3, [pc, #236]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e067      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ee:	4b37      	ldr	r3, [pc, #220]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4934      	ldr	r1, [pc, #208]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002100:	f7ff fa6a 	bl	80015d8 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	e00a      	b.n	800211e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7ff fa66 	bl	80015d8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e04f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	4b2b      	ldr	r3, [pc, #172]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 020c 	and.w	r2, r3, #12
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	429a      	cmp	r2, r3
 800212e:	d1eb      	bne.n	8002108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002130:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d20c      	bcs.n	8002158 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b20      	ldr	r3, [pc, #128]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e032      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002164:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4916      	ldr	r1, [pc, #88]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002182:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	490e      	ldr	r1, [pc, #56]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002196:	f000 f821 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800219a:	4602      	mov	r2, r0
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	490a      	ldr	r1, [pc, #40]	@ (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	5ccb      	ldrb	r3, [r1, r3]
 80021aa:	fa22 f303 	lsr.w	r3, r2, r3
 80021ae:	4a09      	ldr	r2, [pc, #36]	@ (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021b2:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f834 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00
 80021cc:	40023800 	.word	0x40023800
 80021d0:	08007bf8 	.word	0x08007bf8
 80021d4:	20000008 	.word	0x20000008
 80021d8:	2000000c 	.word	0x2000000c

080021dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e0:	b094      	sub	sp, #80	@ 0x50
 80021e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f4:	4b79      	ldr	r3, [pc, #484]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x200>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d00d      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x40>
 8002200:	2b08      	cmp	r3, #8
 8002202:	f200 80e1 	bhi.w	80023c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x34>
 800220a:	2b04      	cmp	r3, #4
 800220c:	d003      	beq.n	8002216 <HAL_RCC_GetSysClockFreq+0x3a>
 800220e:	e0db      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b73      	ldr	r3, [pc, #460]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002212:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002214:	e0db      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002216:	4b73      	ldr	r3, [pc, #460]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002218:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800221a:	e0d8      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800221c:	4b6f      	ldr	r3, [pc, #444]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x200>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002224:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002226:	4b6d      	ldr	r3, [pc, #436]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d063      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002232:	4b6a      	ldr	r3, [pc, #424]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	099b      	lsrs	r3, r3, #6
 8002238:	2200      	movs	r2, #0
 800223a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800223c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800223e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002244:	633b      	str	r3, [r7, #48]	@ 0x30
 8002246:	2300      	movs	r3, #0
 8002248:	637b      	str	r3, [r7, #52]	@ 0x34
 800224a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800224e:	4622      	mov	r2, r4
 8002250:	462b      	mov	r3, r5
 8002252:	f04f 0000 	mov.w	r0, #0
 8002256:	f04f 0100 	mov.w	r1, #0
 800225a:	0159      	lsls	r1, r3, #5
 800225c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002260:	0150      	lsls	r0, r2, #5
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4621      	mov	r1, r4
 8002268:	1a51      	subs	r1, r2, r1
 800226a:	6139      	str	r1, [r7, #16]
 800226c:	4629      	mov	r1, r5
 800226e:	eb63 0301 	sbc.w	r3, r3, r1
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002280:	4659      	mov	r1, fp
 8002282:	018b      	lsls	r3, r1, #6
 8002284:	4651      	mov	r1, sl
 8002286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800228a:	4651      	mov	r1, sl
 800228c:	018a      	lsls	r2, r1, #6
 800228e:	4651      	mov	r1, sl
 8002290:	ebb2 0801 	subs.w	r8, r2, r1
 8002294:	4659      	mov	r1, fp
 8002296:	eb63 0901 	sbc.w	r9, r3, r1
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022ae:	4690      	mov	r8, r2
 80022b0:	4699      	mov	r9, r3
 80022b2:	4623      	mov	r3, r4
 80022b4:	eb18 0303 	adds.w	r3, r8, r3
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	462b      	mov	r3, r5
 80022bc:	eb49 0303 	adc.w	r3, r9, r3
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022ce:	4629      	mov	r1, r5
 80022d0:	024b      	lsls	r3, r1, #9
 80022d2:	4621      	mov	r1, r4
 80022d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022d8:	4621      	mov	r1, r4
 80022da:	024a      	lsls	r2, r1, #9
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022e2:	2200      	movs	r2, #0
 80022e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022ec:	f7fd ffd8 	bl	80002a0 <__aeabi_uldivmod>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4613      	mov	r3, r2
 80022f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022f8:	e058      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fa:	4b38      	ldr	r3, [pc, #224]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x200>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	099b      	lsrs	r3, r3, #6
 8002300:	2200      	movs	r2, #0
 8002302:	4618      	mov	r0, r3
 8002304:	4611      	mov	r1, r2
 8002306:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800230a:	623b      	str	r3, [r7, #32]
 800230c:	2300      	movs	r3, #0
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002310:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002314:	4642      	mov	r2, r8
 8002316:	464b      	mov	r3, r9
 8002318:	f04f 0000 	mov.w	r0, #0
 800231c:	f04f 0100 	mov.w	r1, #0
 8002320:	0159      	lsls	r1, r3, #5
 8002322:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002326:	0150      	lsls	r0, r2, #5
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4641      	mov	r1, r8
 800232e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002332:	4649      	mov	r1, r9
 8002334:	eb63 0b01 	sbc.w	fp, r3, r1
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002344:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002348:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800234c:	ebb2 040a 	subs.w	r4, r2, sl
 8002350:	eb63 050b 	sbc.w	r5, r3, fp
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	00eb      	lsls	r3, r5, #3
 800235e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002362:	00e2      	lsls	r2, r4, #3
 8002364:	4614      	mov	r4, r2
 8002366:	461d      	mov	r5, r3
 8002368:	4643      	mov	r3, r8
 800236a:	18e3      	adds	r3, r4, r3
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	464b      	mov	r3, r9
 8002370:	eb45 0303 	adc.w	r3, r5, r3
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002382:	4629      	mov	r1, r5
 8002384:	028b      	lsls	r3, r1, #10
 8002386:	4621      	mov	r1, r4
 8002388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800238c:	4621      	mov	r1, r4
 800238e:	028a      	lsls	r2, r1, #10
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002396:	2200      	movs	r2, #0
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	61fa      	str	r2, [r7, #28]
 800239c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023a0:	f7fd ff7e 	bl	80002a0 <__aeabi_uldivmod>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4613      	mov	r3, r2
 80023aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023ac:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x200>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	0c1b      	lsrs	r3, r3, #16
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	3301      	adds	r3, #1
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80023bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023c6:	e002      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3750      	adds	r7, #80	@ 0x50
 80023d4:	46bd      	mov	sp, r7
 80023d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	00f42400 	.word	0x00f42400
 80023e4:	007a1200 	.word	0x007a1200

080023e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ec:	4b03      	ldr	r3, [pc, #12]	@ (80023fc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000008 	.word	0x20000008

08002400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002404:	f7ff fff0 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	0a9b      	lsrs	r3, r3, #10
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4903      	ldr	r1, [pc, #12]	@ (8002424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	08007c08 	.word	0x08007c08

08002428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800242c:	f7ff ffdc 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 8002430:	4602      	mov	r2, r0
 8002432:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	0b5b      	lsrs	r3, r3, #13
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	4903      	ldr	r1, [pc, #12]	@ (800244c <HAL_RCC_GetPCLK2Freq+0x24>)
 800243e:	5ccb      	ldrb	r3, [r1, r3]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40023800 	.word	0x40023800
 800244c:	08007c08 	.word	0x08007c08

08002450 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	220f      	movs	r2, #15
 800245e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002460:	4b12      	ldr	r3, [pc, #72]	@ (80024ac <HAL_RCC_GetClockConfig+0x5c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0203 	and.w	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800246c:	4b0f      	ldr	r3, [pc, #60]	@ (80024ac <HAL_RCC_GetClockConfig+0x5c>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002478:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <HAL_RCC_GetClockConfig+0x5c>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002484:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_RCC_GetClockConfig+0x5c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	08db      	lsrs	r3, r3, #3
 800248a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002492:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <HAL_RCC_GetClockConfig+0x60>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0207 	and.w	r2, r3, #7
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	601a      	str	r2, [r3, #0]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e041      	b.n	800254a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f839 	bl	8002552 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4619      	mov	r1, r3
 80024f2:	4610      	mov	r0, r2
 80024f4:	f000 f9c0 	bl	8002878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d001      	beq.n	8002580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e04e      	b.n	800261e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a23      	ldr	r2, [pc, #140]	@ (800262c <HAL_TIM_Base_Start_IT+0xc4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d022      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x80>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025aa:	d01d      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x80>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002630 <HAL_TIM_Base_Start_IT+0xc8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d018      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x80>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002634 <HAL_TIM_Base_Start_IT+0xcc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d013      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x80>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002638 <HAL_TIM_Base_Start_IT+0xd0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00e      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x80>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1b      	ldr	r2, [pc, #108]	@ (800263c <HAL_TIM_Base_Start_IT+0xd4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d009      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x80>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a19      	ldr	r2, [pc, #100]	@ (8002640 <HAL_TIM_Base_Start_IT+0xd8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0x80>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a18      	ldr	r2, [pc, #96]	@ (8002644 <HAL_TIM_Base_Start_IT+0xdc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d111      	bne.n	800260c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d010      	beq.n	800261c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260a:	e007      	b.n	800261c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40010000 	.word	0x40010000
 8002630:	40000400 	.word	0x40000400
 8002634:	40000800 	.word	0x40000800
 8002638:	40000c00 	.word	0x40000c00
 800263c:	40010400 	.word	0x40010400
 8002640:	40014000 	.word	0x40014000
 8002644:	40001800 	.word	0x40001800

08002648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d020      	beq.n	80026ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01b      	beq.n	80026ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0202 	mvn.w	r2, #2
 800267c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8d2 	bl	800283c <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8c4 	bl	8002828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f8d5 	bl	8002850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d020      	beq.n	80026f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01b      	beq.n	80026f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0204 	mvn.w	r2, #4
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2202      	movs	r2, #2
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8ac 	bl	800283c <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f89e 	bl	8002828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f8af 	bl	8002850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d020      	beq.n	8002744 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d01b      	beq.n	8002744 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0208 	mvn.w	r2, #8
 8002714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2204      	movs	r2, #4
 800271a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f886 	bl	800283c <HAL_TIM_IC_CaptureCallback>
 8002730:	e005      	b.n	800273e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f878 	bl	8002828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f889 	bl	8002850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b00      	cmp	r3, #0
 800274c:	d020      	beq.n	8002790 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01b      	beq.n	8002790 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0210 	mvn.w	r2, #16
 8002760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2208      	movs	r2, #8
 8002766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f860 	bl	800283c <HAL_TIM_IC_CaptureCallback>
 800277c:	e005      	b.n	800278a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f852 	bl	8002828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f863 	bl	8002850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00c      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0201 	mvn.w	r2, #1
 80027ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe f954 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00c      	beq.n	80027d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f900 	bl	80029d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00c      	beq.n	80027fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f834 	bl	8002864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00c      	beq.n	8002820 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d007      	beq.n	8002820 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0220 	mvn.w	r2, #32
 8002818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f8d2 	bl	80029c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a43      	ldr	r2, [pc, #268]	@ (8002998 <TIM_Base_SetConfig+0x120>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d013      	beq.n	80028b8 <TIM_Base_SetConfig+0x40>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002896:	d00f      	beq.n	80028b8 <TIM_Base_SetConfig+0x40>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a40      	ldr	r2, [pc, #256]	@ (800299c <TIM_Base_SetConfig+0x124>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00b      	beq.n	80028b8 <TIM_Base_SetConfig+0x40>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a3f      	ldr	r2, [pc, #252]	@ (80029a0 <TIM_Base_SetConfig+0x128>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d007      	beq.n	80028b8 <TIM_Base_SetConfig+0x40>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a3e      	ldr	r2, [pc, #248]	@ (80029a4 <TIM_Base_SetConfig+0x12c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <TIM_Base_SetConfig+0x40>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a3d      	ldr	r2, [pc, #244]	@ (80029a8 <TIM_Base_SetConfig+0x130>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d108      	bne.n	80028ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a32      	ldr	r2, [pc, #200]	@ (8002998 <TIM_Base_SetConfig+0x120>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d02b      	beq.n	800292a <TIM_Base_SetConfig+0xb2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d8:	d027      	beq.n	800292a <TIM_Base_SetConfig+0xb2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a2f      	ldr	r2, [pc, #188]	@ (800299c <TIM_Base_SetConfig+0x124>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d023      	beq.n	800292a <TIM_Base_SetConfig+0xb2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a2e      	ldr	r2, [pc, #184]	@ (80029a0 <TIM_Base_SetConfig+0x128>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01f      	beq.n	800292a <TIM_Base_SetConfig+0xb2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a2d      	ldr	r2, [pc, #180]	@ (80029a4 <TIM_Base_SetConfig+0x12c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01b      	beq.n	800292a <TIM_Base_SetConfig+0xb2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a2c      	ldr	r2, [pc, #176]	@ (80029a8 <TIM_Base_SetConfig+0x130>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d017      	beq.n	800292a <TIM_Base_SetConfig+0xb2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a2b      	ldr	r2, [pc, #172]	@ (80029ac <TIM_Base_SetConfig+0x134>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <TIM_Base_SetConfig+0xb2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a2a      	ldr	r2, [pc, #168]	@ (80029b0 <TIM_Base_SetConfig+0x138>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00f      	beq.n	800292a <TIM_Base_SetConfig+0xb2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a29      	ldr	r2, [pc, #164]	@ (80029b4 <TIM_Base_SetConfig+0x13c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00b      	beq.n	800292a <TIM_Base_SetConfig+0xb2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a28      	ldr	r2, [pc, #160]	@ (80029b8 <TIM_Base_SetConfig+0x140>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d007      	beq.n	800292a <TIM_Base_SetConfig+0xb2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a27      	ldr	r2, [pc, #156]	@ (80029bc <TIM_Base_SetConfig+0x144>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <TIM_Base_SetConfig+0xb2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a26      	ldr	r2, [pc, #152]	@ (80029c0 <TIM_Base_SetConfig+0x148>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d108      	bne.n	800293c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a0e      	ldr	r2, [pc, #56]	@ (8002998 <TIM_Base_SetConfig+0x120>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d003      	beq.n	800296a <TIM_Base_SetConfig+0xf2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a10      	ldr	r2, [pc, #64]	@ (80029a8 <TIM_Base_SetConfig+0x130>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d103      	bne.n	8002972 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f043 0204 	orr.w	r2, r3, #4
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	601a      	str	r2, [r3, #0]
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40010000 	.word	0x40010000
 800299c:	40000400 	.word	0x40000400
 80029a0:	40000800 	.word	0x40000800
 80029a4:	40000c00 	.word	0x40000c00
 80029a8:	40010400 	.word	0x40010400
 80029ac:	40014000 	.word	0x40014000
 80029b0:	40014400 	.word	0x40014400
 80029b4:	40014800 	.word	0x40014800
 80029b8:	40001800 	.word	0x40001800
 80029bc:	40001c00 	.word	0x40001c00
 80029c0:	40002000 	.word	0x40002000

080029c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e042      	b.n	8002a84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe fbbe 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2224      	movs	r2, #36	@ 0x24
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fa09 	bl	8002e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	@ 0x28
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d175      	bne.n	8002b98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_UART_Transmit+0x2c>
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e06e      	b.n	8002b9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2221      	movs	r2, #33	@ 0x21
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aca:	f7fe fd85 	bl	80015d8 <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ae4:	d108      	bne.n	8002af8 <HAL_UART_Transmit+0x6c>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	e003      	b.n	8002b00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b00:	e02e      	b.n	8002b60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2180      	movs	r1, #128	@ 0x80
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f8df 	bl	8002cd0 <UART_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e03a      	b.n	8002b9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10b      	bne.n	8002b42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e007      	b.n	8002b52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1cb      	bne.n	8002b02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2140      	movs	r1, #64	@ 0x40
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f8ab 	bl	8002cd0 <UART_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e006      	b.n	8002b9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e000      	b.n	8002b9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b98:	2302      	movs	r3, #2
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b08a      	sub	sp, #40	@ 0x28
 8002ba6:	af02      	add	r7, sp, #8
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	603b      	str	r3, [r7, #0]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	f040 8081 	bne.w	8002cc6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_UART_Receive+0x2e>
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e079      	b.n	8002cc8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2222      	movs	r2, #34	@ 0x22
 8002bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fcf6 	bl	80015d8 <HAL_GetTick>
 8002bec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	88fa      	ldrh	r2, [r7, #6]
 8002bf2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	88fa      	ldrh	r2, [r7, #6]
 8002bf8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c02:	d108      	bne.n	8002c16 <HAL_UART_Receive+0x74>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d104      	bne.n	8002c16 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	e003      	b.n	8002c1e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c1e:	e047      	b.n	8002cb0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2200      	movs	r2, #0
 8002c28:	2120      	movs	r1, #32
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f850 	bl	8002cd0 <UART_WaitOnFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e042      	b.n	8002cc8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10c      	bne.n	8002c62 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	e01f      	b.n	8002ca2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c6a:	d007      	beq.n	8002c7c <HAL_UART_Receive+0xda>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <HAL_UART_Receive+0xe8>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e008      	b.n	8002c9c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1b2      	bne.n	8002c20 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
  }
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce0:	e03b      	b.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d037      	beq.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cea:	f7fe fc75 	bl	80015d8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d302      	bcc.n	8002d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e03a      	b.n	8002d7a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d023      	beq.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b80      	cmp	r3, #128	@ 0x80
 8002d16:	d020      	beq.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b40      	cmp	r3, #64	@ 0x40
 8002d1c:	d01d      	beq.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d116      	bne.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f81d 	bl	8002d82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00f      	b.n	8002d7a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4013      	ands	r3, r2
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	bf0c      	ite	eq
 8002d6a:	2301      	moveq	r3, #1
 8002d6c:	2300      	movne	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d0b4      	beq.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b095      	sub	sp, #84	@ 0x54
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	330c      	adds	r3, #12
 8002d90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d94:	e853 3f00 	ldrex	r3, [r3]
 8002d98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	330c      	adds	r3, #12
 8002da8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002daa:	643a      	str	r2, [r7, #64]	@ 0x40
 8002dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002db0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002db2:	e841 2300 	strex	r3, r2, [r1]
 8002db6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1e5      	bne.n	8002d8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3314      	adds	r3, #20
 8002dc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	e853 3f00 	ldrex	r3, [r3]
 8002dcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3314      	adds	r3, #20
 8002ddc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002de0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002de4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002de6:	e841 2300 	strex	r3, r2, [r1]
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1e5      	bne.n	8002dbe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d119      	bne.n	8002e2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	330c      	adds	r3, #12
 8002e00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	e853 3f00 	ldrex	r3, [r3]
 8002e08:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f023 0310 	bic.w	r3, r3, #16
 8002e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	330c      	adds	r3, #12
 8002e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e1a:	61ba      	str	r2, [r7, #24]
 8002e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	6979      	ldr	r1, [r7, #20]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	613b      	str	r3, [r7, #16]
   return(result);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e5      	bne.n	8002dfa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e3c:	bf00      	nop
 8002e3e:	3754      	adds	r7, #84	@ 0x54
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e4c:	b0c0      	sub	sp, #256	@ 0x100
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e64:	68d9      	ldr	r1, [r3, #12]
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	ea40 0301 	orr.w	r3, r0, r1
 8002e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ea0:	f021 010c 	bic.w	r1, r1, #12
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec2:	6999      	ldr	r1, [r3, #24]
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	ea40 0301 	orr.w	r3, r0, r1
 8002ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8003114 <UART_SetConfig+0x2cc>)
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d005      	beq.n	8002ee8 <UART_SetConfig+0xa0>
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8003118 <UART_SetConfig+0x2d0>)
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d104      	bne.n	8002ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ee8:	f7ff fa9e 	bl	8002428 <HAL_RCC_GetPCLK2Freq>
 8002eec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ef0:	e003      	b.n	8002efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ef2:	f7ff fa85 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 8002ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f04:	f040 810c 	bne.w	8003120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	1891      	adds	r1, r2, r2
 8002f20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f22:	415b      	adcs	r3, r3
 8002f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	eb12 0801 	adds.w	r8, r2, r1
 8002f30:	4629      	mov	r1, r5
 8002f32:	eb43 0901 	adc.w	r9, r3, r1
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4a:	4690      	mov	r8, r2
 8002f4c:	4699      	mov	r9, r3
 8002f4e:	4623      	mov	r3, r4
 8002f50:	eb18 0303 	adds.w	r3, r8, r3
 8002f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f58:	462b      	mov	r3, r5
 8002f5a:	eb49 0303 	adc.w	r3, r9, r3
 8002f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f76:	460b      	mov	r3, r1
 8002f78:	18db      	adds	r3, r3, r3
 8002f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	eb42 0303 	adc.w	r3, r2, r3
 8002f82:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f8c:	f7fd f988 	bl	80002a0 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4b61      	ldr	r3, [pc, #388]	@ (800311c <UART_SetConfig+0x2d4>)
 8002f96:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	011c      	lsls	r4, r3, #4
 8002f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	1891      	adds	r1, r2, r2
 8002fb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fb8:	415b      	adcs	r3, r3
 8002fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fe0:	4692      	mov	sl, r2
 8002fe2:	469b      	mov	fp, r3
 8002fe4:	4643      	mov	r3, r8
 8002fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8002fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003004:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800300c:	460b      	mov	r3, r1
 800300e:	18db      	adds	r3, r3, r3
 8003010:	643b      	str	r3, [r7, #64]	@ 0x40
 8003012:	4613      	mov	r3, r2
 8003014:	eb42 0303 	adc.w	r3, r2, r3
 8003018:	647b      	str	r3, [r7, #68]	@ 0x44
 800301a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800301e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003022:	f7fd f93d 	bl	80002a0 <__aeabi_uldivmod>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4611      	mov	r1, r2
 800302c:	4b3b      	ldr	r3, [pc, #236]	@ (800311c <UART_SetConfig+0x2d4>)
 800302e:	fba3 2301 	umull	r2, r3, r3, r1
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2264      	movs	r2, #100	@ 0x64
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	1acb      	subs	r3, r1, r3
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003042:	4b36      	ldr	r3, [pc, #216]	@ (800311c <UART_SetConfig+0x2d4>)
 8003044:	fba3 2302 	umull	r2, r3, r3, r2
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003050:	441c      	add	r4, r3
 8003052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003056:	2200      	movs	r2, #0
 8003058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800305c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003064:	4642      	mov	r2, r8
 8003066:	464b      	mov	r3, r9
 8003068:	1891      	adds	r1, r2, r2
 800306a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800306c:	415b      	adcs	r3, r3
 800306e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003074:	4641      	mov	r1, r8
 8003076:	1851      	adds	r1, r2, r1
 8003078:	6339      	str	r1, [r7, #48]	@ 0x30
 800307a:	4649      	mov	r1, r9
 800307c:	414b      	adcs	r3, r1
 800307e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800308c:	4659      	mov	r1, fp
 800308e:	00cb      	lsls	r3, r1, #3
 8003090:	4651      	mov	r1, sl
 8003092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003096:	4651      	mov	r1, sl
 8003098:	00ca      	lsls	r2, r1, #3
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	4603      	mov	r3, r0
 80030a0:	4642      	mov	r2, r8
 80030a2:	189b      	adds	r3, r3, r2
 80030a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030a8:	464b      	mov	r3, r9
 80030aa:	460a      	mov	r2, r1
 80030ac:	eb42 0303 	adc.w	r3, r2, r3
 80030b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030c8:	460b      	mov	r3, r1
 80030ca:	18db      	adds	r3, r3, r3
 80030cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ce:	4613      	mov	r3, r2
 80030d0:	eb42 0303 	adc.w	r3, r2, r3
 80030d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030de:	f7fd f8df 	bl	80002a0 <__aeabi_uldivmod>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4b0d      	ldr	r3, [pc, #52]	@ (800311c <UART_SetConfig+0x2d4>)
 80030e8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	2164      	movs	r1, #100	@ 0x64
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	3332      	adds	r3, #50	@ 0x32
 80030fa:	4a08      	ldr	r2, [pc, #32]	@ (800311c <UART_SetConfig+0x2d4>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	f003 0207 	and.w	r2, r3, #7
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4422      	add	r2, r4
 800310e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003110:	e106      	b.n	8003320 <UART_SetConfig+0x4d8>
 8003112:	bf00      	nop
 8003114:	40011000 	.word	0x40011000
 8003118:	40011400 	.word	0x40011400
 800311c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003124:	2200      	movs	r2, #0
 8003126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800312a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800312e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003132:	4642      	mov	r2, r8
 8003134:	464b      	mov	r3, r9
 8003136:	1891      	adds	r1, r2, r2
 8003138:	6239      	str	r1, [r7, #32]
 800313a:	415b      	adcs	r3, r3
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
 800313e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003142:	4641      	mov	r1, r8
 8003144:	1854      	adds	r4, r2, r1
 8003146:	4649      	mov	r1, r9
 8003148:	eb43 0501 	adc.w	r5, r3, r1
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	00eb      	lsls	r3, r5, #3
 8003156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800315a:	00e2      	lsls	r2, r4, #3
 800315c:	4614      	mov	r4, r2
 800315e:	461d      	mov	r5, r3
 8003160:	4643      	mov	r3, r8
 8003162:	18e3      	adds	r3, r4, r3
 8003164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003168:	464b      	mov	r3, r9
 800316a:	eb45 0303 	adc.w	r3, r5, r3
 800316e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800317e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800318e:	4629      	mov	r1, r5
 8003190:	008b      	lsls	r3, r1, #2
 8003192:	4621      	mov	r1, r4
 8003194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003198:	4621      	mov	r1, r4
 800319a:	008a      	lsls	r2, r1, #2
 800319c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031a0:	f7fd f87e 	bl	80002a0 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4b60      	ldr	r3, [pc, #384]	@ (800332c <UART_SetConfig+0x4e4>)
 80031aa:	fba3 2302 	umull	r2, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	011c      	lsls	r4, r3, #4
 80031b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031c4:	4642      	mov	r2, r8
 80031c6:	464b      	mov	r3, r9
 80031c8:	1891      	adds	r1, r2, r2
 80031ca:	61b9      	str	r1, [r7, #24]
 80031cc:	415b      	adcs	r3, r3
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d4:	4641      	mov	r1, r8
 80031d6:	1851      	adds	r1, r2, r1
 80031d8:	6139      	str	r1, [r7, #16]
 80031da:	4649      	mov	r1, r9
 80031dc:	414b      	adcs	r3, r1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031ec:	4659      	mov	r1, fp
 80031ee:	00cb      	lsls	r3, r1, #3
 80031f0:	4651      	mov	r1, sl
 80031f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031f6:	4651      	mov	r1, sl
 80031f8:	00ca      	lsls	r2, r1, #3
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	4642      	mov	r2, r8
 8003202:	189b      	adds	r3, r3, r2
 8003204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003208:	464b      	mov	r3, r9
 800320a:	460a      	mov	r2, r1
 800320c:	eb42 0303 	adc.w	r3, r2, r3
 8003210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800321e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800322c:	4649      	mov	r1, r9
 800322e:	008b      	lsls	r3, r1, #2
 8003230:	4641      	mov	r1, r8
 8003232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003236:	4641      	mov	r1, r8
 8003238:	008a      	lsls	r2, r1, #2
 800323a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800323e:	f7fd f82f 	bl	80002a0 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4611      	mov	r1, r2
 8003248:	4b38      	ldr	r3, [pc, #224]	@ (800332c <UART_SetConfig+0x4e4>)
 800324a:	fba3 2301 	umull	r2, r3, r3, r1
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	2264      	movs	r2, #100	@ 0x64
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	1acb      	subs	r3, r1, r3
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	3332      	adds	r3, #50	@ 0x32
 800325c:	4a33      	ldr	r2, [pc, #204]	@ (800332c <UART_SetConfig+0x4e4>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003268:	441c      	add	r4, r3
 800326a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800326e:	2200      	movs	r2, #0
 8003270:	673b      	str	r3, [r7, #112]	@ 0x70
 8003272:	677a      	str	r2, [r7, #116]	@ 0x74
 8003274:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003278:	4642      	mov	r2, r8
 800327a:	464b      	mov	r3, r9
 800327c:	1891      	adds	r1, r2, r2
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	415b      	adcs	r3, r3
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003288:	4641      	mov	r1, r8
 800328a:	1851      	adds	r1, r2, r1
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	4649      	mov	r1, r9
 8003290:	414b      	adcs	r3, r1
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032a0:	4659      	mov	r1, fp
 80032a2:	00cb      	lsls	r3, r1, #3
 80032a4:	4651      	mov	r1, sl
 80032a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032aa:	4651      	mov	r1, sl
 80032ac:	00ca      	lsls	r2, r1, #3
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	4603      	mov	r3, r0
 80032b4:	4642      	mov	r2, r8
 80032b6:	189b      	adds	r3, r3, r2
 80032b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032ba:	464b      	mov	r3, r9
 80032bc:	460a      	mov	r2, r1
 80032be:	eb42 0303 	adc.w	r3, r2, r3
 80032c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80032ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032dc:	4649      	mov	r1, r9
 80032de:	008b      	lsls	r3, r1, #2
 80032e0:	4641      	mov	r1, r8
 80032e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032e6:	4641      	mov	r1, r8
 80032e8:	008a      	lsls	r2, r1, #2
 80032ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032ee:	f7fc ffd7 	bl	80002a0 <__aeabi_uldivmod>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <UART_SetConfig+0x4e4>)
 80032f8:	fba3 1302 	umull	r1, r3, r3, r2
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	2164      	movs	r1, #100	@ 0x64
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	3332      	adds	r3, #50	@ 0x32
 800330a:	4a08      	ldr	r2, [pc, #32]	@ (800332c <UART_SetConfig+0x4e4>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4422      	add	r2, r4
 800331e:	609a      	str	r2, [r3, #8]
}
 8003320:	bf00      	nop
 8003322:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003326:	46bd      	mov	sp, r7
 8003328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332c:	51eb851f 	.word	0x51eb851f

08003330 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f103 0208 	add.w	r2, r3, #8
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f04f 32ff 	mov.w	r2, #4294967295
 8003348:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f103 0208 	add.w	r2, r3, #8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f103 0208 	add.w	r2, r3, #8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	601a      	str	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d103      	bne.n	80033f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e00c      	b.n	800340c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3308      	adds	r3, #8
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e002      	b.n	8003400 <vListInsert+0x2e>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	d2f6      	bcs.n	80033fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6892      	ldr	r2, [r2, #8]
 800345a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6852      	ldr	r2, [r2, #4]
 8003464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	d103      	bne.n	8003478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	1e5a      	subs	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10b      	bne.n	80034c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034c4:	f002 fab8 	bl	8005a38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	68f9      	ldr	r1, [r7, #12]
 80034d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	441a      	add	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	3b01      	subs	r3, #1
 80034f6:	68f9      	ldr	r1, [r7, #12]
 80034f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	441a      	add	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	22ff      	movs	r2, #255	@ 0xff
 8003508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	22ff      	movs	r2, #255	@ 0xff
 8003510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d114      	bne.n	8003544 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01a      	beq.n	8003558 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3310      	adds	r3, #16
 8003526:	4618      	mov	r0, r3
 8003528:	f001 f97a 	bl	8004820 <xTaskRemoveFromEventList>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d012      	beq.n	8003558 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003532:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <xQueueGenericReset+0xd0>)
 8003534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	e009      	b.n	8003558 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3310      	adds	r3, #16
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fef1 	bl	8003330 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3324      	adds	r3, #36	@ 0x24
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff feec 	bl	8003330 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003558:	f002 faa0 	bl	8005a9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800355c:	2301      	movs	r3, #1
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	e000ed04 	.word	0xe000ed04

0800356c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	@ 0x28
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	4613      	mov	r3, r2
 8003578:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	613b      	str	r3, [r7, #16]
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e004      	b.n	80035ae <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	fb02 f303 	mul.w	r3, r2, r3
 80035ac:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3350      	adds	r3, #80	@ 0x50
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 fb62 	bl	8005c7c <pvPortMalloc>
 80035b8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	3350      	adds	r3, #80	@ 0x50
 80035c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035ca:	79fa      	ldrb	r2, [r7, #7]
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f805 	bl	80035e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035dc:	69bb      	ldr	r3, [r7, #24]
	}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d103      	bne.n	8003602 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e002      	b.n	8003608 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003614:	2101      	movs	r1, #1
 8003616:	69b8      	ldr	r0, [r7, #24]
 8003618:	f7ff ff3e 	bl	8003498 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08e      	sub	sp, #56	@ 0x38
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800363a:	2300      	movs	r3, #0
 800363c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <xQueueGenericSend+0x34>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	e7fd      	b.n	800365c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <xQueueGenericSend+0x42>
 8003666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <xQueueGenericSend+0x46>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <xQueueGenericSend+0x48>
 8003672:	2300      	movs	r3, #0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <xQueueGenericSend+0x64>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	e7fd      	b.n	800368c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d103      	bne.n	800369e <xQueueGenericSend+0x72>
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <xQueueGenericSend+0x76>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <xQueueGenericSend+0x78>
 80036a2:	2300      	movs	r3, #0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <xQueueGenericSend+0x94>
	__asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	623b      	str	r3, [r7, #32]
}
 80036ba:	bf00      	nop
 80036bc:	bf00      	nop
 80036be:	e7fd      	b.n	80036bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036c0:	f001 fb22 	bl	8004d08 <xTaskGetSchedulerState>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <xQueueGenericSend+0xa4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <xQueueGenericSend+0xa8>
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <xQueueGenericSend+0xaa>
 80036d4:	2300      	movs	r3, #0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	61fb      	str	r3, [r7, #28]
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	e7fd      	b.n	80036ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036f2:	f002 f9a1 	bl	8005a38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <xQueueGenericSend+0xdc>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d129      	bne.n	800375c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800370e:	f000 fa0d 	bl	8003b2c <prvCopyDataToQueue>
 8003712:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	2b00      	cmp	r3, #0
 800371a:	d010      	beq.n	800373e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800371c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371e:	3324      	adds	r3, #36	@ 0x24
 8003720:	4618      	mov	r0, r3
 8003722:	f001 f87d 	bl	8004820 <xTaskRemoveFromEventList>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800372c:	4b3f      	ldr	r3, [pc, #252]	@ (800382c <xQueueGenericSend+0x200>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	e00a      	b.n	8003754 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800373e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003744:	4b39      	ldr	r3, [pc, #228]	@ (800382c <xQueueGenericSend+0x200>)
 8003746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003754:	f002 f9a2 	bl	8005a9c <vPortExitCritical>
				return pdPASS;
 8003758:	2301      	movs	r3, #1
 800375a:	e063      	b.n	8003824 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d103      	bne.n	800376a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003762:	f002 f99b 	bl	8005a9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003766:	2300      	movs	r3, #0
 8003768:	e05c      	b.n	8003824 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800376a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	4618      	mov	r0, r3
 8003776:	f001 f8b7 	bl	80048e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800377a:	2301      	movs	r3, #1
 800377c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800377e:	f002 f98d 	bl	8005a9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003782:	f000 fd71 	bl	8004268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003786:	f002 f957 	bl	8005a38 <vPortEnterCritical>
 800378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003790:	b25b      	sxtb	r3, r3
 8003792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003796:	d103      	bne.n	80037a0 <xQueueGenericSend+0x174>
 8003798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037a6:	b25b      	sxtb	r3, r3
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d103      	bne.n	80037b6 <xQueueGenericSend+0x18a>
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037b6:	f002 f971 	bl	8005a9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ba:	1d3a      	adds	r2, r7, #4
 80037bc:	f107 0314 	add.w	r3, r7, #20
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 f8a6 	bl	8004914 <xTaskCheckForTimeOut>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d124      	bne.n	8003818 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037d0:	f000 faa4 	bl	8003d1c <prvIsQueueFull>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d018      	beq.n	800380c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	3310      	adds	r3, #16
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 ffca 	bl	800477c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037ea:	f000 fa2f 	bl	8003c4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037ee:	f000 fd49 	bl	8004284 <xTaskResumeAll>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f47f af7c 	bne.w	80036f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80037fa:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <xQueueGenericSend+0x200>)
 80037fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	e772      	b.n	80036f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800380c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800380e:	f000 fa1d 	bl	8003c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003812:	f000 fd37 	bl	8004284 <xTaskResumeAll>
 8003816:	e76c      	b.n	80036f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003818:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800381a:	f000 fa17 	bl	8003c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800381e:	f000 fd31 	bl	8004284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003822:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003824:	4618      	mov	r0, r3
 8003826:	3738      	adds	r7, #56	@ 0x38
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	e000ed04 	.word	0xe000ed04

08003830 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08e      	sub	sp, #56	@ 0x38
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10b      	bne.n	8003860 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800385a:	bf00      	nop
 800385c:	bf00      	nop
 800385e:	e7fd      	b.n	800385c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d103      	bne.n	800386e <xQueueGenericSendFromISR+0x3e>
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <xQueueGenericSendFromISR+0x42>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <xQueueGenericSendFromISR+0x44>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	623b      	str	r3, [r7, #32]
}
 800388a:	bf00      	nop
 800388c:	bf00      	nop
 800388e:	e7fd      	b.n	800388c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d103      	bne.n	800389e <xQueueGenericSendFromISR+0x6e>
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <xQueueGenericSendFromISR+0x72>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <xQueueGenericSendFromISR+0x74>
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	61fb      	str	r3, [r7, #28]
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038c0:	f002 f99a 	bl	8005bf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038c4:	f3ef 8211 	mrs	r2, BASEPRI
 80038c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	61ba      	str	r2, [r7, #24]
 80038da:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038dc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d302      	bcc.n	80038f2 <xQueueGenericSendFromISR+0xc2>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d12c      	bne.n	800394c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003902:	f000 f913 	bl	8003b2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003906:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390e:	d112      	bne.n	8003936 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	2b00      	cmp	r3, #0
 8003916:	d016      	beq.n	8003946 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391a:	3324      	adds	r3, #36	@ 0x24
 800391c:	4618      	mov	r0, r3
 800391e:	f000 ff7f 	bl	8004820 <xTaskRemoveFromEventList>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00e      	beq.n	8003946 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e007      	b.n	8003946 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003936:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800393a:	3301      	adds	r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	b25a      	sxtb	r2, r3
 8003940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003942:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003946:	2301      	movs	r3, #1
 8003948:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800394a:	e001      	b.n	8003950 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800394c:	2300      	movs	r3, #0
 800394e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003952:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800395a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800395c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800395e:	4618      	mov	r0, r3
 8003960:	3738      	adds	r7, #56	@ 0x38
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08c      	sub	sp, #48	@ 0x30
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003974:	2300      	movs	r3, #0
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <xQueueReceive+0x32>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	623b      	str	r3, [r7, #32]
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	e7fd      	b.n	8003996 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d103      	bne.n	80039a8 <xQueueReceive+0x40>
 80039a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <xQueueReceive+0x44>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <xQueueReceive+0x46>
 80039ac:	2300      	movs	r3, #0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <xQueueReceive+0x62>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	61fb      	str	r3, [r7, #28]
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	e7fd      	b.n	80039c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ca:	f001 f99d 	bl	8004d08 <xTaskGetSchedulerState>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <xQueueReceive+0x72>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <xQueueReceive+0x76>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <xQueueReceive+0x78>
 80039de:	2300      	movs	r3, #0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <xQueueReceive+0x94>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	61bb      	str	r3, [r7, #24]
}
 80039f6:	bf00      	nop
 80039f8:	bf00      	nop
 80039fa:	e7fd      	b.n	80039f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039fc:	f002 f81c 	bl	8005a38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01f      	beq.n	8003a4c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a10:	f000 f8f6 	bl	8003c00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	1e5a      	subs	r2, r3, #1
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00f      	beq.n	8003a44 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a26:	3310      	adds	r3, #16
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fef9 	bl	8004820 <xTaskRemoveFromEventList>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a34:	4b3c      	ldr	r3, [pc, #240]	@ (8003b28 <xQueueReceive+0x1c0>)
 8003a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a44:	f002 f82a 	bl	8005a9c <vPortExitCritical>
				return pdPASS;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e069      	b.n	8003b20 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a52:	f002 f823 	bl	8005a9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e062      	b.n	8003b20 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a60:	f107 0310 	add.w	r3, r7, #16
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 ff3f 	bl	80048e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a6e:	f002 f815 	bl	8005a9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a72:	f000 fbf9 	bl	8004268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a76:	f001 ffdf 	bl	8005a38 <vPortEnterCritical>
 8003a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a86:	d103      	bne.n	8003a90 <xQueueReceive+0x128>
 8003a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a96:	b25b      	sxtb	r3, r3
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d103      	bne.n	8003aa6 <xQueueReceive+0x13e>
 8003a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003aa6:	f001 fff9 	bl	8005a9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aaa:	1d3a      	adds	r2, r7, #4
 8003aac:	f107 0310 	add.w	r3, r7, #16
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 ff2e 	bl	8004914 <xTaskCheckForTimeOut>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d123      	bne.n	8003b06 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ac0:	f000 f916 	bl	8003cf0 <prvIsQueueEmpty>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d017      	beq.n	8003afa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003acc:	3324      	adds	r3, #36	@ 0x24
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fe52 	bl	800477c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ad8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ada:	f000 f8b7 	bl	8003c4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ade:	f000 fbd1 	bl	8004284 <xTaskResumeAll>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d189      	bne.n	80039fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b28 <xQueueReceive+0x1c0>)
 8003aea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	e780      	b.n	80039fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003afa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003afc:	f000 f8a6 	bl	8003c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b00:	f000 fbc0 	bl	8004284 <xTaskResumeAll>
 8003b04:	e77a      	b.n	80039fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b08:	f000 f8a0 	bl	8003c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b0c:	f000 fbba 	bl	8004284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b12:	f000 f8ed 	bl	8003cf0 <prvIsQueueEmpty>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f43f af6f 	beq.w	80039fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3730      	adds	r7, #48	@ 0x30
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	e000ed04 	.word	0xe000ed04

08003b2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10d      	bne.n	8003b66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d14d      	bne.n	8003bee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f001 f8f4 	bl	8004d44 <xTaskPriorityDisinherit>
 8003b5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	e043      	b.n	8003bee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d119      	bne.n	8003ba0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6858      	ldr	r0, [r3, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b74:	461a      	mov	r2, r3
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	f002 fcc3 	bl	8006502 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	441a      	add	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d32b      	bcc.n	8003bee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	e026      	b.n	8003bee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68d8      	ldr	r0, [r3, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	f002 fca9 	bl	8006502 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	425b      	negs	r3, r3
 8003bba:	441a      	add	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d207      	bcs.n	8003bdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	425b      	negs	r3, r3
 8003bd6:	441a      	add	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d105      	bne.n	8003bee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003bf6:	697b      	ldr	r3, [r7, #20]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d018      	beq.n	8003c44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	441a      	add	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d303      	bcc.n	8003c34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68d9      	ldr	r1, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6838      	ldr	r0, [r7, #0]
 8003c40:	f002 fc5f 	bl	8006502 <memcpy>
	}
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c54:	f001 fef0 	bl	8005a38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c60:	e011      	b.n	8003c86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d012      	beq.n	8003c90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3324      	adds	r3, #36	@ 0x24
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fdd6 	bl	8004820 <xTaskRemoveFromEventList>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c7a:	f000 feaf 	bl	80049dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	dce9      	bgt.n	8003c62 <prvUnlockQueue+0x16>
 8003c8e:	e000      	b.n	8003c92 <prvUnlockQueue+0x46>
					break;
 8003c90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	22ff      	movs	r2, #255	@ 0xff
 8003c96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003c9a:	f001 feff 	bl	8005a9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c9e:	f001 fecb 	bl	8005a38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ca8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003caa:	e011      	b.n	8003cd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d012      	beq.n	8003cda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3310      	adds	r3, #16
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fdb1 	bl	8004820 <xTaskRemoveFromEventList>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cc4:	f000 fe8a 	bl	80049dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cc8:	7bbb      	ldrb	r3, [r7, #14]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	dce9      	bgt.n	8003cac <prvUnlockQueue+0x60>
 8003cd8:	e000      	b.n	8003cdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	22ff      	movs	r2, #255	@ 0xff
 8003ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003ce4:	f001 feda 	bl	8005a9c <vPortExitCritical>
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cf8:	f001 fe9e 	bl	8005a38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d04:	2301      	movs	r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e001      	b.n	8003d0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d0e:	f001 fec5 	bl	8005a9c <vPortExitCritical>

	return xReturn;
 8003d12:	68fb      	ldr	r3, [r7, #12]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d24:	f001 fe88 	bl	8005a38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d102      	bne.n	8003d3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d34:	2301      	movs	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e001      	b.n	8003d3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d3e:	f001 fead 	bl	8005a9c <vPortExitCritical>

	return xReturn;
 8003d42:	68fb      	ldr	r3, [r7, #12]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	e014      	b.n	8003d86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8003d9c <vQueueAddToRegistry+0x50>)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d68:	490c      	ldr	r1, [pc, #48]	@ (8003d9c <vQueueAddToRegistry+0x50>)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d72:	4a0a      	ldr	r2, [pc, #40]	@ (8003d9c <vQueueAddToRegistry+0x50>)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d7e:	e006      	b.n	8003d8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b07      	cmp	r3, #7
 8003d8a:	d9e7      	bls.n	8003d5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	200002b4 	.word	0x200002b4

08003da0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003db0:	f001 fe42 	bl	8005a38 <vPortEnterCritical>
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d103      	bne.n	8003dca <vQueueWaitForMessageRestricted+0x2a>
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dd0:	b25b      	sxtb	r3, r3
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd6:	d103      	bne.n	8003de0 <vQueueWaitForMessageRestricted+0x40>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003de0:	f001 fe5c 	bl	8005a9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	3324      	adds	r3, #36	@ 0x24
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fce7 	bl	80047c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003dfa:	6978      	ldr	r0, [r7, #20]
 8003dfc:	f7ff ff26 	bl	8003c4c <prvUnlockQueue>
	}
 8003e00:	bf00      	nop
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	@ 0x30
 8003e0c:	af04      	add	r7, sp, #16
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 ff2d 	bl	8005c7c <pvPortMalloc>
 8003e22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00e      	beq.n	8003e48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e2a:	205c      	movs	r0, #92	@ 0x5c
 8003e2c:	f001 ff26 	bl	8005c7c <pvPortMalloc>
 8003e30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e3e:	e005      	b.n	8003e4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e40:	6978      	ldr	r0, [r7, #20]
 8003e42:	f001 ffe3 	bl	8005e0c <vPortFree>
 8003e46:	e001      	b.n	8003e4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d013      	beq.n	8003e7a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	2300      	movs	r3, #0
 8003e56:	9303      	str	r3, [sp, #12]
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	9302      	str	r3, [sp, #8]
 8003e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f80e 	bl	8003e8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e6e:	69f8      	ldr	r0, [r7, #28]
 8003e70:	f000 f89e 	bl	8003fb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e74:	2301      	movs	r3, #1
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	e002      	b.n	8003e80 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e80:	69bb      	ldr	r3, [r7, #24]
	}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b088      	sub	sp, #32
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	21a5      	movs	r1, #165	@ 0xa5
 8003ea4:	f002 fa3b 	bl	800631e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f023 0307 	bic.w	r3, r3, #7
 8003ec0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00b      	beq.n	8003ee4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	617b      	str	r3, [r7, #20]
}
 8003ede:	bf00      	nop
 8003ee0:	bf00      	nop
 8003ee2:	e7fd      	b.n	8003ee0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01f      	beq.n	8003f2a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	e012      	b.n	8003f16 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	7819      	ldrb	r1, [r3, #0]
 8003ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	3334      	adds	r3, #52	@ 0x34
 8003f00:	460a      	mov	r2, r1
 8003f02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d006      	beq.n	8003f1e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	3301      	adds	r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b09      	cmp	r3, #9
 8003f1a:	d9e9      	bls.n	8003ef0 <prvInitialiseNewTask+0x66>
 8003f1c:	e000      	b.n	8003f20 <prvInitialiseNewTask+0x96>
			{
				break;
 8003f1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f28:	e003      	b.n	8003f32 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d901      	bls.n	8003f3c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f38:	2304      	movs	r3, #4
 8003f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f40:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f46:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f50:	3304      	adds	r3, #4
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fa0c 	bl	8003370 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5a:	3318      	adds	r3, #24
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fa07 	bl	8003370 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6a:	f1c3 0205 	rsb	r2, r3, #5
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f76:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f80:	2200      	movs	r2, #0
 8003f82:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	69b8      	ldr	r0, [r7, #24]
 8003f92:	f001 fc23 	bl	80057dc <pxPortInitialiseStack>
 8003f96:	4602      	mov	r2, r0
 8003f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fa8:	bf00      	nop
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fb8:	f001 fd3e 	bl	8005a38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8004070 <prvAddNewTaskToReadyList+0xc0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8004070 <prvAddNewTaskToReadyList+0xc0>)
 8003fc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8004074 <prvAddNewTaskToReadyList+0xc4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fce:	4a29      	ldr	r2, [pc, #164]	@ (8004074 <prvAddNewTaskToReadyList+0xc4>)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fd4:	4b26      	ldr	r3, [pc, #152]	@ (8004070 <prvAddNewTaskToReadyList+0xc0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d110      	bne.n	8003ffe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fdc:	f000 fd22 	bl	8004a24 <prvInitialiseTaskLists>
 8003fe0:	e00d      	b.n	8003ffe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fe2:	4b25      	ldr	r3, [pc, #148]	@ (8004078 <prvAddNewTaskToReadyList+0xc8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fea:	4b22      	ldr	r3, [pc, #136]	@ (8004074 <prvAddNewTaskToReadyList+0xc4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d802      	bhi.n	8003ffe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8004074 <prvAddNewTaskToReadyList+0xc4>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800407c <prvAddNewTaskToReadyList+0xcc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	4a1d      	ldr	r2, [pc, #116]	@ (800407c <prvAddNewTaskToReadyList+0xcc>)
 8004006:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004008:	4b1c      	ldr	r3, [pc, #112]	@ (800407c <prvAddNewTaskToReadyList+0xcc>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004014:	2201      	movs	r2, #1
 8004016:	409a      	lsls	r2, r3
 8004018:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <prvAddNewTaskToReadyList+0xd0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4313      	orrs	r3, r2
 800401e:	4a18      	ldr	r2, [pc, #96]	@ (8004080 <prvAddNewTaskToReadyList+0xd0>)
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4a15      	ldr	r2, [pc, #84]	@ (8004084 <prvAddNewTaskToReadyList+0xd4>)
 8004030:	441a      	add	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f7ff f9a6 	bl	800338a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800403e:	f001 fd2d 	bl	8005a9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004042:	4b0d      	ldr	r3, [pc, #52]	@ (8004078 <prvAddNewTaskToReadyList+0xc8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00e      	beq.n	8004068 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800404a:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <prvAddNewTaskToReadyList+0xc4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	429a      	cmp	r2, r3
 8004056:	d207      	bcs.n	8004068 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <prvAddNewTaskToReadyList+0xd8>)
 800405a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	200003cc 	.word	0x200003cc
 8004074:	200002f4 	.word	0x200002f4
 8004078:	200003d8 	.word	0x200003d8
 800407c:	200003e8 	.word	0x200003e8
 8004080:	200003d4 	.word	0x200003d4
 8004084:	200002f8 	.word	0x200002f8
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d018      	beq.n	80040d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800409e:	4b14      	ldr	r3, [pc, #80]	@ (80040f0 <vTaskDelay+0x64>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <vTaskDelay+0x32>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	60bb      	str	r3, [r7, #8]
}
 80040b8:	bf00      	nop
 80040ba:	bf00      	nop
 80040bc:	e7fd      	b.n	80040ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040be:	f000 f8d3 	bl	8004268 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040c2:	2100      	movs	r1, #0
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f001 f805 	bl	80050d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040ca:	f000 f8db 	bl	8004284 <xTaskResumeAll>
 80040ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d107      	bne.n	80040e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80040d6:	4b07      	ldr	r3, [pc, #28]	@ (80040f4 <vTaskDelay+0x68>)
 80040d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	200003f4 	.word	0x200003f4
 80040f4:	e000ed04 	.word	0xe000ed04

080040f8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <eTaskGetState+0x2a>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60bb      	str	r3, [r7, #8]
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	e7fd      	b.n	800411e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8004122:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <eTaskGetState+0xbc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	429a      	cmp	r2, r3
 800412a:	d102      	bne.n	8004132 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800412c:	2300      	movs	r3, #0
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e03a      	b.n	80041a8 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8004132:	f001 fc81 	bl	8005a38 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800413c:	4b1e      	ldr	r3, [pc, #120]	@ (80041b8 <eTaskGetState+0xc0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8004142:	4b1e      	ldr	r3, [pc, #120]	@ (80041bc <eTaskGetState+0xc4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004148:	f001 fca8 	bl	8005a9c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	429a      	cmp	r2, r3
 8004152:	d003      	beq.n	800415c <eTaskGetState+0x64>
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	429a      	cmp	r2, r3
 800415a:	d102      	bne.n	8004162 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800415c:	2302      	movs	r3, #2
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e022      	b.n	80041a8 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4a16      	ldr	r2, [pc, #88]	@ (80041c0 <eTaskGetState+0xc8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d112      	bne.n	8004190 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10b      	bne.n	800418a <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d102      	bne.n	8004184 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800417e:	2302      	movs	r3, #2
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e011      	b.n	80041a8 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8004184:	2303      	movs	r3, #3
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e00e      	b.n	80041a8 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800418a:	2302      	movs	r3, #2
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e00b      	b.n	80041a8 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	4a0c      	ldr	r2, [pc, #48]	@ (80041c4 <eTaskGetState+0xcc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d002      	beq.n	800419e <eTaskGetState+0xa6>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d102      	bne.n	80041a4 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800419e:	2304      	movs	r3, #4
 80041a0:	77fb      	strb	r3, [r7, #31]
 80041a2:	e001      	b.n	80041a8 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80041a4:	2301      	movs	r3, #1
 80041a6:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80041a8:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80041aa:	4618      	mov	r0, r3
 80041ac:	3720      	adds	r7, #32
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	200002f4 	.word	0x200002f4
 80041b8:	20000384 	.word	0x20000384
 80041bc:	20000388 	.word	0x20000388
 80041c0:	200003b8 	.word	0x200003b8
 80041c4:	200003a0 	.word	0x200003a0

080041c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80041ce:	4b20      	ldr	r3, [pc, #128]	@ (8004250 <vTaskStartScheduler+0x88>)
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	2300      	movs	r3, #0
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	2300      	movs	r3, #0
 80041d8:	2282      	movs	r2, #130	@ 0x82
 80041da:	491e      	ldr	r1, [pc, #120]	@ (8004254 <vTaskStartScheduler+0x8c>)
 80041dc:	481e      	ldr	r0, [pc, #120]	@ (8004258 <vTaskStartScheduler+0x90>)
 80041de:	f7ff fe13 	bl	8003e08 <xTaskCreate>
 80041e2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d102      	bne.n	80041f0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80041ea:	f000 ffd9 	bl	80051a0 <xTimerCreateTimerTask>
 80041ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d118      	bne.n	8004228 <vTaskStartScheduler+0x60>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	60bb      	str	r3, [r7, #8]
}
 8004208:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800420a:	4b14      	ldr	r3, [pc, #80]	@ (800425c <vTaskStartScheduler+0x94>)
 800420c:	f04f 32ff 	mov.w	r2, #4294967295
 8004210:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004212:	4b13      	ldr	r3, [pc, #76]	@ (8004260 <vTaskStartScheduler+0x98>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004218:	4b12      	ldr	r3, [pc, #72]	@ (8004264 <vTaskStartScheduler+0x9c>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800421e:	f7fc f9b7 	bl	8000590 <AppTimerStatsInit>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004222:	f001 fb65 	bl	80058f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004226:	e00f      	b.n	8004248 <vTaskStartScheduler+0x80>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d10b      	bne.n	8004248 <vTaskStartScheduler+0x80>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	607b      	str	r3, [r7, #4]
}
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <vTaskStartScheduler+0x7c>
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	200003f0 	.word	0x200003f0
 8004254:	08007b58 	.word	0x08007b58
 8004258:	080049f5 	.word	0x080049f5
 800425c:	200003ec 	.word	0x200003ec
 8004260:	200003d8 	.word	0x200003d8
 8004264:	200003d0 	.word	0x200003d0

08004268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800426c:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <vTaskSuspendAll+0x18>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3301      	adds	r3, #1
 8004272:	4a03      	ldr	r2, [pc, #12]	@ (8004280 <vTaskSuspendAll+0x18>)
 8004274:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004276:	bf00      	nop
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	200003f4 	.word	0x200003f4

08004284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004292:	4b42      	ldr	r3, [pc, #264]	@ (800439c <xTaskResumeAll+0x118>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	603b      	str	r3, [r7, #0]
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	e7fd      	b.n	80042ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042b2:	f001 fbc1 	bl	8005a38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042b6:	4b39      	ldr	r3, [pc, #228]	@ (800439c <xTaskResumeAll+0x118>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	4a37      	ldr	r2, [pc, #220]	@ (800439c <xTaskResumeAll+0x118>)
 80042be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c0:	4b36      	ldr	r3, [pc, #216]	@ (800439c <xTaskResumeAll+0x118>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d161      	bne.n	800438c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042c8:	4b35      	ldr	r3, [pc, #212]	@ (80043a0 <xTaskResumeAll+0x11c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d05d      	beq.n	800438c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042d0:	e02e      	b.n	8004330 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d2:	4b34      	ldr	r3, [pc, #208]	@ (80043a4 <xTaskResumeAll+0x120>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3318      	adds	r3, #24
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff f8b0 	bl	8003444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3304      	adds	r3, #4
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff f8ab 	bl	8003444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f2:	2201      	movs	r2, #1
 80042f4:	409a      	lsls	r2, r3
 80042f6:	4b2c      	ldr	r3, [pc, #176]	@ (80043a8 <xTaskResumeAll+0x124>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	4a2a      	ldr	r2, [pc, #168]	@ (80043a8 <xTaskResumeAll+0x124>)
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4a27      	ldr	r2, [pc, #156]	@ (80043ac <xTaskResumeAll+0x128>)
 800430e:	441a      	add	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f7ff f837 	bl	800338a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004320:	4b23      	ldr	r3, [pc, #140]	@ (80043b0 <xTaskResumeAll+0x12c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004326:	429a      	cmp	r2, r3
 8004328:	d302      	bcc.n	8004330 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800432a:	4b22      	ldr	r3, [pc, #136]	@ (80043b4 <xTaskResumeAll+0x130>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004330:	4b1c      	ldr	r3, [pc, #112]	@ (80043a4 <xTaskResumeAll+0x120>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1cc      	bne.n	80042d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800433e:	f000 fcc3 	bl	8004cc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004342:	4b1d      	ldr	r3, [pc, #116]	@ (80043b8 <xTaskResumeAll+0x134>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d010      	beq.n	8004370 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800434e:	f000 f8e3 	bl	8004518 <xTaskIncrementTick>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004358:	4b16      	ldr	r3, [pc, #88]	@ (80043b4 <xTaskResumeAll+0x130>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3b01      	subs	r3, #1
 8004362:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f1      	bne.n	800434e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800436a:	4b13      	ldr	r3, [pc, #76]	@ (80043b8 <xTaskResumeAll+0x134>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004370:	4b10      	ldr	r3, [pc, #64]	@ (80043b4 <xTaskResumeAll+0x130>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004378:	2301      	movs	r3, #1
 800437a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800437c:	4b0f      	ldr	r3, [pc, #60]	@ (80043bc <xTaskResumeAll+0x138>)
 800437e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800438c:	f001 fb86 	bl	8005a9c <vPortExitCritical>

	return xAlreadyYielded;
 8004390:	68bb      	ldr	r3, [r7, #8]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200003f4 	.word	0x200003f4
 80043a0:	200003cc 	.word	0x200003cc
 80043a4:	2000038c 	.word	0x2000038c
 80043a8:	200003d4 	.word	0x200003d4
 80043ac:	200002f8 	.word	0x200002f8
 80043b0:	200002f4 	.word	0x200002f4
 80043b4:	200003e0 	.word	0x200003e0
 80043b8:	200003dc 	.word	0x200003dc
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043c6:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <xTaskGetTickCount+0x1c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043cc:	687b      	ldr	r3, [r7, #4]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	200003d0 	.word	0x200003d0

080043e0 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 80043e4:	4b03      	ldr	r3, [pc, #12]	@ (80043f4 <uxTaskGetNumberOfTasks+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	200003cc 	.word	0x200003cc

080043f8 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	2305      	movs	r3, #5
 800440a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800440c:	f7ff ff2c 	bl	8004268 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8004410:	4b3b      	ldr	r3, [pc, #236]	@ (8004500 <uxTaskGetSystemState+0x108>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	d36b      	bcc.n	80044f2 <uxTaskGetSystemState+0xfa>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	3b01      	subs	r3, #1
 800441e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4613      	mov	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	461a      	mov	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1898      	adds	r0, r3, r2
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4a32      	ldr	r2, [pc, #200]	@ (8004504 <uxTaskGetSystemState+0x10c>)
 800443c:	4413      	add	r3, r2
 800443e:	2201      	movs	r2, #1
 8004440:	4619      	mov	r1, r3
 8004442:	f000 fbc3 	bl	8004bcc <prvListTasksWithinSingleList>
 8004446:	4602      	mov	r2, r0
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	4413      	add	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e2      	bne.n	800441a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4613      	mov	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	4a28      	ldr	r2, [pc, #160]	@ (8004508 <uxTaskGetSystemState+0x110>)
 8004466:	6811      	ldr	r1, [r2, #0]
 8004468:	2202      	movs	r2, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fbae 	bl	8004bcc <prvListTasksWithinSingleList>
 8004470:	4602      	mov	r2, r0
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	4413      	add	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4613      	mov	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	461a      	mov	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	4a20      	ldr	r2, [pc, #128]	@ (800450c <uxTaskGetSystemState+0x114>)
 800448a:	6811      	ldr	r1, [r2, #0]
 800448c:	2202      	movs	r2, #2
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fb9c 	bl	8004bcc <prvListTasksWithinSingleList>
 8004494:	4602      	mov	r2, r0
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	4413      	add	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	461a      	mov	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	2204      	movs	r2, #4
 80044ae:	4918      	ldr	r1, [pc, #96]	@ (8004510 <uxTaskGetSystemState+0x118>)
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fb8b 	bl	8004bcc <prvListTasksWithinSingleList>
 80044b6:	4602      	mov	r2, r0
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4413      	add	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4613      	mov	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	461a      	mov	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	2203      	movs	r2, #3
 80044d0:	4910      	ldr	r1, [pc, #64]	@ (8004514 <uxTaskGetSystemState+0x11c>)
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fb7a 	bl	8004bcc <prvListTasksWithinSingleList>
 80044d8:	4602      	mov	r2, r0
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	4413      	add	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <uxTaskGetSystemState+0xfa>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80044e6:	f7fc f85f 	bl	80005a8 <AppTimerStatsValue>
 80044ea:	4603      	mov	r3, r0
 80044ec:	461a      	mov	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80044f2:	f7ff fec7 	bl	8004284 <xTaskResumeAll>

		return uxTask;
 80044f6:	697b      	ldr	r3, [r7, #20]
	}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	200003cc 	.word	0x200003cc
 8004504:	200002f8 	.word	0x200002f8
 8004508:	20000384 	.word	0x20000384
 800450c:	20000388 	.word	0x20000388
 8004510:	200003a0 	.word	0x200003a0
 8004514:	200003b8 	.word	0x200003b8

08004518 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004522:	4b4f      	ldr	r3, [pc, #316]	@ (8004660 <xTaskIncrementTick+0x148>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f040 8089 	bne.w	800463e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800452c:	4b4d      	ldr	r3, [pc, #308]	@ (8004664 <xTaskIncrementTick+0x14c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3301      	adds	r3, #1
 8004532:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004534:	4a4b      	ldr	r2, [pc, #300]	@ (8004664 <xTaskIncrementTick+0x14c>)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d121      	bne.n	8004584 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004540:	4b49      	ldr	r3, [pc, #292]	@ (8004668 <xTaskIncrementTick+0x150>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00b      	beq.n	8004562 <xTaskIncrementTick+0x4a>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	603b      	str	r3, [r7, #0]
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	e7fd      	b.n	800455e <xTaskIncrementTick+0x46>
 8004562:	4b41      	ldr	r3, [pc, #260]	@ (8004668 <xTaskIncrementTick+0x150>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	4b40      	ldr	r3, [pc, #256]	@ (800466c <xTaskIncrementTick+0x154>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a3e      	ldr	r2, [pc, #248]	@ (8004668 <xTaskIncrementTick+0x150>)
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4a3e      	ldr	r2, [pc, #248]	@ (800466c <xTaskIncrementTick+0x154>)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b3e      	ldr	r3, [pc, #248]	@ (8004670 <xTaskIncrementTick+0x158>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3301      	adds	r3, #1
 800457c:	4a3c      	ldr	r2, [pc, #240]	@ (8004670 <xTaskIncrementTick+0x158>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	f000 fba2 	bl	8004cc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004584:	4b3b      	ldr	r3, [pc, #236]	@ (8004674 <xTaskIncrementTick+0x15c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	429a      	cmp	r2, r3
 800458c:	d348      	bcc.n	8004620 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800458e:	4b36      	ldr	r3, [pc, #216]	@ (8004668 <xTaskIncrementTick+0x150>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004598:	4b36      	ldr	r3, [pc, #216]	@ (8004674 <xTaskIncrementTick+0x15c>)
 800459a:	f04f 32ff 	mov.w	r2, #4294967295
 800459e:	601a      	str	r2, [r3, #0]
					break;
 80045a0:	e03e      	b.n	8004620 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045a2:	4b31      	ldr	r3, [pc, #196]	@ (8004668 <xTaskIncrementTick+0x150>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d203      	bcs.n	80045c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004674 <xTaskIncrementTick+0x15c>)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045c0:	e02e      	b.n	8004620 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe ff3c 	bl	8003444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3318      	adds	r3, #24
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe ff33 	bl	8003444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	2201      	movs	r2, #1
 80045e4:	409a      	lsls	r2, r3
 80045e6:	4b24      	ldr	r3, [pc, #144]	@ (8004678 <xTaskIncrementTick+0x160>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	4a22      	ldr	r2, [pc, #136]	@ (8004678 <xTaskIncrementTick+0x160>)
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4a1f      	ldr	r2, [pc, #124]	@ (800467c <xTaskIncrementTick+0x164>)
 80045fe:	441a      	add	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f7fe febf 	bl	800338a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004610:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <xTaskIncrementTick+0x168>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	429a      	cmp	r2, r3
 8004618:	d3b9      	bcc.n	800458e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800461a:	2301      	movs	r3, #1
 800461c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800461e:	e7b6      	b.n	800458e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004620:	4b17      	ldr	r3, [pc, #92]	@ (8004680 <xTaskIncrementTick+0x168>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004626:	4915      	ldr	r1, [pc, #84]	@ (800467c <xTaskIncrementTick+0x164>)
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d907      	bls.n	8004648 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8004638:	2301      	movs	r3, #1
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e004      	b.n	8004648 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800463e:	4b11      	ldr	r3, [pc, #68]	@ (8004684 <xTaskIncrementTick+0x16c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	4a0f      	ldr	r2, [pc, #60]	@ (8004684 <xTaskIncrementTick+0x16c>)
 8004646:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004648:	4b0f      	ldr	r3, [pc, #60]	@ (8004688 <xTaskIncrementTick+0x170>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8004650:	2301      	movs	r3, #1
 8004652:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004654:	697b      	ldr	r3, [r7, #20]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	200003f4 	.word	0x200003f4
 8004664:	200003d0 	.word	0x200003d0
 8004668:	20000384 	.word	0x20000384
 800466c:	20000388 	.word	0x20000388
 8004670:	200003e4 	.word	0x200003e4
 8004674:	200003ec 	.word	0x200003ec
 8004678:	200003d4 	.word	0x200003d4
 800467c:	200002f8 	.word	0x200002f8
 8004680:	200002f4 	.word	0x200002f4
 8004684:	200003dc 	.word	0x200003dc
 8004688:	200003e0 	.word	0x200003e0

0800468c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004692:	4b33      	ldr	r3, [pc, #204]	@ (8004760 <vTaskSwitchContext+0xd4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800469a:	4b32      	ldr	r3, [pc, #200]	@ (8004764 <vTaskSwitchContext+0xd8>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046a0:	e05a      	b.n	8004758 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 80046a2:	4b30      	ldr	r3, [pc, #192]	@ (8004764 <vTaskSwitchContext+0xd8>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80046a8:	f7fb ff7e 	bl	80005a8 <AppTimerStatsValue>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461a      	mov	r2, r3
 80046b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004768 <vTaskSwitchContext+0xdc>)
 80046b2:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80046b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004768 <vTaskSwitchContext+0xdc>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4b2c      	ldr	r3, [pc, #176]	@ (800476c <vTaskSwitchContext+0xe0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d909      	bls.n	80046d4 <vTaskSwitchContext+0x48>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80046c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004770 <vTaskSwitchContext+0xe4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80046c6:	4a28      	ldr	r2, [pc, #160]	@ (8004768 <vTaskSwitchContext+0xdc>)
 80046c8:	6810      	ldr	r0, [r2, #0]
 80046ca:	4a28      	ldr	r2, [pc, #160]	@ (800476c <vTaskSwitchContext+0xe0>)
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	1a82      	subs	r2, r0, r2
 80046d0:	440a      	add	r2, r1
 80046d2:	651a      	str	r2, [r3, #80]	@ 0x50
			ulTaskSwitchedInTime = ulTotalRunTime;
 80046d4:	4b24      	ldr	r3, [pc, #144]	@ (8004768 <vTaskSwitchContext+0xdc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a24      	ldr	r2, [pc, #144]	@ (800476c <vTaskSwitchContext+0xe0>)
 80046da:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046dc:	4b25      	ldr	r3, [pc, #148]	@ (8004774 <vTaskSwitchContext+0xe8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	fab3 f383 	clz	r3, r3
 80046e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046ea:	7afb      	ldrb	r3, [r7, #11]
 80046ec:	f1c3 031f 	rsb	r3, r3, #31
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	4921      	ldr	r1, [pc, #132]	@ (8004778 <vTaskSwitchContext+0xec>)
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10b      	bne.n	800471e <vTaskSwitchContext+0x92>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	607b      	str	r3, [r7, #4]
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	e7fd      	b.n	800471a <vTaskSwitchContext+0x8e>
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4a13      	ldr	r2, [pc, #76]	@ (8004778 <vTaskSwitchContext+0xec>)
 800472a:	4413      	add	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	605a      	str	r2, [r3, #4]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	3308      	adds	r3, #8
 8004740:	429a      	cmp	r2, r3
 8004742:	d104      	bne.n	800474e <vTaskSwitchContext+0xc2>
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4a06      	ldr	r2, [pc, #24]	@ (8004770 <vTaskSwitchContext+0xe4>)
 8004756:	6013      	str	r3, [r2, #0]
}
 8004758:	bf00      	nop
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	200003f4 	.word	0x200003f4
 8004764:	200003e0 	.word	0x200003e0
 8004768:	200003fc 	.word	0x200003fc
 800476c:	200003f8 	.word	0x200003f8
 8004770:	200002f4 	.word	0x200002f4
 8004774:	200003d4 	.word	0x200003d4
 8004778:	200002f8 	.word	0x200002f8

0800477c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	60fb      	str	r3, [r7, #12]
}
 800479e:	bf00      	nop
 80047a0:	bf00      	nop
 80047a2:	e7fd      	b.n	80047a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047a4:	4b07      	ldr	r3, [pc, #28]	@ (80047c4 <vTaskPlaceOnEventList+0x48>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3318      	adds	r3, #24
 80047aa:	4619      	mov	r1, r3
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fe fe10 	bl	80033d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047b2:	2101      	movs	r1, #1
 80047b4:	6838      	ldr	r0, [r7, #0]
 80047b6:	f000 fc8d 	bl	80050d4 <prvAddCurrentTaskToDelayedList>
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	200002f4 	.word	0x200002f4

080047c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10b      	bne.n	80047f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	617b      	str	r3, [r7, #20]
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	e7fd      	b.n	80047ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047f2:	4b0a      	ldr	r3, [pc, #40]	@ (800481c <vTaskPlaceOnEventListRestricted+0x54>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3318      	adds	r3, #24
 80047f8:	4619      	mov	r1, r3
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7fe fdc5 	bl	800338a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	68b8      	ldr	r0, [r7, #8]
 8004810:	f000 fc60 	bl	80050d4 <prvAddCurrentTaskToDelayedList>
	}
 8004814:	bf00      	nop
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	200002f4 	.word	0x200002f4

08004820 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	60fb      	str	r3, [r7, #12]
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	e7fd      	b.n	800484a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	3318      	adds	r3, #24
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe fdf6 	bl	8003444 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004858:	4b1d      	ldr	r3, [pc, #116]	@ (80048d0 <xTaskRemoveFromEventList+0xb0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d11c      	bne.n	800489a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	3304      	adds	r3, #4
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe fded 	bl	8003444 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	2201      	movs	r2, #1
 8004870:	409a      	lsls	r2, r3
 8004872:	4b18      	ldr	r3, [pc, #96]	@ (80048d4 <xTaskRemoveFromEventList+0xb4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4313      	orrs	r3, r2
 8004878:	4a16      	ldr	r2, [pc, #88]	@ (80048d4 <xTaskRemoveFromEventList+0xb4>)
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4a13      	ldr	r2, [pc, #76]	@ (80048d8 <xTaskRemoveFromEventList+0xb8>)
 800488a:	441a      	add	r2, r3
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	3304      	adds	r3, #4
 8004890:	4619      	mov	r1, r3
 8004892:	4610      	mov	r0, r2
 8004894:	f7fe fd79 	bl	800338a <vListInsertEnd>
 8004898:	e005      	b.n	80048a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3318      	adds	r3, #24
 800489e:	4619      	mov	r1, r3
 80048a0:	480e      	ldr	r0, [pc, #56]	@ (80048dc <xTaskRemoveFromEventList+0xbc>)
 80048a2:	f7fe fd72 	bl	800338a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048aa:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <xTaskRemoveFromEventList+0xc0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d905      	bls.n	80048c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048b4:	2301      	movs	r3, #1
 80048b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048b8:	4b0a      	ldr	r3, [pc, #40]	@ (80048e4 <xTaskRemoveFromEventList+0xc4>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e001      	b.n	80048c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80048c4:	697b      	ldr	r3, [r7, #20]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	200003f4 	.word	0x200003f4
 80048d4:	200003d4 	.word	0x200003d4
 80048d8:	200002f8 	.word	0x200002f8
 80048dc:	2000038c 	.word	0x2000038c
 80048e0:	200002f4 	.word	0x200002f4
 80048e4:	200003e0 	.word	0x200003e0

080048e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048f0:	4b06      	ldr	r3, [pc, #24]	@ (800490c <vTaskInternalSetTimeOutState+0x24>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048f8:	4b05      	ldr	r3, [pc, #20]	@ (8004910 <vTaskInternalSetTimeOutState+0x28>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	605a      	str	r2, [r3, #4]
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	200003e4 	.word	0x200003e4
 8004910:	200003d0 	.word	0x200003d0

08004914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10b      	bne.n	800493c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	613b      	str	r3, [r7, #16]
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	e7fd      	b.n	8004938 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	60fb      	str	r3, [r7, #12]
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	e7fd      	b.n	8004956 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800495a:	f001 f86d 	bl	8005a38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800495e:	4b1d      	ldr	r3, [pc, #116]	@ (80049d4 <xTaskCheckForTimeOut+0xc0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d102      	bne.n	800497e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004978:	2300      	movs	r3, #0
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	e023      	b.n	80049c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <xTaskCheckForTimeOut+0xc4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d007      	beq.n	800499a <xTaskCheckForTimeOut+0x86>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	429a      	cmp	r2, r3
 8004992:	d302      	bcc.n	800499a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004994:	2301      	movs	r3, #1
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	e015      	b.n	80049c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d20b      	bcs.n	80049bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	1ad2      	subs	r2, r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ff99 	bl	80048e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	e004      	b.n	80049c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049c2:	2301      	movs	r3, #1
 80049c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049c6:	f001 f869 	bl	8005a9c <vPortExitCritical>

	return xReturn;
 80049ca:	69fb      	ldr	r3, [r7, #28]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3720      	adds	r7, #32
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	200003d0 	.word	0x200003d0
 80049d8:	200003e4 	.word	0x200003e4

080049dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049e0:	4b03      	ldr	r3, [pc, #12]	@ (80049f0 <vTaskMissedYield+0x14>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
}
 80049e6:	bf00      	nop
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	200003e0 	.word	0x200003e0

080049f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049fc:	f000 f852 	bl	8004aa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a00:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <prvIdleTask+0x28>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d9f9      	bls.n	80049fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a08:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <prvIdleTask+0x2c>)
 8004a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a18:	e7f0      	b.n	80049fc <prvIdleTask+0x8>
 8004a1a:	bf00      	nop
 8004a1c:	200002f8 	.word	0x200002f8
 8004a20:	e000ed04 	.word	0xe000ed04

08004a24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	e00c      	b.n	8004a4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4a12      	ldr	r2, [pc, #72]	@ (8004a84 <prvInitialiseTaskLists+0x60>)
 8004a3c:	4413      	add	r3, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe fc76 	bl	8003330 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3301      	adds	r3, #1
 8004a48:	607b      	str	r3, [r7, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d9ef      	bls.n	8004a30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a50:	480d      	ldr	r0, [pc, #52]	@ (8004a88 <prvInitialiseTaskLists+0x64>)
 8004a52:	f7fe fc6d 	bl	8003330 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a56:	480d      	ldr	r0, [pc, #52]	@ (8004a8c <prvInitialiseTaskLists+0x68>)
 8004a58:	f7fe fc6a 	bl	8003330 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a5c:	480c      	ldr	r0, [pc, #48]	@ (8004a90 <prvInitialiseTaskLists+0x6c>)
 8004a5e:	f7fe fc67 	bl	8003330 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a62:	480c      	ldr	r0, [pc, #48]	@ (8004a94 <prvInitialiseTaskLists+0x70>)
 8004a64:	f7fe fc64 	bl	8003330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a68:	480b      	ldr	r0, [pc, #44]	@ (8004a98 <prvInitialiseTaskLists+0x74>)
 8004a6a:	f7fe fc61 	bl	8003330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <prvInitialiseTaskLists+0x78>)
 8004a70:	4a05      	ldr	r2, [pc, #20]	@ (8004a88 <prvInitialiseTaskLists+0x64>)
 8004a72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a74:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa0 <prvInitialiseTaskLists+0x7c>)
 8004a76:	4a05      	ldr	r2, [pc, #20]	@ (8004a8c <prvInitialiseTaskLists+0x68>)
 8004a78:	601a      	str	r2, [r3, #0]
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	200002f8 	.word	0x200002f8
 8004a88:	2000035c 	.word	0x2000035c
 8004a8c:	20000370 	.word	0x20000370
 8004a90:	2000038c 	.word	0x2000038c
 8004a94:	200003a0 	.word	0x200003a0
 8004a98:	200003b8 	.word	0x200003b8
 8004a9c:	20000384 	.word	0x20000384
 8004aa0:	20000388 	.word	0x20000388

08004aa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aaa:	e019      	b.n	8004ae0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004aac:	f000 ffc4 	bl	8005a38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab0:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <prvCheckTasksWaitingTermination+0x50>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fe fcc1 	bl	8003444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8004af8 <prvCheckTasksWaitingTermination+0x54>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8004af8 <prvCheckTasksWaitingTermination+0x54>)
 8004aca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004acc:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <prvCheckTasksWaitingTermination+0x58>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8004afc <prvCheckTasksWaitingTermination+0x58>)
 8004ad4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ad6:	f000 ffe1 	bl	8005a9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f8e4 	bl	8004ca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ae0:	4b06      	ldr	r3, [pc, #24]	@ (8004afc <prvCheckTasksWaitingTermination+0x58>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e1      	bne.n	8004aac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	200003a0 	.word	0x200003a0
 8004af8:	200003cc 	.word	0x200003cc
 8004afc:	200003b4 	.word	0x200003b4

08004b00 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <vTaskGetInfo+0x1a>
 8004b14:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc8 <vTaskGetInfo+0xc8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	e000      	b.n	8004b1c <vTaskGetInfo+0x1c>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	2b05      	cmp	r3, #5
 8004b5a:	d01a      	beq.n	8004b92 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8004b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004bc8 <vTaskGetInfo+0xc8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d103      	bne.n	8004b6e <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	731a      	strb	r2, [r3, #12]
 8004b6c:	e018      	b.n	8004ba0 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d112      	bne.n	8004ba0 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8004b7a:	f7ff fb75 	bl	8004268 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8004b8c:	f7ff fb7a 	bl	8004284 <xTaskResumeAll>
 8004b90:	e006      	b.n	8004ba0 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8004b92:	6978      	ldr	r0, [r7, #20]
 8004b94:	f7ff fab0 	bl	80040f8 <eTaskGetState>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f860 	bl	8004c70 <prvTaskCheckFreeStackSpace>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8004bb8:	e002      	b.n	8004bc0 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	841a      	strh	r2, [r3, #32]
	}
 8004bc0:	bf00      	nop
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	200002f4 	.word	0x200002f4

08004bcc <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08a      	sub	sp, #40	@ 0x28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d03f      	beq.n	8004c66 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d104      	bne.n	8004c0a <prvListTasksWithinSingleList+0x3e>
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	605a      	str	r2, [r3, #4]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	3308      	adds	r3, #8
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d104      	bne.n	8004c36 <prvListTasksWithinSingleList+0x6a>
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8004c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c40:	4613      	mov	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	461a      	mov	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1899      	adds	r1, r3, r2
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	2201      	movs	r2, #1
 8004c52:	6978      	ldr	r0, [r7, #20]
 8004c54:	f7ff ff54 	bl	8004b00 <vTaskGetInfo>
				uxTask++;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d1d5      	bne.n	8004c12 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3728      	adds	r7, #40	@ 0x28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004c7c:	e005      	b.n	8004c8a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3301      	adds	r3, #1
 8004c82:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3301      	adds	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2ba5      	cmp	r3, #165	@ 0xa5
 8004c90:	d0f5      	beq.n	8004c7e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	089b      	lsrs	r3, r3, #2
 8004c96:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	b29b      	uxth	r3, r3
	}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f001 f8a9 	bl	8005e0c <vPortFree>
			vPortFree( pxTCB );
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f001 f8a6 	bl	8005e0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cc0:	bf00      	nop
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cce:	4b0c      	ldr	r3, [pc, #48]	@ (8004d00 <prvResetNextTaskUnblockTime+0x38>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d04 <prvResetNextTaskUnblockTime+0x3c>)
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ce0:	e008      	b.n	8004cf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce2:	4b07      	ldr	r3, [pc, #28]	@ (8004d00 <prvResetNextTaskUnblockTime+0x38>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4a04      	ldr	r2, [pc, #16]	@ (8004d04 <prvResetNextTaskUnblockTime+0x3c>)
 8004cf2:	6013      	str	r3, [r2, #0]
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	20000384 	.word	0x20000384
 8004d04:	200003ec 	.word	0x200003ec

08004d08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <xTaskGetSchedulerState+0x34>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d16:	2301      	movs	r3, #1
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	e008      	b.n	8004d2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d1c:	4b08      	ldr	r3, [pc, #32]	@ (8004d40 <xTaskGetSchedulerState+0x38>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d102      	bne.n	8004d2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d24:	2302      	movs	r3, #2
 8004d26:	607b      	str	r3, [r7, #4]
 8004d28:	e001      	b.n	8004d2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d2e:	687b      	ldr	r3, [r7, #4]
	}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	200003d8 	.word	0x200003d8
 8004d40:	200003f4 	.word	0x200003f4

08004d44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d070      	beq.n	8004e3c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e48 <xTaskPriorityDisinherit+0x104>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d00b      	beq.n	8004d7c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	60fb      	str	r3, [r7, #12]
}
 8004d76:	bf00      	nop
 8004d78:	bf00      	nop
 8004d7a:	e7fd      	b.n	8004d78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	60bb      	str	r3, [r7, #8]
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	e7fd      	b.n	8004d98 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da0:	1e5a      	subs	r2, r3, #1
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d044      	beq.n	8004e3c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d140      	bne.n	8004e3c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe fb40 	bl	8003444 <uxListRemove>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d115      	bne.n	8004df6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dce:	491f      	ldr	r1, [pc, #124]	@ (8004e4c <xTaskPriorityDisinherit+0x108>)
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <xTaskPriorityDisinherit+0xb2>
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	2201      	movs	r2, #1
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	43da      	mvns	r2, r3
 8004dec:	4b18      	ldr	r3, [pc, #96]	@ (8004e50 <xTaskPriorityDisinherit+0x10c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4013      	ands	r3, r2
 8004df2:	4a17      	ldr	r2, [pc, #92]	@ (8004e50 <xTaskPriorityDisinherit+0x10c>)
 8004df4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	f1c3 0205 	rsb	r2, r3, #5
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0e:	2201      	movs	r2, #1
 8004e10:	409a      	lsls	r2, r3
 8004e12:	4b0f      	ldr	r3, [pc, #60]	@ (8004e50 <xTaskPriorityDisinherit+0x10c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	4a0d      	ldr	r2, [pc, #52]	@ (8004e50 <xTaskPriorityDisinherit+0x10c>)
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4a08      	ldr	r2, [pc, #32]	@ (8004e4c <xTaskPriorityDisinherit+0x108>)
 8004e2a:	441a      	add	r2, r3
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f7fe faa9 	bl	800338a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e3c:	697b      	ldr	r3, [r7, #20]
	}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	200002f4 	.word	0x200002f4
 8004e4c:	200002f8 	.word	0x200002f8
 8004e50:	200003d4 	.word	0x200003d4

08004e54 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f001 fb46 	bl	80064f2 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fb f9bc 	bl	80001e4 <strlen>
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	e007      	b.n	8004e80 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4413      	add	r3, r2
 8004e76:	2220      	movs	r2, #32
 8004e78:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d9f4      	bls.n	8004e70 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4413      	add	r3, r2
	}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b089      	sub	sp, #36	@ 0x24
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8004eae:	4b45      	ldr	r3, [pc, #276]	@ (8004fc4 <vTaskList+0x124>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8004eb4:	4b43      	ldr	r3, [pc, #268]	@ (8004fc4 <vTaskList+0x124>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fedb 	bl	8005c7c <pvPortMalloc>
 8004ec6:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d076      	beq.n	8004fbc <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8004ece:	2200      	movs	r2, #0
 8004ed0:	68f9      	ldr	r1, [r7, #12]
 8004ed2:	68b8      	ldr	r0, [r7, #8]
 8004ed4:	f7ff fa90 	bl	80043f8 <uxTaskGetSystemState>
 8004ed8:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e066      	b.n	8004fae <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	461a      	mov	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4413      	add	r3, r2
 8004ef0:	7b1b      	ldrb	r3, [r3, #12]
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d81b      	bhi.n	8004f2e <vTaskList+0x8e>
 8004ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8004efc <vTaskList+0x5c>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f11 	.word	0x08004f11
 8004f00:	08004f17 	.word	0x08004f17
 8004f04:	08004f1d 	.word	0x08004f1d
 8004f08:	08004f23 	.word	0x08004f23
 8004f0c:	08004f29 	.word	0x08004f29
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8004f10:	2358      	movs	r3, #88	@ 0x58
 8004f12:	74fb      	strb	r3, [r7, #19]
										break;
 8004f14:	e00e      	b.n	8004f34 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8004f16:	2352      	movs	r3, #82	@ 0x52
 8004f18:	74fb      	strb	r3, [r7, #19]
										break;
 8004f1a:	e00b      	b.n	8004f34 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8004f1c:	2342      	movs	r3, #66	@ 0x42
 8004f1e:	74fb      	strb	r3, [r7, #19]
										break;
 8004f20:	e008      	b.n	8004f34 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8004f22:	2353      	movs	r3, #83	@ 0x53
 8004f24:	74fb      	strb	r3, [r7, #19]
										break;
 8004f26:	e005      	b.n	8004f34 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8004f28:	2344      	movs	r3, #68	@ 0x44
 8004f2a:	74fb      	strb	r3, [r7, #19]
										break;
 8004f2c:	e002      	b.n	8004f34 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	74fb      	strb	r3, [r7, #19]
										break;
 8004f32:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4413      	add	r3, r2
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ff83 	bl	8004e54 <prvWriteNameToBuffer>
 8004f4e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8004f50:	7cf9      	ldrb	r1, [r7, #19]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4413      	add	r3, r2
 8004f62:	6918      	ldr	r0, [r3, #16]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4613      	mov	r3, r2
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4413      	add	r3, r2
 8004f74:	8c1b      	ldrh	r3, [r3, #32]
 8004f76:	461c      	mov	r4, r3
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	461a      	mov	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4413      	add	r3, r2
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	9400      	str	r4, [sp, #0]
 8004f8e:	4603      	mov	r3, r0
 8004f90:	460a      	mov	r2, r1
 8004f92:	490d      	ldr	r1, [pc, #52]	@ (8004fc8 <vTaskList+0x128>)
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f001 f95f 	bl	8006258 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fb f922 	bl	80001e4 <strlen>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	3301      	adds	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d394      	bcc.n	8004ee0 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8004fb6:	68b8      	ldr	r0, [r7, #8]
 8004fb8:	f000 ff28 	bl	8005e0c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd90      	pop	{r4, r7, pc}
 8004fc4:	200003cc 	.word	0x200003cc
 8004fc8:	08007b60 	.word	0x08007b60

08004fcc <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8004fda:	4b3a      	ldr	r3, [pc, #232]	@ (80050c4 <vTaskGetRunTimeStats+0xf8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8004fe0:	4b38      	ldr	r3, [pc, #224]	@ (80050c4 <vTaskGetRunTimeStats+0xf8>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fe45 	bl	8005c7c <pvPortMalloc>
 8004ff2:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d05f      	beq.n	80050ba <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8004ffa:	f107 030c 	add.w	r3, r7, #12
 8004ffe:	461a      	mov	r2, r3
 8005000:	69b9      	ldr	r1, [r7, #24]
 8005002:	6978      	ldr	r0, [r7, #20]
 8005004:	f7ff f9f8 	bl	80043f8 <uxTaskGetSystemState>
 8005008:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a2e      	ldr	r2, [pc, #184]	@ (80050c8 <vTaskGetRunTimeStats+0xfc>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d04b      	beq.n	80050b4 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800501c:	2300      	movs	r3, #0
 800501e:	61fb      	str	r3, [r7, #28]
 8005020:	e044      	b.n	80050ac <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	461a      	mov	r2, r3
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	4413      	add	r3, r2
 8005032:	699a      	ldr	r2, [r3, #24]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	fbb2 f3f3 	udiv	r3, r2, r3
 800503a:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	4613      	mov	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	461a      	mov	r2, r3
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	4413      	add	r3, r2
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff feff 	bl	8004e54 <prvWriteNameToBuffer>
 8005056:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00e      	beq.n	800507c <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	461a      	mov	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	4413      	add	r3, r2
 800506e:	699a      	ldr	r2, [r3, #24]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4916      	ldr	r1, [pc, #88]	@ (80050cc <vTaskGetRunTimeStats+0x100>)
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f001 f8ef 	bl	8006258 <siprintf>
 800507a:	e00d      	b.n	8005098 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	4613      	mov	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	461a      	mov	r2, r3
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	4413      	add	r3, r2
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	461a      	mov	r2, r3
 8005090:	490f      	ldr	r1, [pc, #60]	@ (80050d0 <vTaskGetRunTimeStats+0x104>)
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 f8e0 	bl	8006258 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7fb f8a3 	bl	80001e4 <strlen>
 800509e:	4602      	mov	r2, r0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4413      	add	r3, r2
 80050a4:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	3301      	adds	r3, #1
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d3b6      	bcc.n	8005022 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80050b4:	6978      	ldr	r0, [r7, #20]
 80050b6:	f000 fea9 	bl	8005e0c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050ba:	bf00      	nop
 80050bc:	3720      	adds	r7, #32
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	200003cc 	.word	0x200003cc
 80050c8:	51eb851f 	.word	0x51eb851f
 80050cc:	08007b70 	.word	0x08007b70
 80050d0:	08007b7c 	.word	0x08007b7c

080050d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050de:	4b29      	ldr	r3, [pc, #164]	@ (8005184 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050e4:	4b28      	ldr	r3, [pc, #160]	@ (8005188 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3304      	adds	r3, #4
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fe f9aa 	bl	8003444 <uxListRemove>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10b      	bne.n	800510e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050f6:	4b24      	ldr	r3, [pc, #144]	@ (8005188 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fc:	2201      	movs	r2, #1
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	43da      	mvns	r2, r3
 8005104:	4b21      	ldr	r3, [pc, #132]	@ (800518c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4013      	ands	r3, r2
 800510a:	4a20      	ldr	r2, [pc, #128]	@ (800518c <prvAddCurrentTaskToDelayedList+0xb8>)
 800510c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d10a      	bne.n	800512c <prvAddCurrentTaskToDelayedList+0x58>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800511c:	4b1a      	ldr	r3, [pc, #104]	@ (8005188 <prvAddCurrentTaskToDelayedList+0xb4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3304      	adds	r3, #4
 8005122:	4619      	mov	r1, r3
 8005124:	481a      	ldr	r0, [pc, #104]	@ (8005190 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005126:	f7fe f930 	bl	800338a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800512a:	e026      	b.n	800517a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005134:	4b14      	ldr	r3, [pc, #80]	@ (8005188 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	429a      	cmp	r2, r3
 8005142:	d209      	bcs.n	8005158 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005144:	4b13      	ldr	r3, [pc, #76]	@ (8005194 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	4b0f      	ldr	r3, [pc, #60]	@ (8005188 <prvAddCurrentTaskToDelayedList+0xb4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3304      	adds	r3, #4
 800514e:	4619      	mov	r1, r3
 8005150:	4610      	mov	r0, r2
 8005152:	f7fe f93e 	bl	80033d2 <vListInsert>
}
 8005156:	e010      	b.n	800517a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005158:	4b0f      	ldr	r3, [pc, #60]	@ (8005198 <prvAddCurrentTaskToDelayedList+0xc4>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	4b0a      	ldr	r3, [pc, #40]	@ (8005188 <prvAddCurrentTaskToDelayedList+0xb4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3304      	adds	r3, #4
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f7fe f934 	bl	80033d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800516a:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <prvAddCurrentTaskToDelayedList+0xc8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	429a      	cmp	r2, r3
 8005172:	d202      	bcs.n	800517a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005174:	4a09      	ldr	r2, [pc, #36]	@ (800519c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6013      	str	r3, [r2, #0]
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	200003d0 	.word	0x200003d0
 8005188:	200002f4 	.word	0x200002f4
 800518c:	200003d4 	.word	0x200003d4
 8005190:	200003b8 	.word	0x200003b8
 8005194:	20000388 	.word	0x20000388
 8005198:	20000384 	.word	0x20000384
 800519c:	200003ec 	.word	0x200003ec

080051a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051aa:	f000 fae1 	bl	8005770 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051ae:	4b12      	ldr	r3, [pc, #72]	@ (80051f8 <xTimerCreateTimerTask+0x58>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80051b6:	4b11      	ldr	r3, [pc, #68]	@ (80051fc <xTimerCreateTimerTask+0x5c>)
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	2302      	movs	r3, #2
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	2300      	movs	r3, #0
 80051c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80051c4:	490e      	ldr	r1, [pc, #56]	@ (8005200 <xTimerCreateTimerTask+0x60>)
 80051c6:	480f      	ldr	r0, [pc, #60]	@ (8005204 <xTimerCreateTimerTask+0x64>)
 80051c8:	f7fe fe1e 	bl	8003e08 <xTaskCreate>
 80051cc:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <xTimerCreateTimerTask+0x4c>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	603b      	str	r3, [r7, #0]
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	e7fd      	b.n	80051e8 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80051ec:	687b      	ldr	r3, [r7, #4]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000430 	.word	0x20000430
 80051fc:	20000434 	.word	0x20000434
 8005200:	08007b88 	.word	0x08007b88
 8005204:	08005341 	.word	0x08005341

08005208 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	@ 0x28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005216:	2300      	movs	r3, #0
 8005218:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xTimerGenericCommand+0x30>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005238:	4b19      	ldr	r3, [pc, #100]	@ (80052a0 <xTimerGenericCommand+0x98>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d02a      	beq.n	8005296 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b05      	cmp	r3, #5
 8005250:	dc18      	bgt.n	8005284 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005252:	f7ff fd59 	bl	8004d08 <xTaskGetSchedulerState>
 8005256:	4603      	mov	r3, r0
 8005258:	2b02      	cmp	r3, #2
 800525a:	d109      	bne.n	8005270 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800525c:	4b10      	ldr	r3, [pc, #64]	@ (80052a0 <xTimerGenericCommand+0x98>)
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	f107 0114 	add.w	r1, r7, #20
 8005264:	2300      	movs	r3, #0
 8005266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005268:	f7fe f9e0 	bl	800362c <xQueueGenericSend>
 800526c:	6278      	str	r0, [r7, #36]	@ 0x24
 800526e:	e012      	b.n	8005296 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005270:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <xTimerGenericCommand+0x98>)
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	f107 0114 	add.w	r1, r7, #20
 8005278:	2300      	movs	r3, #0
 800527a:	2200      	movs	r2, #0
 800527c:	f7fe f9d6 	bl	800362c <xQueueGenericSend>
 8005280:	6278      	str	r0, [r7, #36]	@ 0x24
 8005282:	e008      	b.n	8005296 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005284:	4b06      	ldr	r3, [pc, #24]	@ (80052a0 <xTimerGenericCommand+0x98>)
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	f107 0114 	add.w	r1, r7, #20
 800528c:	2300      	movs	r3, #0
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	f7fe face 	bl	8003830 <xQueueGenericSendFromISR>
 8005294:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005298:	4618      	mov	r0, r3
 800529a:	3728      	adds	r7, #40	@ 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000430 	.word	0x20000430

080052a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ae:	4b23      	ldr	r3, [pc, #140]	@ (800533c <prvProcessExpiredTimer+0x98>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe f8c1 	bl	8003444 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d023      	beq.n	8005318 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	699a      	ldr	r2, [r3, #24]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	18d1      	adds	r1, r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	6978      	ldr	r0, [r7, #20]
 80052de:	f000 f8d5 	bl	800548c <prvInsertTimerInActiveList>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d020      	beq.n	800532a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052e8:	2300      	movs	r3, #0
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	2300      	movs	r3, #0
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	2100      	movs	r1, #0
 80052f2:	6978      	ldr	r0, [r7, #20]
 80052f4:	f7ff ff88 	bl	8005208 <xTimerGenericCommand>
 80052f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d114      	bne.n	800532a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	60fb      	str	r3, [r7, #12]
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	e7fd      	b.n	8005314 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	b2da      	uxtb	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	6978      	ldr	r0, [r7, #20]
 8005330:	4798      	blx	r3
}
 8005332:	bf00      	nop
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000428 	.word	0x20000428

08005340 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005348:	f107 0308 	add.w	r3, r7, #8
 800534c:	4618      	mov	r0, r3
 800534e:	f000 f859 	bl	8005404 <prvGetNextExpireTime>
 8005352:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4619      	mov	r1, r3
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f805 	bl	8005368 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800535e:	f000 f8d7 	bl	8005510 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005362:	bf00      	nop
 8005364:	e7f0      	b.n	8005348 <prvTimerTask+0x8>
	...

08005368 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005372:	f7fe ff79 	bl	8004268 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005376:	f107 0308 	add.w	r3, r7, #8
 800537a:	4618      	mov	r0, r3
 800537c:	f000 f866 	bl	800544c <prvSampleTimeNow>
 8005380:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d130      	bne.n	80053ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <prvProcessTimerOrBlockTask+0x3c>
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	429a      	cmp	r2, r3
 8005394:	d806      	bhi.n	80053a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005396:	f7fe ff75 	bl	8004284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff ff81 	bl	80052a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053a2:	e024      	b.n	80053ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d008      	beq.n	80053bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053aa:	4b13      	ldr	r3, [pc, #76]	@ (80053f8 <prvProcessTimerOrBlockTask+0x90>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <prvProcessTimerOrBlockTask+0x50>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <prvProcessTimerOrBlockTask+0x52>
 80053b8:	2300      	movs	r3, #0
 80053ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053bc:	4b0f      	ldr	r3, [pc, #60]	@ (80053fc <prvProcessTimerOrBlockTask+0x94>)
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	4619      	mov	r1, r3
 80053ca:	f7fe fce9 	bl	8003da0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80053ce:	f7fe ff59 	bl	8004284 <xTaskResumeAll>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80053d8:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <prvProcessTimerOrBlockTask+0x98>)
 80053da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	f3bf 8f6f 	isb	sy
}
 80053e8:	e001      	b.n	80053ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053ea:	f7fe ff4b 	bl	8004284 <xTaskResumeAll>
}
 80053ee:	bf00      	nop
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	2000042c 	.word	0x2000042c
 80053fc:	20000430 	.word	0x20000430
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800540c:	4b0e      	ldr	r3, [pc, #56]	@ (8005448 <prvGetNextExpireTime+0x44>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <prvGetNextExpireTime+0x16>
 8005416:	2201      	movs	r2, #1
 8005418:	e000      	b.n	800541c <prvGetNextExpireTime+0x18>
 800541a:	2200      	movs	r2, #0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005428:	4b07      	ldr	r3, [pc, #28]	@ (8005448 <prvGetNextExpireTime+0x44>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e001      	b.n	8005438 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005438:	68fb      	ldr	r3, [r7, #12]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000428 	.word	0x20000428

0800544c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005454:	f7fe ffb4 	bl	80043c0 <xTaskGetTickCount>
 8005458:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800545a:	4b0b      	ldr	r3, [pc, #44]	@ (8005488 <prvSampleTimeNow+0x3c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	429a      	cmp	r2, r3
 8005462:	d205      	bcs.n	8005470 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005464:	f000 f91e 	bl	80056a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e002      	b.n	8005476 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005476:	4a04      	ldr	r2, [pc, #16]	@ (8005488 <prvSampleTimeNow+0x3c>)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800547c:	68fb      	ldr	r3, [r7, #12]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000438 	.word	0x20000438

0800548c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d812      	bhi.n	80054d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	1ad2      	subs	r2, r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d302      	bcc.n	80054c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054c0:	2301      	movs	r3, #1
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	e01b      	b.n	80054fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054c6:	4b10      	ldr	r3, [pc, #64]	@ (8005508 <prvInsertTimerInActiveList+0x7c>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4619      	mov	r1, r3
 80054d0:	4610      	mov	r0, r2
 80054d2:	f7fd ff7e 	bl	80033d2 <vListInsert>
 80054d6:	e012      	b.n	80054fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d206      	bcs.n	80054ee <prvInsertTimerInActiveList+0x62>
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d302      	bcc.n	80054ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	e007      	b.n	80054fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054ee:	4b07      	ldr	r3, [pc, #28]	@ (800550c <prvInsertTimerInActiveList+0x80>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3304      	adds	r3, #4
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f7fd ff6a 	bl	80033d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054fe:	697b      	ldr	r3, [r7, #20]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	2000042c 	.word	0x2000042c
 800550c:	20000428 	.word	0x20000428

08005510 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08c      	sub	sp, #48	@ 0x30
 8005514:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005516:	e0b2      	b.n	800567e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f2c0 80af 	blt.w	800567e <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	3304      	adds	r3, #4
 8005530:	4618      	mov	r0, r3
 8005532:	f7fd ff87 	bl	8003444 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff ff87 	bl	800544c <prvSampleTimeNow>
 800553e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b09      	cmp	r3, #9
 8005544:	f200 8098 	bhi.w	8005678 <prvProcessReceivedCommands+0x168>
 8005548:	a201      	add	r2, pc, #4	@ (adr r2, 8005550 <prvProcessReceivedCommands+0x40>)
 800554a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554e:	bf00      	nop
 8005550:	08005579 	.word	0x08005579
 8005554:	08005579 	.word	0x08005579
 8005558:	08005579 	.word	0x08005579
 800555c:	080055ef 	.word	0x080055ef
 8005560:	08005603 	.word	0x08005603
 8005564:	0800564f 	.word	0x0800564f
 8005568:	08005579 	.word	0x08005579
 800556c:	08005579 	.word	0x08005579
 8005570:	080055ef 	.word	0x080055ef
 8005574:	08005603 	.word	0x08005603
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	b2da      	uxtb	r2, r3
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	18d1      	adds	r1, r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a3a      	ldr	r2, [r7, #32]
 8005596:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005598:	f7ff ff78 	bl	800548c <prvInsertTimerInActiveList>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d06c      	beq.n	800567c <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d061      	beq.n	800567c <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	441a      	add	r2, r3
 80055c0:	2300      	movs	r3, #0
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	2300      	movs	r3, #0
 80055c6:	2100      	movs	r1, #0
 80055c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055ca:	f7ff fe1d 	bl	8005208 <xTimerGenericCommand>
 80055ce:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d152      	bne.n	800567c <prvProcessReceivedCommands+0x16c>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	61bb      	str	r3, [r7, #24]
}
 80055e8:	bf00      	nop
 80055ea:	bf00      	nop
 80055ec:	e7fd      	b.n	80055ea <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005600:	e03d      	b.n	800567e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	b2da      	uxtb	r2, r3
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10b      	bne.n	800563a <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	617b      	str	r3, [r7, #20]
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	e7fd      	b.n	8005636 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	18d1      	adds	r1, r2, r3
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	6a3a      	ldr	r2, [r7, #32]
 8005646:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005648:	f7ff ff20 	bl	800548c <prvInsertTimerInActiveList>
					break;
 800564c:	e017      	b.n	800567e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800565c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800565e:	f000 fbd5 	bl	8005e0c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005662:	e00c      	b.n	800567e <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800566a:	f023 0301 	bic.w	r3, r3, #1
 800566e:	b2da      	uxtb	r2, r3
 8005670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005672:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005676:	e002      	b.n	800567e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8005678:	bf00      	nop
 800567a:	e000      	b.n	800567e <prvProcessReceivedCommands+0x16e>
					break;
 800567c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800567e:	4b08      	ldr	r3, [pc, #32]	@ (80056a0 <prvProcessReceivedCommands+0x190>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f107 0108 	add.w	r1, r7, #8
 8005686:	2200      	movs	r2, #0
 8005688:	4618      	mov	r0, r3
 800568a:	f7fe f96d 	bl	8003968 <xQueueReceive>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	f47f af41 	bne.w	8005518 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	3728      	adds	r7, #40	@ 0x28
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000430 	.word	0x20000430

080056a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056aa:	e049      	b.n	8005740 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005768 <prvSwitchTimerLists+0xc4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005768 <prvSwitchTimerLists+0xc4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fd febd 	bl	8003444 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d02f      	beq.n	8005740 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4413      	add	r3, r2
 80056e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d90e      	bls.n	8005710 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005768 <prvSwitchTimerLists+0xc4>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3304      	adds	r3, #4
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f7fd fe62 	bl	80033d2 <vListInsert>
 800570e:	e017      	b.n	8005740 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005710:	2300      	movs	r3, #0
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	2300      	movs	r3, #0
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	2100      	movs	r1, #0
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff fd74 	bl	8005208 <xTimerGenericCommand>
 8005720:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10b      	bne.n	8005740 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	603b      	str	r3, [r7, #0]
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005740:	4b09      	ldr	r3, [pc, #36]	@ (8005768 <prvSwitchTimerLists+0xc4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1b0      	bne.n	80056ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800574a:	4b07      	ldr	r3, [pc, #28]	@ (8005768 <prvSwitchTimerLists+0xc4>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005750:	4b06      	ldr	r3, [pc, #24]	@ (800576c <prvSwitchTimerLists+0xc8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a04      	ldr	r2, [pc, #16]	@ (8005768 <prvSwitchTimerLists+0xc4>)
 8005756:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005758:	4a04      	ldr	r2, [pc, #16]	@ (800576c <prvSwitchTimerLists+0xc8>)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	6013      	str	r3, [r2, #0]
}
 800575e:	bf00      	nop
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000428 	.word	0x20000428
 800576c:	2000042c 	.word	0x2000042c

08005770 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005774:	f000 f960 	bl	8005a38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005778:	4b12      	ldr	r3, [pc, #72]	@ (80057c4 <prvCheckForValidListAndQueue+0x54>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d11d      	bne.n	80057bc <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005780:	4811      	ldr	r0, [pc, #68]	@ (80057c8 <prvCheckForValidListAndQueue+0x58>)
 8005782:	f7fd fdd5 	bl	8003330 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005786:	4811      	ldr	r0, [pc, #68]	@ (80057cc <prvCheckForValidListAndQueue+0x5c>)
 8005788:	f7fd fdd2 	bl	8003330 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800578c:	4b10      	ldr	r3, [pc, #64]	@ (80057d0 <prvCheckForValidListAndQueue+0x60>)
 800578e:	4a0e      	ldr	r2, [pc, #56]	@ (80057c8 <prvCheckForValidListAndQueue+0x58>)
 8005790:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005792:	4b10      	ldr	r3, [pc, #64]	@ (80057d4 <prvCheckForValidListAndQueue+0x64>)
 8005794:	4a0d      	ldr	r2, [pc, #52]	@ (80057cc <prvCheckForValidListAndQueue+0x5c>)
 8005796:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005798:	2200      	movs	r2, #0
 800579a:	210c      	movs	r1, #12
 800579c:	200a      	movs	r0, #10
 800579e:	f7fd fee5 	bl	800356c <xQueueGenericCreate>
 80057a2:	4603      	mov	r3, r0
 80057a4:	4a07      	ldr	r2, [pc, #28]	@ (80057c4 <prvCheckForValidListAndQueue+0x54>)
 80057a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057a8:	4b06      	ldr	r3, [pc, #24]	@ (80057c4 <prvCheckForValidListAndQueue+0x54>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057b0:	4b04      	ldr	r3, [pc, #16]	@ (80057c4 <prvCheckForValidListAndQueue+0x54>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4908      	ldr	r1, [pc, #32]	@ (80057d8 <prvCheckForValidListAndQueue+0x68>)
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe fac8 	bl	8003d4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057bc:	f000 f96e 	bl	8005a9c <vPortExitCritical>
}
 80057c0:	bf00      	nop
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20000430 	.word	0x20000430
 80057c8:	20000400 	.word	0x20000400
 80057cc:	20000414 	.word	0x20000414
 80057d0:	20000428 	.word	0x20000428
 80057d4:	2000042c 	.word	0x2000042c
 80057d8:	08007b90 	.word	0x08007b90

080057dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3b04      	subs	r3, #4
 80057ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3b04      	subs	r3, #4
 80057fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f023 0201 	bic.w	r2, r3, #1
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3b04      	subs	r3, #4
 800580a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800580c:	4a0c      	ldr	r2, [pc, #48]	@ (8005840 <pxPortInitialiseStack+0x64>)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3b14      	subs	r3, #20
 8005816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3b04      	subs	r3, #4
 8005822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f06f 0202 	mvn.w	r2, #2
 800582a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3b20      	subs	r3, #32
 8005830:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005832:	68fb      	ldr	r3, [r7, #12]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	08005845 	.word	0x08005845

08005844 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800584a:	2300      	movs	r3, #0
 800584c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800584e:	4b13      	ldr	r3, [pc, #76]	@ (800589c <prvTaskExitError+0x58>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d00b      	beq.n	8005870 <prvTaskExitError+0x2c>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	60fb      	str	r3, [r7, #12]
}
 800586a:	bf00      	nop
 800586c:	bf00      	nop
 800586e:	e7fd      	b.n	800586c <prvTaskExitError+0x28>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	60bb      	str	r3, [r7, #8]
}
 8005882:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005884:	bf00      	nop
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0fc      	beq.n	8005886 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800588c:	bf00      	nop
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	20000014 	.word	0x20000014

080058a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058a0:	4b07      	ldr	r3, [pc, #28]	@ (80058c0 <pxCurrentTCBConst2>)
 80058a2:	6819      	ldr	r1, [r3, #0]
 80058a4:	6808      	ldr	r0, [r1, #0]
 80058a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058aa:	f380 8809 	msr	PSP, r0
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f380 8811 	msr	BASEPRI, r0
 80058ba:	4770      	bx	lr
 80058bc:	f3af 8000 	nop.w

080058c0 <pxCurrentTCBConst2>:
 80058c0:	200002f4 	.word	0x200002f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop

080058c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058c8:	4808      	ldr	r0, [pc, #32]	@ (80058ec <prvPortStartFirstTask+0x24>)
 80058ca:	6800      	ldr	r0, [r0, #0]
 80058cc:	6800      	ldr	r0, [r0, #0]
 80058ce:	f380 8808 	msr	MSP, r0
 80058d2:	f04f 0000 	mov.w	r0, #0
 80058d6:	f380 8814 	msr	CONTROL, r0
 80058da:	b662      	cpsie	i
 80058dc:	b661      	cpsie	f
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	df00      	svc	0
 80058e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058ea:	bf00      	nop
 80058ec:	e000ed08 	.word	0xe000ed08

080058f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058f6:	4b47      	ldr	r3, [pc, #284]	@ (8005a14 <xPortStartScheduler+0x124>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a47      	ldr	r2, [pc, #284]	@ (8005a18 <xPortStartScheduler+0x128>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10b      	bne.n	8005918 <xPortStartScheduler+0x28>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	613b      	str	r3, [r7, #16]
}
 8005912:	bf00      	nop
 8005914:	bf00      	nop
 8005916:	e7fd      	b.n	8005914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005918:	4b3e      	ldr	r3, [pc, #248]	@ (8005a14 <xPortStartScheduler+0x124>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a1c <xPortStartScheduler+0x12c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d10b      	bne.n	800593a <xPortStartScheduler+0x4a>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	60fb      	str	r3, [r7, #12]
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	e7fd      	b.n	8005936 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800593a:	4b39      	ldr	r3, [pc, #228]	@ (8005a20 <xPortStartScheduler+0x130>)
 800593c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	22ff      	movs	r2, #255	@ 0xff
 800594a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800595c:	b2da      	uxtb	r2, r3
 800595e:	4b31      	ldr	r3, [pc, #196]	@ (8005a24 <xPortStartScheduler+0x134>)
 8005960:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005962:	4b31      	ldr	r3, [pc, #196]	@ (8005a28 <xPortStartScheduler+0x138>)
 8005964:	2207      	movs	r2, #7
 8005966:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005968:	e009      	b.n	800597e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800596a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a28 <xPortStartScheduler+0x138>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3b01      	subs	r3, #1
 8005970:	4a2d      	ldr	r2, [pc, #180]	@ (8005a28 <xPortStartScheduler+0x138>)
 8005972:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005986:	2b80      	cmp	r3, #128	@ 0x80
 8005988:	d0ef      	beq.n	800596a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800598a:	4b27      	ldr	r3, [pc, #156]	@ (8005a28 <xPortStartScheduler+0x138>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f1c3 0307 	rsb	r3, r3, #7
 8005992:	2b04      	cmp	r3, #4
 8005994:	d00b      	beq.n	80059ae <xPortStartScheduler+0xbe>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	60bb      	str	r3, [r7, #8]
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	e7fd      	b.n	80059aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005a28 <xPortStartScheduler+0x138>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a28 <xPortStartScheduler+0x138>)
 80059b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a28 <xPortStartScheduler+0x138>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059c0:	4a19      	ldr	r2, [pc, #100]	@ (8005a28 <xPortStartScheduler+0x138>)
 80059c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059cc:	4b17      	ldr	r3, [pc, #92]	@ (8005a2c <xPortStartScheduler+0x13c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a16      	ldr	r2, [pc, #88]	@ (8005a2c <xPortStartScheduler+0x13c>)
 80059d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059d8:	4b14      	ldr	r3, [pc, #80]	@ (8005a2c <xPortStartScheduler+0x13c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a13      	ldr	r2, [pc, #76]	@ (8005a2c <xPortStartScheduler+0x13c>)
 80059de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059e4:	f000 f8da 	bl	8005b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059e8:	4b11      	ldr	r3, [pc, #68]	@ (8005a30 <xPortStartScheduler+0x140>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059ee:	f000 f8f9 	bl	8005be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059f2:	4b10      	ldr	r3, [pc, #64]	@ (8005a34 <xPortStartScheduler+0x144>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005a34 <xPortStartScheduler+0x144>)
 80059f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80059fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059fe:	f7ff ff63 	bl	80058c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a02:	f7fe fe43 	bl	800468c <vTaskSwitchContext>
	prvTaskExitError();
 8005a06:	f7ff ff1d 	bl	8005844 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	e000ed00 	.word	0xe000ed00
 8005a18:	410fc271 	.word	0x410fc271
 8005a1c:	410fc270 	.word	0x410fc270
 8005a20:	e000e400 	.word	0xe000e400
 8005a24:	2000043c 	.word	0x2000043c
 8005a28:	20000440 	.word	0x20000440
 8005a2c:	e000ed20 	.word	0xe000ed20
 8005a30:	20000014 	.word	0x20000014
 8005a34:	e000ef34 	.word	0xe000ef34

08005a38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	607b      	str	r3, [r7, #4]
}
 8005a50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a52:	4b10      	ldr	r3, [pc, #64]	@ (8005a94 <vPortEnterCritical+0x5c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3301      	adds	r3, #1
 8005a58:	4a0e      	ldr	r2, [pc, #56]	@ (8005a94 <vPortEnterCritical+0x5c>)
 8005a5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <vPortEnterCritical+0x5c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d110      	bne.n	8005a86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a64:	4b0c      	ldr	r3, [pc, #48]	@ (8005a98 <vPortEnterCritical+0x60>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	603b      	str	r3, [r7, #0]
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <vPortEnterCritical+0x4a>
	}
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	20000014 	.word	0x20000014
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005aa2:	4b12      	ldr	r3, [pc, #72]	@ (8005aec <vPortExitCritical+0x50>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10b      	bne.n	8005ac2 <vPortExitCritical+0x26>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	607b      	str	r3, [r7, #4]
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	e7fd      	b.n	8005abe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <vPortExitCritical+0x50>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	4a08      	ldr	r2, [pc, #32]	@ (8005aec <vPortExitCritical+0x50>)
 8005aca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005acc:	4b07      	ldr	r3, [pc, #28]	@ (8005aec <vPortExitCritical+0x50>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d105      	bne.n	8005ae0 <vPortExitCritical+0x44>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f383 8811 	msr	BASEPRI, r3
}
 8005ade:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20000014 	.word	0x20000014

08005af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005af0:	f3ef 8009 	mrs	r0, PSP
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	4b15      	ldr	r3, [pc, #84]	@ (8005b50 <pxCurrentTCBConst>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f01e 0f10 	tst.w	lr, #16
 8005b00:	bf08      	it	eq
 8005b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0a:	6010      	str	r0, [r2, #0]
 8005b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b14:	f380 8811 	msr	BASEPRI, r0
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f7fe fdb4 	bl	800468c <vTaskSwitchContext>
 8005b24:	f04f 0000 	mov.w	r0, #0
 8005b28:	f380 8811 	msr	BASEPRI, r0
 8005b2c:	bc09      	pop	{r0, r3}
 8005b2e:	6819      	ldr	r1, [r3, #0]
 8005b30:	6808      	ldr	r0, [r1, #0]
 8005b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b36:	f01e 0f10 	tst.w	lr, #16
 8005b3a:	bf08      	it	eq
 8005b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b40:	f380 8809 	msr	PSP, r0
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	f3af 8000 	nop.w

08005b50 <pxCurrentTCBConst>:
 8005b50:	200002f4 	.word	0x200002f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop

08005b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	607b      	str	r3, [r7, #4]
}
 8005b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b72:	f7fe fcd1 	bl	8004518 <xTaskIncrementTick>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b7c:	4b06      	ldr	r3, [pc, #24]	@ (8005b98 <SysTick_Handler+0x40>)
 8005b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	2300      	movs	r3, #0
 8005b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f383 8811 	msr	BASEPRI, r3
}
 8005b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <vPortSetupTimerInterrupt+0x34>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <vPortSetupTimerInterrupt+0x38>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bac:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd8 <vPortSetupTimerInterrupt+0x3c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bdc <vPortSetupTimerInterrupt+0x40>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	4a09      	ldr	r2, [pc, #36]	@ (8005be0 <vPortSetupTimerInterrupt+0x44>)
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bbe:	4b04      	ldr	r3, [pc, #16]	@ (8005bd0 <vPortSetupTimerInterrupt+0x34>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	e000e010 	.word	0xe000e010
 8005bd4:	e000e018 	.word	0xe000e018
 8005bd8:	20000008 	.word	0x20000008
 8005bdc:	10624dd3 	.word	0x10624dd3
 8005be0:	e000e014 	.word	0xe000e014

08005be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005be4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005bf4 <vPortEnableVFP+0x10>
 8005be8:	6801      	ldr	r1, [r0, #0]
 8005bea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005bee:	6001      	str	r1, [r0, #0]
 8005bf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bf2:	bf00      	nop
 8005bf4:	e000ed88 	.word	0xe000ed88

08005bf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bfe:	f3ef 8305 	mrs	r3, IPSR
 8005c02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b0f      	cmp	r3, #15
 8005c08:	d915      	bls.n	8005c36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c0a:	4a18      	ldr	r2, [pc, #96]	@ (8005c6c <vPortValidateInterruptPriority+0x74>)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c14:	4b16      	ldr	r3, [pc, #88]	@ (8005c70 <vPortValidateInterruptPriority+0x78>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	7afa      	ldrb	r2, [r7, #11]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d20b      	bcs.n	8005c36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	607b      	str	r3, [r7, #4]
}
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	e7fd      	b.n	8005c32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c36:	4b0f      	ldr	r3, [pc, #60]	@ (8005c74 <vPortValidateInterruptPriority+0x7c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c78 <vPortValidateInterruptPriority+0x80>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d90b      	bls.n	8005c5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	603b      	str	r3, [r7, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	e7fd      	b.n	8005c5a <vPortValidateInterruptPriority+0x62>
	}
 8005c5e:	bf00      	nop
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	e000e3f0 	.word	0xe000e3f0
 8005c70:	2000043c 	.word	0x2000043c
 8005c74:	e000ed0c 	.word	0xe000ed0c
 8005c78:	20000440 	.word	0x20000440

08005c7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08a      	sub	sp, #40	@ 0x28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c88:	f7fe faee 	bl	8004268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c8c:	4b5a      	ldr	r3, [pc, #360]	@ (8005df8 <pvPortMalloc+0x17c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c94:	f000 f92e 	bl	8005ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c98:	4b58      	ldr	r3, [pc, #352]	@ (8005dfc <pvPortMalloc+0x180>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f040 8090 	bne.w	8005dc6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01e      	beq.n	8005cea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005cac:	2208      	movs	r2, #8
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d015      	beq.n	8005cea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f023 0307 	bic.w	r3, r3, #7
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00b      	beq.n	8005cea <pvPortMalloc+0x6e>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	617b      	str	r3, [r7, #20]
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	e7fd      	b.n	8005ce6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d06a      	beq.n	8005dc6 <pvPortMalloc+0x14a>
 8005cf0:	4b43      	ldr	r3, [pc, #268]	@ (8005e00 <pvPortMalloc+0x184>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d865      	bhi.n	8005dc6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cfa:	4b42      	ldr	r3, [pc, #264]	@ (8005e04 <pvPortMalloc+0x188>)
 8005cfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cfe:	4b41      	ldr	r3, [pc, #260]	@ (8005e04 <pvPortMalloc+0x188>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d04:	e004      	b.n	8005d10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d903      	bls.n	8005d22 <pvPortMalloc+0xa6>
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f1      	bne.n	8005d06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d22:	4b35      	ldr	r3, [pc, #212]	@ (8005df8 <pvPortMalloc+0x17c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d04c      	beq.n	8005dc6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2208      	movs	r2, #8
 8005d32:	4413      	add	r3, r2
 8005d34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	1ad2      	subs	r2, r2, r3
 8005d46:	2308      	movs	r3, #8
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d920      	bls.n	8005d90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <pvPortMalloc+0xfc>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	613b      	str	r3, [r7, #16]
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	e7fd      	b.n	8005d74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1ad2      	subs	r2, r2, r3
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d8a:	69b8      	ldr	r0, [r7, #24]
 8005d8c:	f000 f914 	bl	8005fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d90:	4b1b      	ldr	r3, [pc, #108]	@ (8005e00 <pvPortMalloc+0x184>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	4a19      	ldr	r2, [pc, #100]	@ (8005e00 <pvPortMalloc+0x184>)
 8005d9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d9e:	4b18      	ldr	r3, [pc, #96]	@ (8005e00 <pvPortMalloc+0x184>)
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b19      	ldr	r3, [pc, #100]	@ (8005e08 <pvPortMalloc+0x18c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d203      	bcs.n	8005db2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005daa:	4b15      	ldr	r3, [pc, #84]	@ (8005e00 <pvPortMalloc+0x184>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a16      	ldr	r2, [pc, #88]	@ (8005e08 <pvPortMalloc+0x18c>)
 8005db0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	4b11      	ldr	r3, [pc, #68]	@ (8005dfc <pvPortMalloc+0x180>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005dc6:	f7fe fa5d 	bl	8004284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <pvPortMalloc+0x170>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60fb      	str	r3, [r7, #12]
}
 8005de6:	bf00      	nop
 8005de8:	bf00      	nop
 8005dea:	e7fd      	b.n	8005de8 <pvPortMalloc+0x16c>
	return pvReturn;
 8005dec:	69fb      	ldr	r3, [r7, #28]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3728      	adds	r7, #40	@ 0x28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	2001304c 	.word	0x2001304c
 8005dfc:	20013058 	.word	0x20013058
 8005e00:	20013050 	.word	0x20013050
 8005e04:	20013044 	.word	0x20013044
 8005e08:	20013054 	.word	0x20013054

08005e0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d04a      	beq.n	8005eb4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e1e:	2308      	movs	r3, #8
 8005e20:	425b      	negs	r3, r3
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4413      	add	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	4b22      	ldr	r3, [pc, #136]	@ (8005ebc <vPortFree+0xb0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4013      	ands	r3, r2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10b      	bne.n	8005e52 <vPortFree+0x46>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	60fb      	str	r3, [r7, #12]
}
 8005e4c:	bf00      	nop
 8005e4e:	bf00      	nop
 8005e50:	e7fd      	b.n	8005e4e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <vPortFree+0x66>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	60bb      	str	r3, [r7, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	e7fd      	b.n	8005e6e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	4b11      	ldr	r3, [pc, #68]	@ (8005ebc <vPortFree+0xb0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d019      	beq.n	8005eb4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d115      	bne.n	8005eb4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ebc <vPortFree+0xb0>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	43db      	mvns	r3, r3
 8005e92:	401a      	ands	r2, r3
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e98:	f7fe f9e6 	bl	8004268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	4b07      	ldr	r3, [pc, #28]	@ (8005ec0 <vPortFree+0xb4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	4a06      	ldr	r2, [pc, #24]	@ (8005ec0 <vPortFree+0xb4>)
 8005ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eaa:	6938      	ldr	r0, [r7, #16]
 8005eac:	f000 f884 	bl	8005fb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005eb0:	f7fe f9e8 	bl	8004284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eb4:	bf00      	nop
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20013058 	.word	0x20013058
 8005ec0:	20013050 	.word	0x20013050

08005ec4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8005ec8:	4b03      	ldr	r3, [pc, #12]	@ (8005ed8 <xPortGetFreeHeapSize+0x14>)
 8005eca:	681b      	ldr	r3, [r3, #0]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	20013050 	.word	0x20013050

08005edc <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8005ee0:	4b03      	ldr	r3, [pc, #12]	@ (8005ef0 <xPortGetMinimumEverFreeHeapSize+0x14>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	20013054 	.word	0x20013054

08005ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005efa:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f00:	4b27      	ldr	r3, [pc, #156]	@ (8005fa0 <prvHeapInit+0xac>)
 8005f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00c      	beq.n	8005f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3307      	adds	r3, #7
 8005f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0307 	bic.w	r3, r3, #7
 8005f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa0 <prvHeapInit+0xac>)
 8005f24:	4413      	add	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa4 <prvHeapInit+0xb0>)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f32:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa4 <prvHeapInit+0xb0>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f40:	2208      	movs	r2, #8
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1a9b      	subs	r3, r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0307 	bic.w	r3, r3, #7
 8005f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a15      	ldr	r2, [pc, #84]	@ (8005fa8 <prvHeapInit+0xb4>)
 8005f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f56:	4b14      	ldr	r3, [pc, #80]	@ (8005fa8 <prvHeapInit+0xb4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f5e:	4b12      	ldr	r3, [pc, #72]	@ (8005fa8 <prvHeapInit+0xb4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	1ad2      	subs	r2, r2, r3
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f74:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <prvHeapInit+0xb4>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	4a0a      	ldr	r2, [pc, #40]	@ (8005fac <prvHeapInit+0xb8>)
 8005f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	4a09      	ldr	r2, [pc, #36]	@ (8005fb0 <prvHeapInit+0xbc>)
 8005f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f8c:	4b09      	ldr	r3, [pc, #36]	@ (8005fb4 <prvHeapInit+0xc0>)
 8005f8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f92:	601a      	str	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	20000444 	.word	0x20000444
 8005fa4:	20013044 	.word	0x20013044
 8005fa8:	2001304c 	.word	0x2001304c
 8005fac:	20013054 	.word	0x20013054
 8005fb0:	20013050 	.word	0x20013050
 8005fb4:	20013058 	.word	0x20013058

08005fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fc0:	4b28      	ldr	r3, [pc, #160]	@ (8006064 <prvInsertBlockIntoFreeList+0xac>)
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e002      	b.n	8005fcc <prvInsertBlockIntoFreeList+0x14>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d8f7      	bhi.n	8005fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d108      	bne.n	8005ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	441a      	add	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	441a      	add	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d118      	bne.n	8006040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4b15      	ldr	r3, [pc, #84]	@ (8006068 <prvInsertBlockIntoFreeList+0xb0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d00d      	beq.n	8006036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	441a      	add	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	e008      	b.n	8006048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006036:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <prvInsertBlockIntoFreeList+0xb0>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	e003      	b.n	8006048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	d002      	beq.n	8006056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20013044 	.word	0x20013044
 8006068:	2001304c 	.word	0x2001304c

0800606c <std>:
 800606c:	2300      	movs	r3, #0
 800606e:	b510      	push	{r4, lr}
 8006070:	4604      	mov	r4, r0
 8006072:	e9c0 3300 	strd	r3, r3, [r0]
 8006076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800607a:	6083      	str	r3, [r0, #8]
 800607c:	8181      	strh	r1, [r0, #12]
 800607e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006080:	81c2      	strh	r2, [r0, #14]
 8006082:	6183      	str	r3, [r0, #24]
 8006084:	4619      	mov	r1, r3
 8006086:	2208      	movs	r2, #8
 8006088:	305c      	adds	r0, #92	@ 0x5c
 800608a:	f000 f948 	bl	800631e <memset>
 800608e:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <std+0x58>)
 8006090:	6263      	str	r3, [r4, #36]	@ 0x24
 8006092:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <std+0x5c>)
 8006094:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006096:	4b0d      	ldr	r3, [pc, #52]	@ (80060cc <std+0x60>)
 8006098:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800609a:	4b0d      	ldr	r3, [pc, #52]	@ (80060d0 <std+0x64>)
 800609c:	6323      	str	r3, [r4, #48]	@ 0x30
 800609e:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <std+0x68>)
 80060a0:	6224      	str	r4, [r4, #32]
 80060a2:	429c      	cmp	r4, r3
 80060a4:	d006      	beq.n	80060b4 <std+0x48>
 80060a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060aa:	4294      	cmp	r4, r2
 80060ac:	d002      	beq.n	80060b4 <std+0x48>
 80060ae:	33d0      	adds	r3, #208	@ 0xd0
 80060b0:	429c      	cmp	r4, r3
 80060b2:	d105      	bne.n	80060c0 <std+0x54>
 80060b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060bc:	f000 ba16 	b.w	80064ec <__retarget_lock_init_recursive>
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	bf00      	nop
 80060c4:	08006299 	.word	0x08006299
 80060c8:	080062bb 	.word	0x080062bb
 80060cc:	080062f3 	.word	0x080062f3
 80060d0:	08006317 	.word	0x08006317
 80060d4:	2001305c 	.word	0x2001305c

080060d8 <stdio_exit_handler>:
 80060d8:	4a02      	ldr	r2, [pc, #8]	@ (80060e4 <stdio_exit_handler+0xc>)
 80060da:	4903      	ldr	r1, [pc, #12]	@ (80060e8 <stdio_exit_handler+0x10>)
 80060dc:	4803      	ldr	r0, [pc, #12]	@ (80060ec <stdio_exit_handler+0x14>)
 80060de:	f000 b869 	b.w	80061b4 <_fwalk_sglue>
 80060e2:	bf00      	nop
 80060e4:	20000018 	.word	0x20000018
 80060e8:	08006e31 	.word	0x08006e31
 80060ec:	20000028 	.word	0x20000028

080060f0 <cleanup_stdio>:
 80060f0:	6841      	ldr	r1, [r0, #4]
 80060f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006124 <cleanup_stdio+0x34>)
 80060f4:	4299      	cmp	r1, r3
 80060f6:	b510      	push	{r4, lr}
 80060f8:	4604      	mov	r4, r0
 80060fa:	d001      	beq.n	8006100 <cleanup_stdio+0x10>
 80060fc:	f000 fe98 	bl	8006e30 <_fflush_r>
 8006100:	68a1      	ldr	r1, [r4, #8]
 8006102:	4b09      	ldr	r3, [pc, #36]	@ (8006128 <cleanup_stdio+0x38>)
 8006104:	4299      	cmp	r1, r3
 8006106:	d002      	beq.n	800610e <cleanup_stdio+0x1e>
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fe91 	bl	8006e30 <_fflush_r>
 800610e:	68e1      	ldr	r1, [r4, #12]
 8006110:	4b06      	ldr	r3, [pc, #24]	@ (800612c <cleanup_stdio+0x3c>)
 8006112:	4299      	cmp	r1, r3
 8006114:	d004      	beq.n	8006120 <cleanup_stdio+0x30>
 8006116:	4620      	mov	r0, r4
 8006118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800611c:	f000 be88 	b.w	8006e30 <_fflush_r>
 8006120:	bd10      	pop	{r4, pc}
 8006122:	bf00      	nop
 8006124:	2001305c 	.word	0x2001305c
 8006128:	200130c4 	.word	0x200130c4
 800612c:	2001312c 	.word	0x2001312c

08006130 <global_stdio_init.part.0>:
 8006130:	b510      	push	{r4, lr}
 8006132:	4b0b      	ldr	r3, [pc, #44]	@ (8006160 <global_stdio_init.part.0+0x30>)
 8006134:	4c0b      	ldr	r4, [pc, #44]	@ (8006164 <global_stdio_init.part.0+0x34>)
 8006136:	4a0c      	ldr	r2, [pc, #48]	@ (8006168 <global_stdio_init.part.0+0x38>)
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	4620      	mov	r0, r4
 800613c:	2200      	movs	r2, #0
 800613e:	2104      	movs	r1, #4
 8006140:	f7ff ff94 	bl	800606c <std>
 8006144:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006148:	2201      	movs	r2, #1
 800614a:	2109      	movs	r1, #9
 800614c:	f7ff ff8e 	bl	800606c <std>
 8006150:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006154:	2202      	movs	r2, #2
 8006156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800615a:	2112      	movs	r1, #18
 800615c:	f7ff bf86 	b.w	800606c <std>
 8006160:	20013194 	.word	0x20013194
 8006164:	2001305c 	.word	0x2001305c
 8006168:	080060d9 	.word	0x080060d9

0800616c <__sfp_lock_acquire>:
 800616c:	4801      	ldr	r0, [pc, #4]	@ (8006174 <__sfp_lock_acquire+0x8>)
 800616e:	f000 b9be 	b.w	80064ee <__retarget_lock_acquire_recursive>
 8006172:	bf00      	nop
 8006174:	2001319d 	.word	0x2001319d

08006178 <__sfp_lock_release>:
 8006178:	4801      	ldr	r0, [pc, #4]	@ (8006180 <__sfp_lock_release+0x8>)
 800617a:	f000 b9b9 	b.w	80064f0 <__retarget_lock_release_recursive>
 800617e:	bf00      	nop
 8006180:	2001319d 	.word	0x2001319d

08006184 <__sinit>:
 8006184:	b510      	push	{r4, lr}
 8006186:	4604      	mov	r4, r0
 8006188:	f7ff fff0 	bl	800616c <__sfp_lock_acquire>
 800618c:	6a23      	ldr	r3, [r4, #32]
 800618e:	b11b      	cbz	r3, 8006198 <__sinit+0x14>
 8006190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006194:	f7ff bff0 	b.w	8006178 <__sfp_lock_release>
 8006198:	4b04      	ldr	r3, [pc, #16]	@ (80061ac <__sinit+0x28>)
 800619a:	6223      	str	r3, [r4, #32]
 800619c:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <__sinit+0x2c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1f5      	bne.n	8006190 <__sinit+0xc>
 80061a4:	f7ff ffc4 	bl	8006130 <global_stdio_init.part.0>
 80061a8:	e7f2      	b.n	8006190 <__sinit+0xc>
 80061aa:	bf00      	nop
 80061ac:	080060f1 	.word	0x080060f1
 80061b0:	20013194 	.word	0x20013194

080061b4 <_fwalk_sglue>:
 80061b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b8:	4607      	mov	r7, r0
 80061ba:	4688      	mov	r8, r1
 80061bc:	4614      	mov	r4, r2
 80061be:	2600      	movs	r6, #0
 80061c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061c4:	f1b9 0901 	subs.w	r9, r9, #1
 80061c8:	d505      	bpl.n	80061d6 <_fwalk_sglue+0x22>
 80061ca:	6824      	ldr	r4, [r4, #0]
 80061cc:	2c00      	cmp	r4, #0
 80061ce:	d1f7      	bne.n	80061c0 <_fwalk_sglue+0xc>
 80061d0:	4630      	mov	r0, r6
 80061d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061d6:	89ab      	ldrh	r3, [r5, #12]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d907      	bls.n	80061ec <_fwalk_sglue+0x38>
 80061dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061e0:	3301      	adds	r3, #1
 80061e2:	d003      	beq.n	80061ec <_fwalk_sglue+0x38>
 80061e4:	4629      	mov	r1, r5
 80061e6:	4638      	mov	r0, r7
 80061e8:	47c0      	blx	r8
 80061ea:	4306      	orrs	r6, r0
 80061ec:	3568      	adds	r5, #104	@ 0x68
 80061ee:	e7e9      	b.n	80061c4 <_fwalk_sglue+0x10>

080061f0 <sniprintf>:
 80061f0:	b40c      	push	{r2, r3}
 80061f2:	b530      	push	{r4, r5, lr}
 80061f4:	4b17      	ldr	r3, [pc, #92]	@ (8006254 <sniprintf+0x64>)
 80061f6:	1e0c      	subs	r4, r1, #0
 80061f8:	681d      	ldr	r5, [r3, #0]
 80061fa:	b09d      	sub	sp, #116	@ 0x74
 80061fc:	da08      	bge.n	8006210 <sniprintf+0x20>
 80061fe:	238b      	movs	r3, #139	@ 0x8b
 8006200:	602b      	str	r3, [r5, #0]
 8006202:	f04f 30ff 	mov.w	r0, #4294967295
 8006206:	b01d      	add	sp, #116	@ 0x74
 8006208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800620c:	b002      	add	sp, #8
 800620e:	4770      	bx	lr
 8006210:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006214:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006218:	bf14      	ite	ne
 800621a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800621e:	4623      	moveq	r3, r4
 8006220:	9304      	str	r3, [sp, #16]
 8006222:	9307      	str	r3, [sp, #28]
 8006224:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006228:	9002      	str	r0, [sp, #8]
 800622a:	9006      	str	r0, [sp, #24]
 800622c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006230:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006232:	ab21      	add	r3, sp, #132	@ 0x84
 8006234:	a902      	add	r1, sp, #8
 8006236:	4628      	mov	r0, r5
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	f000 faeb 	bl	8006814 <_svfiprintf_r>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	bfbc      	itt	lt
 8006242:	238b      	movlt	r3, #139	@ 0x8b
 8006244:	602b      	strlt	r3, [r5, #0]
 8006246:	2c00      	cmp	r4, #0
 8006248:	d0dd      	beq.n	8006206 <sniprintf+0x16>
 800624a:	9b02      	ldr	r3, [sp, #8]
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	e7d9      	b.n	8006206 <sniprintf+0x16>
 8006252:	bf00      	nop
 8006254:	20000024 	.word	0x20000024

08006258 <siprintf>:
 8006258:	b40e      	push	{r1, r2, r3}
 800625a:	b500      	push	{lr}
 800625c:	b09c      	sub	sp, #112	@ 0x70
 800625e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006260:	9002      	str	r0, [sp, #8]
 8006262:	9006      	str	r0, [sp, #24]
 8006264:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006268:	4809      	ldr	r0, [pc, #36]	@ (8006290 <siprintf+0x38>)
 800626a:	9107      	str	r1, [sp, #28]
 800626c:	9104      	str	r1, [sp, #16]
 800626e:	4909      	ldr	r1, [pc, #36]	@ (8006294 <siprintf+0x3c>)
 8006270:	f853 2b04 	ldr.w	r2, [r3], #4
 8006274:	9105      	str	r1, [sp, #20]
 8006276:	6800      	ldr	r0, [r0, #0]
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	a902      	add	r1, sp, #8
 800627c:	f000 faca 	bl	8006814 <_svfiprintf_r>
 8006280:	9b02      	ldr	r3, [sp, #8]
 8006282:	2200      	movs	r2, #0
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	b01c      	add	sp, #112	@ 0x70
 8006288:	f85d eb04 	ldr.w	lr, [sp], #4
 800628c:	b003      	add	sp, #12
 800628e:	4770      	bx	lr
 8006290:	20000024 	.word	0x20000024
 8006294:	ffff0208 	.word	0xffff0208

08006298 <__sread>:
 8006298:	b510      	push	{r4, lr}
 800629a:	460c      	mov	r4, r1
 800629c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a0:	f000 f8d6 	bl	8006450 <_read_r>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	bfab      	itete	ge
 80062a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062aa:	89a3      	ldrhlt	r3, [r4, #12]
 80062ac:	181b      	addge	r3, r3, r0
 80062ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062b2:	bfac      	ite	ge
 80062b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062b6:	81a3      	strhlt	r3, [r4, #12]
 80062b8:	bd10      	pop	{r4, pc}

080062ba <__swrite>:
 80062ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062be:	461f      	mov	r7, r3
 80062c0:	898b      	ldrh	r3, [r1, #12]
 80062c2:	05db      	lsls	r3, r3, #23
 80062c4:	4605      	mov	r5, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	4616      	mov	r6, r2
 80062ca:	d505      	bpl.n	80062d8 <__swrite+0x1e>
 80062cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d0:	2302      	movs	r3, #2
 80062d2:	2200      	movs	r2, #0
 80062d4:	f000 f8aa 	bl	800642c <_lseek_r>
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	4632      	mov	r2, r6
 80062e6:	463b      	mov	r3, r7
 80062e8:	4628      	mov	r0, r5
 80062ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ee:	f000 b8c1 	b.w	8006474 <_write_r>

080062f2 <__sseek>:
 80062f2:	b510      	push	{r4, lr}
 80062f4:	460c      	mov	r4, r1
 80062f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fa:	f000 f897 	bl	800642c <_lseek_r>
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	bf15      	itete	ne
 8006304:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800630a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800630e:	81a3      	strheq	r3, [r4, #12]
 8006310:	bf18      	it	ne
 8006312:	81a3      	strhne	r3, [r4, #12]
 8006314:	bd10      	pop	{r4, pc}

08006316 <__sclose>:
 8006316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800631a:	f000 b877 	b.w	800640c <_close_r>

0800631e <memset>:
 800631e:	4402      	add	r2, r0
 8006320:	4603      	mov	r3, r0
 8006322:	4293      	cmp	r3, r2
 8006324:	d100      	bne.n	8006328 <memset+0xa>
 8006326:	4770      	bx	lr
 8006328:	f803 1b01 	strb.w	r1, [r3], #1
 800632c:	e7f9      	b.n	8006322 <memset+0x4>

0800632e <strncpy>:
 800632e:	b510      	push	{r4, lr}
 8006330:	3901      	subs	r1, #1
 8006332:	4603      	mov	r3, r0
 8006334:	b132      	cbz	r2, 8006344 <strncpy+0x16>
 8006336:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800633a:	f803 4b01 	strb.w	r4, [r3], #1
 800633e:	3a01      	subs	r2, #1
 8006340:	2c00      	cmp	r4, #0
 8006342:	d1f7      	bne.n	8006334 <strncpy+0x6>
 8006344:	441a      	add	r2, r3
 8006346:	2100      	movs	r1, #0
 8006348:	4293      	cmp	r3, r2
 800634a:	d100      	bne.n	800634e <strncpy+0x20>
 800634c:	bd10      	pop	{r4, pc}
 800634e:	f803 1b01 	strb.w	r1, [r3], #1
 8006352:	e7f9      	b.n	8006348 <strncpy+0x1a>

08006354 <strtok>:
 8006354:	4b16      	ldr	r3, [pc, #88]	@ (80063b0 <strtok+0x5c>)
 8006356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800635a:	681f      	ldr	r7, [r3, #0]
 800635c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800635e:	4605      	mov	r5, r0
 8006360:	460e      	mov	r6, r1
 8006362:	b9ec      	cbnz	r4, 80063a0 <strtok+0x4c>
 8006364:	2050      	movs	r0, #80	@ 0x50
 8006366:	f000 f943 	bl	80065f0 <malloc>
 800636a:	4602      	mov	r2, r0
 800636c:	6478      	str	r0, [r7, #68]	@ 0x44
 800636e:	b920      	cbnz	r0, 800637a <strtok+0x26>
 8006370:	4b10      	ldr	r3, [pc, #64]	@ (80063b4 <strtok+0x60>)
 8006372:	4811      	ldr	r0, [pc, #68]	@ (80063b8 <strtok+0x64>)
 8006374:	215b      	movs	r1, #91	@ 0x5b
 8006376:	f000 f8d3 	bl	8006520 <__assert_func>
 800637a:	e9c0 4400 	strd	r4, r4, [r0]
 800637e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006382:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006386:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800638a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800638e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006392:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006396:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800639a:	6184      	str	r4, [r0, #24]
 800639c:	7704      	strb	r4, [r0, #28]
 800639e:	6244      	str	r4, [r0, #36]	@ 0x24
 80063a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063a2:	4631      	mov	r1, r6
 80063a4:	4628      	mov	r0, r5
 80063a6:	2301      	movs	r3, #1
 80063a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ac:	f000 b806 	b.w	80063bc <__strtok_r>
 80063b0:	20000024 	.word	0x20000024
 80063b4:	08007c10 	.word	0x08007c10
 80063b8:	08007c27 	.word	0x08007c27

080063bc <__strtok_r>:
 80063bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063be:	4604      	mov	r4, r0
 80063c0:	b908      	cbnz	r0, 80063c6 <__strtok_r+0xa>
 80063c2:	6814      	ldr	r4, [r2, #0]
 80063c4:	b144      	cbz	r4, 80063d8 <__strtok_r+0x1c>
 80063c6:	4620      	mov	r0, r4
 80063c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80063cc:	460f      	mov	r7, r1
 80063ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 80063d2:	b91e      	cbnz	r6, 80063dc <__strtok_r+0x20>
 80063d4:	b965      	cbnz	r5, 80063f0 <__strtok_r+0x34>
 80063d6:	6015      	str	r5, [r2, #0]
 80063d8:	2000      	movs	r0, #0
 80063da:	e005      	b.n	80063e8 <__strtok_r+0x2c>
 80063dc:	42b5      	cmp	r5, r6
 80063de:	d1f6      	bne.n	80063ce <__strtok_r+0x12>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f0      	bne.n	80063c6 <__strtok_r+0xa>
 80063e4:	6014      	str	r4, [r2, #0]
 80063e6:	7003      	strb	r3, [r0, #0]
 80063e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ea:	461c      	mov	r4, r3
 80063ec:	e00c      	b.n	8006408 <__strtok_r+0x4c>
 80063ee:	b915      	cbnz	r5, 80063f6 <__strtok_r+0x3a>
 80063f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80063f4:	460e      	mov	r6, r1
 80063f6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80063fa:	42ab      	cmp	r3, r5
 80063fc:	d1f7      	bne.n	80063ee <__strtok_r+0x32>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0f3      	beq.n	80063ea <__strtok_r+0x2e>
 8006402:	2300      	movs	r3, #0
 8006404:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006408:	6014      	str	r4, [r2, #0]
 800640a:	e7ed      	b.n	80063e8 <__strtok_r+0x2c>

0800640c <_close_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4d06      	ldr	r5, [pc, #24]	@ (8006428 <_close_r+0x1c>)
 8006410:	2300      	movs	r3, #0
 8006412:	4604      	mov	r4, r0
 8006414:	4608      	mov	r0, r1
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	f7fb f802 	bl	8001420 <_close>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_close_r+0x1a>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_close_r+0x1a>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	20013198 	.word	0x20013198

0800642c <_lseek_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d07      	ldr	r5, [pc, #28]	@ (800644c <_lseek_r+0x20>)
 8006430:	4604      	mov	r4, r0
 8006432:	4608      	mov	r0, r1
 8006434:	4611      	mov	r1, r2
 8006436:	2200      	movs	r2, #0
 8006438:	602a      	str	r2, [r5, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	f7fb f817 	bl	800146e <_lseek>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_lseek_r+0x1e>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b103      	cbz	r3, 800644a <_lseek_r+0x1e>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	20013198 	.word	0x20013198

08006450 <_read_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d07      	ldr	r5, [pc, #28]	@ (8006470 <_read_r+0x20>)
 8006454:	4604      	mov	r4, r0
 8006456:	4608      	mov	r0, r1
 8006458:	4611      	mov	r1, r2
 800645a:	2200      	movs	r2, #0
 800645c:	602a      	str	r2, [r5, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	f7fa ffa5 	bl	80013ae <_read>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_read_r+0x1e>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_read_r+0x1e>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	20013198 	.word	0x20013198

08006474 <_write_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4d07      	ldr	r5, [pc, #28]	@ (8006494 <_write_r+0x20>)
 8006478:	4604      	mov	r4, r0
 800647a:	4608      	mov	r0, r1
 800647c:	4611      	mov	r1, r2
 800647e:	2200      	movs	r2, #0
 8006480:	602a      	str	r2, [r5, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	f7fa ffb0 	bl	80013e8 <_write>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d102      	bne.n	8006492 <_write_r+0x1e>
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	b103      	cbz	r3, 8006492 <_write_r+0x1e>
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	bd38      	pop	{r3, r4, r5, pc}
 8006494:	20013198 	.word	0x20013198

08006498 <__errno>:
 8006498:	4b01      	ldr	r3, [pc, #4]	@ (80064a0 <__errno+0x8>)
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20000024 	.word	0x20000024

080064a4 <__libc_init_array>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	4d0d      	ldr	r5, [pc, #52]	@ (80064dc <__libc_init_array+0x38>)
 80064a8:	4c0d      	ldr	r4, [pc, #52]	@ (80064e0 <__libc_init_array+0x3c>)
 80064aa:	1b64      	subs	r4, r4, r5
 80064ac:	10a4      	asrs	r4, r4, #2
 80064ae:	2600      	movs	r6, #0
 80064b0:	42a6      	cmp	r6, r4
 80064b2:	d109      	bne.n	80064c8 <__libc_init_array+0x24>
 80064b4:	4d0b      	ldr	r5, [pc, #44]	@ (80064e4 <__libc_init_array+0x40>)
 80064b6:	4c0c      	ldr	r4, [pc, #48]	@ (80064e8 <__libc_init_array+0x44>)
 80064b8:	f000 fff8 	bl	80074ac <_init>
 80064bc:	1b64      	subs	r4, r4, r5
 80064be:	10a4      	asrs	r4, r4, #2
 80064c0:	2600      	movs	r6, #0
 80064c2:	42a6      	cmp	r6, r4
 80064c4:	d105      	bne.n	80064d2 <__libc_init_array+0x2e>
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064cc:	4798      	blx	r3
 80064ce:	3601      	adds	r6, #1
 80064d0:	e7ee      	b.n	80064b0 <__libc_init_array+0xc>
 80064d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d6:	4798      	blx	r3
 80064d8:	3601      	adds	r6, #1
 80064da:	e7f2      	b.n	80064c2 <__libc_init_array+0x1e>
 80064dc:	08007cf8 	.word	0x08007cf8
 80064e0:	08007cf8 	.word	0x08007cf8
 80064e4:	08007cf8 	.word	0x08007cf8
 80064e8:	08007cfc 	.word	0x08007cfc

080064ec <__retarget_lock_init_recursive>:
 80064ec:	4770      	bx	lr

080064ee <__retarget_lock_acquire_recursive>:
 80064ee:	4770      	bx	lr

080064f0 <__retarget_lock_release_recursive>:
 80064f0:	4770      	bx	lr

080064f2 <strcpy>:
 80064f2:	4603      	mov	r3, r0
 80064f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064f8:	f803 2b01 	strb.w	r2, [r3], #1
 80064fc:	2a00      	cmp	r2, #0
 80064fe:	d1f9      	bne.n	80064f4 <strcpy+0x2>
 8006500:	4770      	bx	lr

08006502 <memcpy>:
 8006502:	440a      	add	r2, r1
 8006504:	4291      	cmp	r1, r2
 8006506:	f100 33ff 	add.w	r3, r0, #4294967295
 800650a:	d100      	bne.n	800650e <memcpy+0xc>
 800650c:	4770      	bx	lr
 800650e:	b510      	push	{r4, lr}
 8006510:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006514:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006518:	4291      	cmp	r1, r2
 800651a:	d1f9      	bne.n	8006510 <memcpy+0xe>
 800651c:	bd10      	pop	{r4, pc}
	...

08006520 <__assert_func>:
 8006520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006522:	4614      	mov	r4, r2
 8006524:	461a      	mov	r2, r3
 8006526:	4b09      	ldr	r3, [pc, #36]	@ (800654c <__assert_func+0x2c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4605      	mov	r5, r0
 800652c:	68d8      	ldr	r0, [r3, #12]
 800652e:	b954      	cbnz	r4, 8006546 <__assert_func+0x26>
 8006530:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <__assert_func+0x30>)
 8006532:	461c      	mov	r4, r3
 8006534:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006538:	9100      	str	r1, [sp, #0]
 800653a:	462b      	mov	r3, r5
 800653c:	4905      	ldr	r1, [pc, #20]	@ (8006554 <__assert_func+0x34>)
 800653e:	f000 fc9f 	bl	8006e80 <fiprintf>
 8006542:	f000 fcd9 	bl	8006ef8 <abort>
 8006546:	4b04      	ldr	r3, [pc, #16]	@ (8006558 <__assert_func+0x38>)
 8006548:	e7f4      	b.n	8006534 <__assert_func+0x14>
 800654a:	bf00      	nop
 800654c:	20000024 	.word	0x20000024
 8006550:	08007cbc 	.word	0x08007cbc
 8006554:	08007c8e 	.word	0x08007c8e
 8006558:	08007c81 	.word	0x08007c81

0800655c <_free_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4605      	mov	r5, r0
 8006560:	2900      	cmp	r1, #0
 8006562:	d041      	beq.n	80065e8 <_free_r+0x8c>
 8006564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006568:	1f0c      	subs	r4, r1, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	bfb8      	it	lt
 800656e:	18e4      	addlt	r4, r4, r3
 8006570:	f000 f8e8 	bl	8006744 <__malloc_lock>
 8006574:	4a1d      	ldr	r2, [pc, #116]	@ (80065ec <_free_r+0x90>)
 8006576:	6813      	ldr	r3, [r2, #0]
 8006578:	b933      	cbnz	r3, 8006588 <_free_r+0x2c>
 800657a:	6063      	str	r3, [r4, #4]
 800657c:	6014      	str	r4, [r2, #0]
 800657e:	4628      	mov	r0, r5
 8006580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006584:	f000 b8e4 	b.w	8006750 <__malloc_unlock>
 8006588:	42a3      	cmp	r3, r4
 800658a:	d908      	bls.n	800659e <_free_r+0x42>
 800658c:	6820      	ldr	r0, [r4, #0]
 800658e:	1821      	adds	r1, r4, r0
 8006590:	428b      	cmp	r3, r1
 8006592:	bf01      	itttt	eq
 8006594:	6819      	ldreq	r1, [r3, #0]
 8006596:	685b      	ldreq	r3, [r3, #4]
 8006598:	1809      	addeq	r1, r1, r0
 800659a:	6021      	streq	r1, [r4, #0]
 800659c:	e7ed      	b.n	800657a <_free_r+0x1e>
 800659e:	461a      	mov	r2, r3
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	b10b      	cbz	r3, 80065a8 <_free_r+0x4c>
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	d9fa      	bls.n	800659e <_free_r+0x42>
 80065a8:	6811      	ldr	r1, [r2, #0]
 80065aa:	1850      	adds	r0, r2, r1
 80065ac:	42a0      	cmp	r0, r4
 80065ae:	d10b      	bne.n	80065c8 <_free_r+0x6c>
 80065b0:	6820      	ldr	r0, [r4, #0]
 80065b2:	4401      	add	r1, r0
 80065b4:	1850      	adds	r0, r2, r1
 80065b6:	4283      	cmp	r3, r0
 80065b8:	6011      	str	r1, [r2, #0]
 80065ba:	d1e0      	bne.n	800657e <_free_r+0x22>
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	6053      	str	r3, [r2, #4]
 80065c2:	4408      	add	r0, r1
 80065c4:	6010      	str	r0, [r2, #0]
 80065c6:	e7da      	b.n	800657e <_free_r+0x22>
 80065c8:	d902      	bls.n	80065d0 <_free_r+0x74>
 80065ca:	230c      	movs	r3, #12
 80065cc:	602b      	str	r3, [r5, #0]
 80065ce:	e7d6      	b.n	800657e <_free_r+0x22>
 80065d0:	6820      	ldr	r0, [r4, #0]
 80065d2:	1821      	adds	r1, r4, r0
 80065d4:	428b      	cmp	r3, r1
 80065d6:	bf04      	itt	eq
 80065d8:	6819      	ldreq	r1, [r3, #0]
 80065da:	685b      	ldreq	r3, [r3, #4]
 80065dc:	6063      	str	r3, [r4, #4]
 80065de:	bf04      	itt	eq
 80065e0:	1809      	addeq	r1, r1, r0
 80065e2:	6021      	streq	r1, [r4, #0]
 80065e4:	6054      	str	r4, [r2, #4]
 80065e6:	e7ca      	b.n	800657e <_free_r+0x22>
 80065e8:	bd38      	pop	{r3, r4, r5, pc}
 80065ea:	bf00      	nop
 80065ec:	200131a4 	.word	0x200131a4

080065f0 <malloc>:
 80065f0:	4b02      	ldr	r3, [pc, #8]	@ (80065fc <malloc+0xc>)
 80065f2:	4601      	mov	r1, r0
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	f000 b825 	b.w	8006644 <_malloc_r>
 80065fa:	bf00      	nop
 80065fc:	20000024 	.word	0x20000024

08006600 <sbrk_aligned>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	4e0f      	ldr	r6, [pc, #60]	@ (8006640 <sbrk_aligned+0x40>)
 8006604:	460c      	mov	r4, r1
 8006606:	6831      	ldr	r1, [r6, #0]
 8006608:	4605      	mov	r5, r0
 800660a:	b911      	cbnz	r1, 8006612 <sbrk_aligned+0x12>
 800660c:	f000 fc64 	bl	8006ed8 <_sbrk_r>
 8006610:	6030      	str	r0, [r6, #0]
 8006612:	4621      	mov	r1, r4
 8006614:	4628      	mov	r0, r5
 8006616:	f000 fc5f 	bl	8006ed8 <_sbrk_r>
 800661a:	1c43      	adds	r3, r0, #1
 800661c:	d103      	bne.n	8006626 <sbrk_aligned+0x26>
 800661e:	f04f 34ff 	mov.w	r4, #4294967295
 8006622:	4620      	mov	r0, r4
 8006624:	bd70      	pop	{r4, r5, r6, pc}
 8006626:	1cc4      	adds	r4, r0, #3
 8006628:	f024 0403 	bic.w	r4, r4, #3
 800662c:	42a0      	cmp	r0, r4
 800662e:	d0f8      	beq.n	8006622 <sbrk_aligned+0x22>
 8006630:	1a21      	subs	r1, r4, r0
 8006632:	4628      	mov	r0, r5
 8006634:	f000 fc50 	bl	8006ed8 <_sbrk_r>
 8006638:	3001      	adds	r0, #1
 800663a:	d1f2      	bne.n	8006622 <sbrk_aligned+0x22>
 800663c:	e7ef      	b.n	800661e <sbrk_aligned+0x1e>
 800663e:	bf00      	nop
 8006640:	200131a0 	.word	0x200131a0

08006644 <_malloc_r>:
 8006644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006648:	1ccd      	adds	r5, r1, #3
 800664a:	f025 0503 	bic.w	r5, r5, #3
 800664e:	3508      	adds	r5, #8
 8006650:	2d0c      	cmp	r5, #12
 8006652:	bf38      	it	cc
 8006654:	250c      	movcc	r5, #12
 8006656:	2d00      	cmp	r5, #0
 8006658:	4606      	mov	r6, r0
 800665a:	db01      	blt.n	8006660 <_malloc_r+0x1c>
 800665c:	42a9      	cmp	r1, r5
 800665e:	d904      	bls.n	800666a <_malloc_r+0x26>
 8006660:	230c      	movs	r3, #12
 8006662:	6033      	str	r3, [r6, #0]
 8006664:	2000      	movs	r0, #0
 8006666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800666a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006740 <_malloc_r+0xfc>
 800666e:	f000 f869 	bl	8006744 <__malloc_lock>
 8006672:	f8d8 3000 	ldr.w	r3, [r8]
 8006676:	461c      	mov	r4, r3
 8006678:	bb44      	cbnz	r4, 80066cc <_malloc_r+0x88>
 800667a:	4629      	mov	r1, r5
 800667c:	4630      	mov	r0, r6
 800667e:	f7ff ffbf 	bl	8006600 <sbrk_aligned>
 8006682:	1c43      	adds	r3, r0, #1
 8006684:	4604      	mov	r4, r0
 8006686:	d158      	bne.n	800673a <_malloc_r+0xf6>
 8006688:	f8d8 4000 	ldr.w	r4, [r8]
 800668c:	4627      	mov	r7, r4
 800668e:	2f00      	cmp	r7, #0
 8006690:	d143      	bne.n	800671a <_malloc_r+0xd6>
 8006692:	2c00      	cmp	r4, #0
 8006694:	d04b      	beq.n	800672e <_malloc_r+0xea>
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	4639      	mov	r1, r7
 800669a:	4630      	mov	r0, r6
 800669c:	eb04 0903 	add.w	r9, r4, r3
 80066a0:	f000 fc1a 	bl	8006ed8 <_sbrk_r>
 80066a4:	4581      	cmp	r9, r0
 80066a6:	d142      	bne.n	800672e <_malloc_r+0xea>
 80066a8:	6821      	ldr	r1, [r4, #0]
 80066aa:	1a6d      	subs	r5, r5, r1
 80066ac:	4629      	mov	r1, r5
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7ff ffa6 	bl	8006600 <sbrk_aligned>
 80066b4:	3001      	adds	r0, #1
 80066b6:	d03a      	beq.n	800672e <_malloc_r+0xea>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	442b      	add	r3, r5
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	f8d8 3000 	ldr.w	r3, [r8]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	bb62      	cbnz	r2, 8006720 <_malloc_r+0xdc>
 80066c6:	f8c8 7000 	str.w	r7, [r8]
 80066ca:	e00f      	b.n	80066ec <_malloc_r+0xa8>
 80066cc:	6822      	ldr	r2, [r4, #0]
 80066ce:	1b52      	subs	r2, r2, r5
 80066d0:	d420      	bmi.n	8006714 <_malloc_r+0xd0>
 80066d2:	2a0b      	cmp	r2, #11
 80066d4:	d917      	bls.n	8006706 <_malloc_r+0xc2>
 80066d6:	1961      	adds	r1, r4, r5
 80066d8:	42a3      	cmp	r3, r4
 80066da:	6025      	str	r5, [r4, #0]
 80066dc:	bf18      	it	ne
 80066de:	6059      	strne	r1, [r3, #4]
 80066e0:	6863      	ldr	r3, [r4, #4]
 80066e2:	bf08      	it	eq
 80066e4:	f8c8 1000 	streq.w	r1, [r8]
 80066e8:	5162      	str	r2, [r4, r5]
 80066ea:	604b      	str	r3, [r1, #4]
 80066ec:	4630      	mov	r0, r6
 80066ee:	f000 f82f 	bl	8006750 <__malloc_unlock>
 80066f2:	f104 000b 	add.w	r0, r4, #11
 80066f6:	1d23      	adds	r3, r4, #4
 80066f8:	f020 0007 	bic.w	r0, r0, #7
 80066fc:	1ac2      	subs	r2, r0, r3
 80066fe:	bf1c      	itt	ne
 8006700:	1a1b      	subne	r3, r3, r0
 8006702:	50a3      	strne	r3, [r4, r2]
 8006704:	e7af      	b.n	8006666 <_malloc_r+0x22>
 8006706:	6862      	ldr	r2, [r4, #4]
 8006708:	42a3      	cmp	r3, r4
 800670a:	bf0c      	ite	eq
 800670c:	f8c8 2000 	streq.w	r2, [r8]
 8006710:	605a      	strne	r2, [r3, #4]
 8006712:	e7eb      	b.n	80066ec <_malloc_r+0xa8>
 8006714:	4623      	mov	r3, r4
 8006716:	6864      	ldr	r4, [r4, #4]
 8006718:	e7ae      	b.n	8006678 <_malloc_r+0x34>
 800671a:	463c      	mov	r4, r7
 800671c:	687f      	ldr	r7, [r7, #4]
 800671e:	e7b6      	b.n	800668e <_malloc_r+0x4a>
 8006720:	461a      	mov	r2, r3
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	42a3      	cmp	r3, r4
 8006726:	d1fb      	bne.n	8006720 <_malloc_r+0xdc>
 8006728:	2300      	movs	r3, #0
 800672a:	6053      	str	r3, [r2, #4]
 800672c:	e7de      	b.n	80066ec <_malloc_r+0xa8>
 800672e:	230c      	movs	r3, #12
 8006730:	6033      	str	r3, [r6, #0]
 8006732:	4630      	mov	r0, r6
 8006734:	f000 f80c 	bl	8006750 <__malloc_unlock>
 8006738:	e794      	b.n	8006664 <_malloc_r+0x20>
 800673a:	6005      	str	r5, [r0, #0]
 800673c:	e7d6      	b.n	80066ec <_malloc_r+0xa8>
 800673e:	bf00      	nop
 8006740:	200131a4 	.word	0x200131a4

08006744 <__malloc_lock>:
 8006744:	4801      	ldr	r0, [pc, #4]	@ (800674c <__malloc_lock+0x8>)
 8006746:	f7ff bed2 	b.w	80064ee <__retarget_lock_acquire_recursive>
 800674a:	bf00      	nop
 800674c:	2001319c 	.word	0x2001319c

08006750 <__malloc_unlock>:
 8006750:	4801      	ldr	r0, [pc, #4]	@ (8006758 <__malloc_unlock+0x8>)
 8006752:	f7ff becd 	b.w	80064f0 <__retarget_lock_release_recursive>
 8006756:	bf00      	nop
 8006758:	2001319c 	.word	0x2001319c

0800675c <__ssputs_r>:
 800675c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	688e      	ldr	r6, [r1, #8]
 8006762:	461f      	mov	r7, r3
 8006764:	42be      	cmp	r6, r7
 8006766:	680b      	ldr	r3, [r1, #0]
 8006768:	4682      	mov	sl, r0
 800676a:	460c      	mov	r4, r1
 800676c:	4690      	mov	r8, r2
 800676e:	d82d      	bhi.n	80067cc <__ssputs_r+0x70>
 8006770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006778:	d026      	beq.n	80067c8 <__ssputs_r+0x6c>
 800677a:	6965      	ldr	r5, [r4, #20]
 800677c:	6909      	ldr	r1, [r1, #16]
 800677e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006782:	eba3 0901 	sub.w	r9, r3, r1
 8006786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800678a:	1c7b      	adds	r3, r7, #1
 800678c:	444b      	add	r3, r9
 800678e:	106d      	asrs	r5, r5, #1
 8006790:	429d      	cmp	r5, r3
 8006792:	bf38      	it	cc
 8006794:	461d      	movcc	r5, r3
 8006796:	0553      	lsls	r3, r2, #21
 8006798:	d527      	bpl.n	80067ea <__ssputs_r+0x8e>
 800679a:	4629      	mov	r1, r5
 800679c:	f7ff ff52 	bl	8006644 <_malloc_r>
 80067a0:	4606      	mov	r6, r0
 80067a2:	b360      	cbz	r0, 80067fe <__ssputs_r+0xa2>
 80067a4:	6921      	ldr	r1, [r4, #16]
 80067a6:	464a      	mov	r2, r9
 80067a8:	f7ff feab 	bl	8006502 <memcpy>
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80067b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	6126      	str	r6, [r4, #16]
 80067ba:	6165      	str	r5, [r4, #20]
 80067bc:	444e      	add	r6, r9
 80067be:	eba5 0509 	sub.w	r5, r5, r9
 80067c2:	6026      	str	r6, [r4, #0]
 80067c4:	60a5      	str	r5, [r4, #8]
 80067c6:	463e      	mov	r6, r7
 80067c8:	42be      	cmp	r6, r7
 80067ca:	d900      	bls.n	80067ce <__ssputs_r+0x72>
 80067cc:	463e      	mov	r6, r7
 80067ce:	6820      	ldr	r0, [r4, #0]
 80067d0:	4632      	mov	r2, r6
 80067d2:	4641      	mov	r1, r8
 80067d4:	f000 fb66 	bl	8006ea4 <memmove>
 80067d8:	68a3      	ldr	r3, [r4, #8]
 80067da:	1b9b      	subs	r3, r3, r6
 80067dc:	60a3      	str	r3, [r4, #8]
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	4433      	add	r3, r6
 80067e2:	6023      	str	r3, [r4, #0]
 80067e4:	2000      	movs	r0, #0
 80067e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ea:	462a      	mov	r2, r5
 80067ec:	f000 fb8b 	bl	8006f06 <_realloc_r>
 80067f0:	4606      	mov	r6, r0
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d1e0      	bne.n	80067b8 <__ssputs_r+0x5c>
 80067f6:	6921      	ldr	r1, [r4, #16]
 80067f8:	4650      	mov	r0, sl
 80067fa:	f7ff feaf 	bl	800655c <_free_r>
 80067fe:	230c      	movs	r3, #12
 8006800:	f8ca 3000 	str.w	r3, [sl]
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	f04f 30ff 	mov.w	r0, #4294967295
 8006810:	e7e9      	b.n	80067e6 <__ssputs_r+0x8a>
	...

08006814 <_svfiprintf_r>:
 8006814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006818:	4698      	mov	r8, r3
 800681a:	898b      	ldrh	r3, [r1, #12]
 800681c:	061b      	lsls	r3, r3, #24
 800681e:	b09d      	sub	sp, #116	@ 0x74
 8006820:	4607      	mov	r7, r0
 8006822:	460d      	mov	r5, r1
 8006824:	4614      	mov	r4, r2
 8006826:	d510      	bpl.n	800684a <_svfiprintf_r+0x36>
 8006828:	690b      	ldr	r3, [r1, #16]
 800682a:	b973      	cbnz	r3, 800684a <_svfiprintf_r+0x36>
 800682c:	2140      	movs	r1, #64	@ 0x40
 800682e:	f7ff ff09 	bl	8006644 <_malloc_r>
 8006832:	6028      	str	r0, [r5, #0]
 8006834:	6128      	str	r0, [r5, #16]
 8006836:	b930      	cbnz	r0, 8006846 <_svfiprintf_r+0x32>
 8006838:	230c      	movs	r3, #12
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	f04f 30ff 	mov.w	r0, #4294967295
 8006840:	b01d      	add	sp, #116	@ 0x74
 8006842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006846:	2340      	movs	r3, #64	@ 0x40
 8006848:	616b      	str	r3, [r5, #20]
 800684a:	2300      	movs	r3, #0
 800684c:	9309      	str	r3, [sp, #36]	@ 0x24
 800684e:	2320      	movs	r3, #32
 8006850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006854:	f8cd 800c 	str.w	r8, [sp, #12]
 8006858:	2330      	movs	r3, #48	@ 0x30
 800685a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80069f8 <_svfiprintf_r+0x1e4>
 800685e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006862:	f04f 0901 	mov.w	r9, #1
 8006866:	4623      	mov	r3, r4
 8006868:	469a      	mov	sl, r3
 800686a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800686e:	b10a      	cbz	r2, 8006874 <_svfiprintf_r+0x60>
 8006870:	2a25      	cmp	r2, #37	@ 0x25
 8006872:	d1f9      	bne.n	8006868 <_svfiprintf_r+0x54>
 8006874:	ebba 0b04 	subs.w	fp, sl, r4
 8006878:	d00b      	beq.n	8006892 <_svfiprintf_r+0x7e>
 800687a:	465b      	mov	r3, fp
 800687c:	4622      	mov	r2, r4
 800687e:	4629      	mov	r1, r5
 8006880:	4638      	mov	r0, r7
 8006882:	f7ff ff6b 	bl	800675c <__ssputs_r>
 8006886:	3001      	adds	r0, #1
 8006888:	f000 80a7 	beq.w	80069da <_svfiprintf_r+0x1c6>
 800688c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800688e:	445a      	add	r2, fp
 8006890:	9209      	str	r2, [sp, #36]	@ 0x24
 8006892:	f89a 3000 	ldrb.w	r3, [sl]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 809f 	beq.w	80069da <_svfiprintf_r+0x1c6>
 800689c:	2300      	movs	r3, #0
 800689e:	f04f 32ff 	mov.w	r2, #4294967295
 80068a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068a6:	f10a 0a01 	add.w	sl, sl, #1
 80068aa:	9304      	str	r3, [sp, #16]
 80068ac:	9307      	str	r3, [sp, #28]
 80068ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80068b4:	4654      	mov	r4, sl
 80068b6:	2205      	movs	r2, #5
 80068b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068bc:	484e      	ldr	r0, [pc, #312]	@ (80069f8 <_svfiprintf_r+0x1e4>)
 80068be:	f7f9 fc9f 	bl	8000200 <memchr>
 80068c2:	9a04      	ldr	r2, [sp, #16]
 80068c4:	b9d8      	cbnz	r0, 80068fe <_svfiprintf_r+0xea>
 80068c6:	06d0      	lsls	r0, r2, #27
 80068c8:	bf44      	itt	mi
 80068ca:	2320      	movmi	r3, #32
 80068cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068d0:	0711      	lsls	r1, r2, #28
 80068d2:	bf44      	itt	mi
 80068d4:	232b      	movmi	r3, #43	@ 0x2b
 80068d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068da:	f89a 3000 	ldrb.w	r3, [sl]
 80068de:	2b2a      	cmp	r3, #42	@ 0x2a
 80068e0:	d015      	beq.n	800690e <_svfiprintf_r+0xfa>
 80068e2:	9a07      	ldr	r2, [sp, #28]
 80068e4:	4654      	mov	r4, sl
 80068e6:	2000      	movs	r0, #0
 80068e8:	f04f 0c0a 	mov.w	ip, #10
 80068ec:	4621      	mov	r1, r4
 80068ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068f2:	3b30      	subs	r3, #48	@ 0x30
 80068f4:	2b09      	cmp	r3, #9
 80068f6:	d94b      	bls.n	8006990 <_svfiprintf_r+0x17c>
 80068f8:	b1b0      	cbz	r0, 8006928 <_svfiprintf_r+0x114>
 80068fa:	9207      	str	r2, [sp, #28]
 80068fc:	e014      	b.n	8006928 <_svfiprintf_r+0x114>
 80068fe:	eba0 0308 	sub.w	r3, r0, r8
 8006902:	fa09 f303 	lsl.w	r3, r9, r3
 8006906:	4313      	orrs	r3, r2
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	46a2      	mov	sl, r4
 800690c:	e7d2      	b.n	80068b4 <_svfiprintf_r+0xa0>
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	1d19      	adds	r1, r3, #4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	9103      	str	r1, [sp, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	bfbb      	ittet	lt
 800691a:	425b      	neglt	r3, r3
 800691c:	f042 0202 	orrlt.w	r2, r2, #2
 8006920:	9307      	strge	r3, [sp, #28]
 8006922:	9307      	strlt	r3, [sp, #28]
 8006924:	bfb8      	it	lt
 8006926:	9204      	strlt	r2, [sp, #16]
 8006928:	7823      	ldrb	r3, [r4, #0]
 800692a:	2b2e      	cmp	r3, #46	@ 0x2e
 800692c:	d10a      	bne.n	8006944 <_svfiprintf_r+0x130>
 800692e:	7863      	ldrb	r3, [r4, #1]
 8006930:	2b2a      	cmp	r3, #42	@ 0x2a
 8006932:	d132      	bne.n	800699a <_svfiprintf_r+0x186>
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	1d1a      	adds	r2, r3, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	9203      	str	r2, [sp, #12]
 800693c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006940:	3402      	adds	r4, #2
 8006942:	9305      	str	r3, [sp, #20]
 8006944:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006a08 <_svfiprintf_r+0x1f4>
 8006948:	7821      	ldrb	r1, [r4, #0]
 800694a:	2203      	movs	r2, #3
 800694c:	4650      	mov	r0, sl
 800694e:	f7f9 fc57 	bl	8000200 <memchr>
 8006952:	b138      	cbz	r0, 8006964 <_svfiprintf_r+0x150>
 8006954:	9b04      	ldr	r3, [sp, #16]
 8006956:	eba0 000a 	sub.w	r0, r0, sl
 800695a:	2240      	movs	r2, #64	@ 0x40
 800695c:	4082      	lsls	r2, r0
 800695e:	4313      	orrs	r3, r2
 8006960:	3401      	adds	r4, #1
 8006962:	9304      	str	r3, [sp, #16]
 8006964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006968:	4824      	ldr	r0, [pc, #144]	@ (80069fc <_svfiprintf_r+0x1e8>)
 800696a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800696e:	2206      	movs	r2, #6
 8006970:	f7f9 fc46 	bl	8000200 <memchr>
 8006974:	2800      	cmp	r0, #0
 8006976:	d036      	beq.n	80069e6 <_svfiprintf_r+0x1d2>
 8006978:	4b21      	ldr	r3, [pc, #132]	@ (8006a00 <_svfiprintf_r+0x1ec>)
 800697a:	bb1b      	cbnz	r3, 80069c4 <_svfiprintf_r+0x1b0>
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	3307      	adds	r3, #7
 8006980:	f023 0307 	bic.w	r3, r3, #7
 8006984:	3308      	adds	r3, #8
 8006986:	9303      	str	r3, [sp, #12]
 8006988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800698a:	4433      	add	r3, r6
 800698c:	9309      	str	r3, [sp, #36]	@ 0x24
 800698e:	e76a      	b.n	8006866 <_svfiprintf_r+0x52>
 8006990:	fb0c 3202 	mla	r2, ip, r2, r3
 8006994:	460c      	mov	r4, r1
 8006996:	2001      	movs	r0, #1
 8006998:	e7a8      	b.n	80068ec <_svfiprintf_r+0xd8>
 800699a:	2300      	movs	r3, #0
 800699c:	3401      	adds	r4, #1
 800699e:	9305      	str	r3, [sp, #20]
 80069a0:	4619      	mov	r1, r3
 80069a2:	f04f 0c0a 	mov.w	ip, #10
 80069a6:	4620      	mov	r0, r4
 80069a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ac:	3a30      	subs	r2, #48	@ 0x30
 80069ae:	2a09      	cmp	r2, #9
 80069b0:	d903      	bls.n	80069ba <_svfiprintf_r+0x1a6>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0c6      	beq.n	8006944 <_svfiprintf_r+0x130>
 80069b6:	9105      	str	r1, [sp, #20]
 80069b8:	e7c4      	b.n	8006944 <_svfiprintf_r+0x130>
 80069ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80069be:	4604      	mov	r4, r0
 80069c0:	2301      	movs	r3, #1
 80069c2:	e7f0      	b.n	80069a6 <_svfiprintf_r+0x192>
 80069c4:	ab03      	add	r3, sp, #12
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	462a      	mov	r2, r5
 80069ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006a04 <_svfiprintf_r+0x1f0>)
 80069cc:	a904      	add	r1, sp, #16
 80069ce:	4638      	mov	r0, r7
 80069d0:	f3af 8000 	nop.w
 80069d4:	1c42      	adds	r2, r0, #1
 80069d6:	4606      	mov	r6, r0
 80069d8:	d1d6      	bne.n	8006988 <_svfiprintf_r+0x174>
 80069da:	89ab      	ldrh	r3, [r5, #12]
 80069dc:	065b      	lsls	r3, r3, #25
 80069de:	f53f af2d 	bmi.w	800683c <_svfiprintf_r+0x28>
 80069e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069e4:	e72c      	b.n	8006840 <_svfiprintf_r+0x2c>
 80069e6:	ab03      	add	r3, sp, #12
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	462a      	mov	r2, r5
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <_svfiprintf_r+0x1f0>)
 80069ee:	a904      	add	r1, sp, #16
 80069f0:	4638      	mov	r0, r7
 80069f2:	f000 f879 	bl	8006ae8 <_printf_i>
 80069f6:	e7ed      	b.n	80069d4 <_svfiprintf_r+0x1c0>
 80069f8:	08007cbd 	.word	0x08007cbd
 80069fc:	08007cc7 	.word	0x08007cc7
 8006a00:	00000000 	.word	0x00000000
 8006a04:	0800675d 	.word	0x0800675d
 8006a08:	08007cc3 	.word	0x08007cc3

08006a0c <_printf_common>:
 8006a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a10:	4616      	mov	r6, r2
 8006a12:	4698      	mov	r8, r3
 8006a14:	688a      	ldr	r2, [r1, #8]
 8006a16:	690b      	ldr	r3, [r1, #16]
 8006a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	bfb8      	it	lt
 8006a20:	4613      	movlt	r3, r2
 8006a22:	6033      	str	r3, [r6, #0]
 8006a24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a28:	4607      	mov	r7, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	b10a      	cbz	r2, 8006a32 <_printf_common+0x26>
 8006a2e:	3301      	adds	r3, #1
 8006a30:	6033      	str	r3, [r6, #0]
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	0699      	lsls	r1, r3, #26
 8006a36:	bf42      	ittt	mi
 8006a38:	6833      	ldrmi	r3, [r6, #0]
 8006a3a:	3302      	addmi	r3, #2
 8006a3c:	6033      	strmi	r3, [r6, #0]
 8006a3e:	6825      	ldr	r5, [r4, #0]
 8006a40:	f015 0506 	ands.w	r5, r5, #6
 8006a44:	d106      	bne.n	8006a54 <_printf_common+0x48>
 8006a46:	f104 0a19 	add.w	sl, r4, #25
 8006a4a:	68e3      	ldr	r3, [r4, #12]
 8006a4c:	6832      	ldr	r2, [r6, #0]
 8006a4e:	1a9b      	subs	r3, r3, r2
 8006a50:	42ab      	cmp	r3, r5
 8006a52:	dc26      	bgt.n	8006aa2 <_printf_common+0x96>
 8006a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a58:	6822      	ldr	r2, [r4, #0]
 8006a5a:	3b00      	subs	r3, #0
 8006a5c:	bf18      	it	ne
 8006a5e:	2301      	movne	r3, #1
 8006a60:	0692      	lsls	r2, r2, #26
 8006a62:	d42b      	bmi.n	8006abc <_printf_common+0xb0>
 8006a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a68:	4641      	mov	r1, r8
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	47c8      	blx	r9
 8006a6e:	3001      	adds	r0, #1
 8006a70:	d01e      	beq.n	8006ab0 <_printf_common+0xa4>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	6922      	ldr	r2, [r4, #16]
 8006a76:	f003 0306 	and.w	r3, r3, #6
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	bf02      	ittt	eq
 8006a7e:	68e5      	ldreq	r5, [r4, #12]
 8006a80:	6833      	ldreq	r3, [r6, #0]
 8006a82:	1aed      	subeq	r5, r5, r3
 8006a84:	68a3      	ldr	r3, [r4, #8]
 8006a86:	bf0c      	ite	eq
 8006a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a8c:	2500      	movne	r5, #0
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	bfc4      	itt	gt
 8006a92:	1a9b      	subgt	r3, r3, r2
 8006a94:	18ed      	addgt	r5, r5, r3
 8006a96:	2600      	movs	r6, #0
 8006a98:	341a      	adds	r4, #26
 8006a9a:	42b5      	cmp	r5, r6
 8006a9c:	d11a      	bne.n	8006ad4 <_printf_common+0xc8>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e008      	b.n	8006ab4 <_printf_common+0xa8>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	4652      	mov	r2, sl
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	47c8      	blx	r9
 8006aac:	3001      	adds	r0, #1
 8006aae:	d103      	bne.n	8006ab8 <_printf_common+0xac>
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab8:	3501      	adds	r5, #1
 8006aba:	e7c6      	b.n	8006a4a <_printf_common+0x3e>
 8006abc:	18e1      	adds	r1, r4, r3
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	2030      	movs	r0, #48	@ 0x30
 8006ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ac6:	4422      	add	r2, r4
 8006ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006acc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ad0:	3302      	adds	r3, #2
 8006ad2:	e7c7      	b.n	8006a64 <_printf_common+0x58>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	4641      	mov	r1, r8
 8006ada:	4638      	mov	r0, r7
 8006adc:	47c8      	blx	r9
 8006ade:	3001      	adds	r0, #1
 8006ae0:	d0e6      	beq.n	8006ab0 <_printf_common+0xa4>
 8006ae2:	3601      	adds	r6, #1
 8006ae4:	e7d9      	b.n	8006a9a <_printf_common+0x8e>
	...

08006ae8 <_printf_i>:
 8006ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aec:	7e0f      	ldrb	r7, [r1, #24]
 8006aee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006af0:	2f78      	cmp	r7, #120	@ 0x78
 8006af2:	4691      	mov	r9, r2
 8006af4:	4680      	mov	r8, r0
 8006af6:	460c      	mov	r4, r1
 8006af8:	469a      	mov	sl, r3
 8006afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006afe:	d807      	bhi.n	8006b10 <_printf_i+0x28>
 8006b00:	2f62      	cmp	r7, #98	@ 0x62
 8006b02:	d80a      	bhi.n	8006b1a <_printf_i+0x32>
 8006b04:	2f00      	cmp	r7, #0
 8006b06:	f000 80d2 	beq.w	8006cae <_printf_i+0x1c6>
 8006b0a:	2f58      	cmp	r7, #88	@ 0x58
 8006b0c:	f000 80b9 	beq.w	8006c82 <_printf_i+0x19a>
 8006b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b18:	e03a      	b.n	8006b90 <_printf_i+0xa8>
 8006b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b1e:	2b15      	cmp	r3, #21
 8006b20:	d8f6      	bhi.n	8006b10 <_printf_i+0x28>
 8006b22:	a101      	add	r1, pc, #4	@ (adr r1, 8006b28 <_printf_i+0x40>)
 8006b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b28:	08006b81 	.word	0x08006b81
 8006b2c:	08006b95 	.word	0x08006b95
 8006b30:	08006b11 	.word	0x08006b11
 8006b34:	08006b11 	.word	0x08006b11
 8006b38:	08006b11 	.word	0x08006b11
 8006b3c:	08006b11 	.word	0x08006b11
 8006b40:	08006b95 	.word	0x08006b95
 8006b44:	08006b11 	.word	0x08006b11
 8006b48:	08006b11 	.word	0x08006b11
 8006b4c:	08006b11 	.word	0x08006b11
 8006b50:	08006b11 	.word	0x08006b11
 8006b54:	08006c95 	.word	0x08006c95
 8006b58:	08006bbf 	.word	0x08006bbf
 8006b5c:	08006c4f 	.word	0x08006c4f
 8006b60:	08006b11 	.word	0x08006b11
 8006b64:	08006b11 	.word	0x08006b11
 8006b68:	08006cb7 	.word	0x08006cb7
 8006b6c:	08006b11 	.word	0x08006b11
 8006b70:	08006bbf 	.word	0x08006bbf
 8006b74:	08006b11 	.word	0x08006b11
 8006b78:	08006b11 	.word	0x08006b11
 8006b7c:	08006c57 	.word	0x08006c57
 8006b80:	6833      	ldr	r3, [r6, #0]
 8006b82:	1d1a      	adds	r2, r3, #4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6032      	str	r2, [r6, #0]
 8006b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b90:	2301      	movs	r3, #1
 8006b92:	e09d      	b.n	8006cd0 <_printf_i+0x1e8>
 8006b94:	6833      	ldr	r3, [r6, #0]
 8006b96:	6820      	ldr	r0, [r4, #0]
 8006b98:	1d19      	adds	r1, r3, #4
 8006b9a:	6031      	str	r1, [r6, #0]
 8006b9c:	0606      	lsls	r6, r0, #24
 8006b9e:	d501      	bpl.n	8006ba4 <_printf_i+0xbc>
 8006ba0:	681d      	ldr	r5, [r3, #0]
 8006ba2:	e003      	b.n	8006bac <_printf_i+0xc4>
 8006ba4:	0645      	lsls	r5, r0, #25
 8006ba6:	d5fb      	bpl.n	8006ba0 <_printf_i+0xb8>
 8006ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bac:	2d00      	cmp	r5, #0
 8006bae:	da03      	bge.n	8006bb8 <_printf_i+0xd0>
 8006bb0:	232d      	movs	r3, #45	@ 0x2d
 8006bb2:	426d      	negs	r5, r5
 8006bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bb8:	4859      	ldr	r0, [pc, #356]	@ (8006d20 <_printf_i+0x238>)
 8006bba:	230a      	movs	r3, #10
 8006bbc:	e011      	b.n	8006be2 <_printf_i+0xfa>
 8006bbe:	6821      	ldr	r1, [r4, #0]
 8006bc0:	6833      	ldr	r3, [r6, #0]
 8006bc2:	0608      	lsls	r0, r1, #24
 8006bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bc8:	d402      	bmi.n	8006bd0 <_printf_i+0xe8>
 8006bca:	0649      	lsls	r1, r1, #25
 8006bcc:	bf48      	it	mi
 8006bce:	b2ad      	uxthmi	r5, r5
 8006bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bd2:	4853      	ldr	r0, [pc, #332]	@ (8006d20 <_printf_i+0x238>)
 8006bd4:	6033      	str	r3, [r6, #0]
 8006bd6:	bf14      	ite	ne
 8006bd8:	230a      	movne	r3, #10
 8006bda:	2308      	moveq	r3, #8
 8006bdc:	2100      	movs	r1, #0
 8006bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006be2:	6866      	ldr	r6, [r4, #4]
 8006be4:	60a6      	str	r6, [r4, #8]
 8006be6:	2e00      	cmp	r6, #0
 8006be8:	bfa2      	ittt	ge
 8006bea:	6821      	ldrge	r1, [r4, #0]
 8006bec:	f021 0104 	bicge.w	r1, r1, #4
 8006bf0:	6021      	strge	r1, [r4, #0]
 8006bf2:	b90d      	cbnz	r5, 8006bf8 <_printf_i+0x110>
 8006bf4:	2e00      	cmp	r6, #0
 8006bf6:	d04b      	beq.n	8006c90 <_printf_i+0x1a8>
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bfe:	fb03 5711 	mls	r7, r3, r1, r5
 8006c02:	5dc7      	ldrb	r7, [r0, r7]
 8006c04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c08:	462f      	mov	r7, r5
 8006c0a:	42bb      	cmp	r3, r7
 8006c0c:	460d      	mov	r5, r1
 8006c0e:	d9f4      	bls.n	8006bfa <_printf_i+0x112>
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d10b      	bne.n	8006c2c <_printf_i+0x144>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	07df      	lsls	r7, r3, #31
 8006c18:	d508      	bpl.n	8006c2c <_printf_i+0x144>
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	6861      	ldr	r1, [r4, #4]
 8006c1e:	4299      	cmp	r1, r3
 8006c20:	bfde      	ittt	le
 8006c22:	2330      	movle	r3, #48	@ 0x30
 8006c24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c2c:	1b92      	subs	r2, r2, r6
 8006c2e:	6122      	str	r2, [r4, #16]
 8006c30:	f8cd a000 	str.w	sl, [sp]
 8006c34:	464b      	mov	r3, r9
 8006c36:	aa03      	add	r2, sp, #12
 8006c38:	4621      	mov	r1, r4
 8006c3a:	4640      	mov	r0, r8
 8006c3c:	f7ff fee6 	bl	8006a0c <_printf_common>
 8006c40:	3001      	adds	r0, #1
 8006c42:	d14a      	bne.n	8006cda <_printf_i+0x1f2>
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	b004      	add	sp, #16
 8006c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	f043 0320 	orr.w	r3, r3, #32
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	4833      	ldr	r0, [pc, #204]	@ (8006d24 <_printf_i+0x23c>)
 8006c58:	2778      	movs	r7, #120	@ 0x78
 8006c5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	6831      	ldr	r1, [r6, #0]
 8006c62:	061f      	lsls	r7, r3, #24
 8006c64:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c68:	d402      	bmi.n	8006c70 <_printf_i+0x188>
 8006c6a:	065f      	lsls	r7, r3, #25
 8006c6c:	bf48      	it	mi
 8006c6e:	b2ad      	uxthmi	r5, r5
 8006c70:	6031      	str	r1, [r6, #0]
 8006c72:	07d9      	lsls	r1, r3, #31
 8006c74:	bf44      	itt	mi
 8006c76:	f043 0320 	orrmi.w	r3, r3, #32
 8006c7a:	6023      	strmi	r3, [r4, #0]
 8006c7c:	b11d      	cbz	r5, 8006c86 <_printf_i+0x19e>
 8006c7e:	2310      	movs	r3, #16
 8006c80:	e7ac      	b.n	8006bdc <_printf_i+0xf4>
 8006c82:	4827      	ldr	r0, [pc, #156]	@ (8006d20 <_printf_i+0x238>)
 8006c84:	e7e9      	b.n	8006c5a <_printf_i+0x172>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	f023 0320 	bic.w	r3, r3, #32
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	e7f6      	b.n	8006c7e <_printf_i+0x196>
 8006c90:	4616      	mov	r6, r2
 8006c92:	e7bd      	b.n	8006c10 <_printf_i+0x128>
 8006c94:	6833      	ldr	r3, [r6, #0]
 8006c96:	6825      	ldr	r5, [r4, #0]
 8006c98:	6961      	ldr	r1, [r4, #20]
 8006c9a:	1d18      	adds	r0, r3, #4
 8006c9c:	6030      	str	r0, [r6, #0]
 8006c9e:	062e      	lsls	r6, r5, #24
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	d501      	bpl.n	8006ca8 <_printf_i+0x1c0>
 8006ca4:	6019      	str	r1, [r3, #0]
 8006ca6:	e002      	b.n	8006cae <_printf_i+0x1c6>
 8006ca8:	0668      	lsls	r0, r5, #25
 8006caa:	d5fb      	bpl.n	8006ca4 <_printf_i+0x1bc>
 8006cac:	8019      	strh	r1, [r3, #0]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	6123      	str	r3, [r4, #16]
 8006cb2:	4616      	mov	r6, r2
 8006cb4:	e7bc      	b.n	8006c30 <_printf_i+0x148>
 8006cb6:	6833      	ldr	r3, [r6, #0]
 8006cb8:	1d1a      	adds	r2, r3, #4
 8006cba:	6032      	str	r2, [r6, #0]
 8006cbc:	681e      	ldr	r6, [r3, #0]
 8006cbe:	6862      	ldr	r2, [r4, #4]
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7f9 fa9c 	bl	8000200 <memchr>
 8006cc8:	b108      	cbz	r0, 8006cce <_printf_i+0x1e6>
 8006cca:	1b80      	subs	r0, r0, r6
 8006ccc:	6060      	str	r0, [r4, #4]
 8006cce:	6863      	ldr	r3, [r4, #4]
 8006cd0:	6123      	str	r3, [r4, #16]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cd8:	e7aa      	b.n	8006c30 <_printf_i+0x148>
 8006cda:	6923      	ldr	r3, [r4, #16]
 8006cdc:	4632      	mov	r2, r6
 8006cde:	4649      	mov	r1, r9
 8006ce0:	4640      	mov	r0, r8
 8006ce2:	47d0      	blx	sl
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d0ad      	beq.n	8006c44 <_printf_i+0x15c>
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	079b      	lsls	r3, r3, #30
 8006cec:	d413      	bmi.n	8006d16 <_printf_i+0x22e>
 8006cee:	68e0      	ldr	r0, [r4, #12]
 8006cf0:	9b03      	ldr	r3, [sp, #12]
 8006cf2:	4298      	cmp	r0, r3
 8006cf4:	bfb8      	it	lt
 8006cf6:	4618      	movlt	r0, r3
 8006cf8:	e7a6      	b.n	8006c48 <_printf_i+0x160>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	4649      	mov	r1, r9
 8006d00:	4640      	mov	r0, r8
 8006d02:	47d0      	blx	sl
 8006d04:	3001      	adds	r0, #1
 8006d06:	d09d      	beq.n	8006c44 <_printf_i+0x15c>
 8006d08:	3501      	adds	r5, #1
 8006d0a:	68e3      	ldr	r3, [r4, #12]
 8006d0c:	9903      	ldr	r1, [sp, #12]
 8006d0e:	1a5b      	subs	r3, r3, r1
 8006d10:	42ab      	cmp	r3, r5
 8006d12:	dcf2      	bgt.n	8006cfa <_printf_i+0x212>
 8006d14:	e7eb      	b.n	8006cee <_printf_i+0x206>
 8006d16:	2500      	movs	r5, #0
 8006d18:	f104 0619 	add.w	r6, r4, #25
 8006d1c:	e7f5      	b.n	8006d0a <_printf_i+0x222>
 8006d1e:	bf00      	nop
 8006d20:	08007cce 	.word	0x08007cce
 8006d24:	08007cdf 	.word	0x08007cdf

08006d28 <__sflush_r>:
 8006d28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	0716      	lsls	r6, r2, #28
 8006d32:	4605      	mov	r5, r0
 8006d34:	460c      	mov	r4, r1
 8006d36:	d454      	bmi.n	8006de2 <__sflush_r+0xba>
 8006d38:	684b      	ldr	r3, [r1, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dc02      	bgt.n	8006d44 <__sflush_r+0x1c>
 8006d3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dd48      	ble.n	8006dd6 <__sflush_r+0xae>
 8006d44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d46:	2e00      	cmp	r6, #0
 8006d48:	d045      	beq.n	8006dd6 <__sflush_r+0xae>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d50:	682f      	ldr	r7, [r5, #0]
 8006d52:	6a21      	ldr	r1, [r4, #32]
 8006d54:	602b      	str	r3, [r5, #0]
 8006d56:	d030      	beq.n	8006dba <__sflush_r+0x92>
 8006d58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	0759      	lsls	r1, r3, #29
 8006d5e:	d505      	bpl.n	8006d6c <__sflush_r+0x44>
 8006d60:	6863      	ldr	r3, [r4, #4]
 8006d62:	1ad2      	subs	r2, r2, r3
 8006d64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d66:	b10b      	cbz	r3, 8006d6c <__sflush_r+0x44>
 8006d68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d6a:	1ad2      	subs	r2, r2, r3
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d70:	6a21      	ldr	r1, [r4, #32]
 8006d72:	4628      	mov	r0, r5
 8006d74:	47b0      	blx	r6
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	d106      	bne.n	8006d8a <__sflush_r+0x62>
 8006d7c:	6829      	ldr	r1, [r5, #0]
 8006d7e:	291d      	cmp	r1, #29
 8006d80:	d82b      	bhi.n	8006dda <__sflush_r+0xb2>
 8006d82:	4a2a      	ldr	r2, [pc, #168]	@ (8006e2c <__sflush_r+0x104>)
 8006d84:	410a      	asrs	r2, r1
 8006d86:	07d6      	lsls	r6, r2, #31
 8006d88:	d427      	bmi.n	8006dda <__sflush_r+0xb2>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	6062      	str	r2, [r4, #4]
 8006d8e:	04d9      	lsls	r1, r3, #19
 8006d90:	6922      	ldr	r2, [r4, #16]
 8006d92:	6022      	str	r2, [r4, #0]
 8006d94:	d504      	bpl.n	8006da0 <__sflush_r+0x78>
 8006d96:	1c42      	adds	r2, r0, #1
 8006d98:	d101      	bne.n	8006d9e <__sflush_r+0x76>
 8006d9a:	682b      	ldr	r3, [r5, #0]
 8006d9c:	b903      	cbnz	r3, 8006da0 <__sflush_r+0x78>
 8006d9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006da0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006da2:	602f      	str	r7, [r5, #0]
 8006da4:	b1b9      	cbz	r1, 8006dd6 <__sflush_r+0xae>
 8006da6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006daa:	4299      	cmp	r1, r3
 8006dac:	d002      	beq.n	8006db4 <__sflush_r+0x8c>
 8006dae:	4628      	mov	r0, r5
 8006db0:	f7ff fbd4 	bl	800655c <_free_r>
 8006db4:	2300      	movs	r3, #0
 8006db6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006db8:	e00d      	b.n	8006dd6 <__sflush_r+0xae>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b0      	blx	r6
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	1c50      	adds	r0, r2, #1
 8006dc4:	d1c9      	bne.n	8006d5a <__sflush_r+0x32>
 8006dc6:	682b      	ldr	r3, [r5, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0c6      	beq.n	8006d5a <__sflush_r+0x32>
 8006dcc:	2b1d      	cmp	r3, #29
 8006dce:	d001      	beq.n	8006dd4 <__sflush_r+0xac>
 8006dd0:	2b16      	cmp	r3, #22
 8006dd2:	d11e      	bne.n	8006e12 <__sflush_r+0xea>
 8006dd4:	602f      	str	r7, [r5, #0]
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	e022      	b.n	8006e20 <__sflush_r+0xf8>
 8006dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dde:	b21b      	sxth	r3, r3
 8006de0:	e01b      	b.n	8006e1a <__sflush_r+0xf2>
 8006de2:	690f      	ldr	r7, [r1, #16]
 8006de4:	2f00      	cmp	r7, #0
 8006de6:	d0f6      	beq.n	8006dd6 <__sflush_r+0xae>
 8006de8:	0793      	lsls	r3, r2, #30
 8006dea:	680e      	ldr	r6, [r1, #0]
 8006dec:	bf08      	it	eq
 8006dee:	694b      	ldreq	r3, [r1, #20]
 8006df0:	600f      	str	r7, [r1, #0]
 8006df2:	bf18      	it	ne
 8006df4:	2300      	movne	r3, #0
 8006df6:	eba6 0807 	sub.w	r8, r6, r7
 8006dfa:	608b      	str	r3, [r1, #8]
 8006dfc:	f1b8 0f00 	cmp.w	r8, #0
 8006e00:	dde9      	ble.n	8006dd6 <__sflush_r+0xae>
 8006e02:	6a21      	ldr	r1, [r4, #32]
 8006e04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e06:	4643      	mov	r3, r8
 8006e08:	463a      	mov	r2, r7
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b0      	blx	r6
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	dc08      	bgt.n	8006e24 <__sflush_r+0xfc>
 8006e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e1a:	81a3      	strh	r3, [r4, #12]
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e24:	4407      	add	r7, r0
 8006e26:	eba8 0800 	sub.w	r8, r8, r0
 8006e2a:	e7e7      	b.n	8006dfc <__sflush_r+0xd4>
 8006e2c:	dfbffffe 	.word	0xdfbffffe

08006e30 <_fflush_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	690b      	ldr	r3, [r1, #16]
 8006e34:	4605      	mov	r5, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	b913      	cbnz	r3, 8006e40 <_fflush_r+0x10>
 8006e3a:	2500      	movs	r5, #0
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	b118      	cbz	r0, 8006e4a <_fflush_r+0x1a>
 8006e42:	6a03      	ldr	r3, [r0, #32]
 8006e44:	b90b      	cbnz	r3, 8006e4a <_fflush_r+0x1a>
 8006e46:	f7ff f99d 	bl	8006184 <__sinit>
 8006e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0f3      	beq.n	8006e3a <_fflush_r+0xa>
 8006e52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e54:	07d0      	lsls	r0, r2, #31
 8006e56:	d404      	bmi.n	8006e62 <_fflush_r+0x32>
 8006e58:	0599      	lsls	r1, r3, #22
 8006e5a:	d402      	bmi.n	8006e62 <_fflush_r+0x32>
 8006e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e5e:	f7ff fb46 	bl	80064ee <__retarget_lock_acquire_recursive>
 8006e62:	4628      	mov	r0, r5
 8006e64:	4621      	mov	r1, r4
 8006e66:	f7ff ff5f 	bl	8006d28 <__sflush_r>
 8006e6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e6c:	07da      	lsls	r2, r3, #31
 8006e6e:	4605      	mov	r5, r0
 8006e70:	d4e4      	bmi.n	8006e3c <_fflush_r+0xc>
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	059b      	lsls	r3, r3, #22
 8006e76:	d4e1      	bmi.n	8006e3c <_fflush_r+0xc>
 8006e78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e7a:	f7ff fb39 	bl	80064f0 <__retarget_lock_release_recursive>
 8006e7e:	e7dd      	b.n	8006e3c <_fflush_r+0xc>

08006e80 <fiprintf>:
 8006e80:	b40e      	push	{r1, r2, r3}
 8006e82:	b503      	push	{r0, r1, lr}
 8006e84:	4601      	mov	r1, r0
 8006e86:	ab03      	add	r3, sp, #12
 8006e88:	4805      	ldr	r0, [pc, #20]	@ (8006ea0 <fiprintf+0x20>)
 8006e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e8e:	6800      	ldr	r0, [r0, #0]
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	f000 f88f 	bl	8006fb4 <_vfiprintf_r>
 8006e96:	b002      	add	sp, #8
 8006e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e9c:	b003      	add	sp, #12
 8006e9e:	4770      	bx	lr
 8006ea0:	20000024 	.word	0x20000024

08006ea4 <memmove>:
 8006ea4:	4288      	cmp	r0, r1
 8006ea6:	b510      	push	{r4, lr}
 8006ea8:	eb01 0402 	add.w	r4, r1, r2
 8006eac:	d902      	bls.n	8006eb4 <memmove+0x10>
 8006eae:	4284      	cmp	r4, r0
 8006eb0:	4623      	mov	r3, r4
 8006eb2:	d807      	bhi.n	8006ec4 <memmove+0x20>
 8006eb4:	1e43      	subs	r3, r0, #1
 8006eb6:	42a1      	cmp	r1, r4
 8006eb8:	d008      	beq.n	8006ecc <memmove+0x28>
 8006eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ec2:	e7f8      	b.n	8006eb6 <memmove+0x12>
 8006ec4:	4402      	add	r2, r0
 8006ec6:	4601      	mov	r1, r0
 8006ec8:	428a      	cmp	r2, r1
 8006eca:	d100      	bne.n	8006ece <memmove+0x2a>
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ed6:	e7f7      	b.n	8006ec8 <memmove+0x24>

08006ed8 <_sbrk_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d06      	ldr	r5, [pc, #24]	@ (8006ef4 <_sbrk_r+0x1c>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	f7fa fad0 	bl	8001488 <_sbrk>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_sbrk_r+0x1a>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_sbrk_r+0x1a>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	20013198 	.word	0x20013198

08006ef8 <abort>:
 8006ef8:	b508      	push	{r3, lr}
 8006efa:	2006      	movs	r0, #6
 8006efc:	f000 fa2e 	bl	800735c <raise>
 8006f00:	2001      	movs	r0, #1
 8006f02:	f7fa fa49 	bl	8001398 <_exit>

08006f06 <_realloc_r>:
 8006f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0a:	4680      	mov	r8, r0
 8006f0c:	4615      	mov	r5, r2
 8006f0e:	460c      	mov	r4, r1
 8006f10:	b921      	cbnz	r1, 8006f1c <_realloc_r+0x16>
 8006f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f16:	4611      	mov	r1, r2
 8006f18:	f7ff bb94 	b.w	8006644 <_malloc_r>
 8006f1c:	b92a      	cbnz	r2, 8006f2a <_realloc_r+0x24>
 8006f1e:	f7ff fb1d 	bl	800655c <_free_r>
 8006f22:	2400      	movs	r4, #0
 8006f24:	4620      	mov	r0, r4
 8006f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f2a:	f000 fa33 	bl	8007394 <_malloc_usable_size_r>
 8006f2e:	4285      	cmp	r5, r0
 8006f30:	4606      	mov	r6, r0
 8006f32:	d802      	bhi.n	8006f3a <_realloc_r+0x34>
 8006f34:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006f38:	d8f4      	bhi.n	8006f24 <_realloc_r+0x1e>
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	f7ff fb81 	bl	8006644 <_malloc_r>
 8006f42:	4607      	mov	r7, r0
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d0ec      	beq.n	8006f22 <_realloc_r+0x1c>
 8006f48:	42b5      	cmp	r5, r6
 8006f4a:	462a      	mov	r2, r5
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	bf28      	it	cs
 8006f50:	4632      	movcs	r2, r6
 8006f52:	f7ff fad6 	bl	8006502 <memcpy>
 8006f56:	4621      	mov	r1, r4
 8006f58:	4640      	mov	r0, r8
 8006f5a:	f7ff faff 	bl	800655c <_free_r>
 8006f5e:	463c      	mov	r4, r7
 8006f60:	e7e0      	b.n	8006f24 <_realloc_r+0x1e>

08006f62 <__sfputc_r>:
 8006f62:	6893      	ldr	r3, [r2, #8]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	b410      	push	{r4}
 8006f6a:	6093      	str	r3, [r2, #8]
 8006f6c:	da08      	bge.n	8006f80 <__sfputc_r+0x1e>
 8006f6e:	6994      	ldr	r4, [r2, #24]
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	db01      	blt.n	8006f78 <__sfputc_r+0x16>
 8006f74:	290a      	cmp	r1, #10
 8006f76:	d103      	bne.n	8006f80 <__sfputc_r+0x1e>
 8006f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f7c:	f000 b932 	b.w	80071e4 <__swbuf_r>
 8006f80:	6813      	ldr	r3, [r2, #0]
 8006f82:	1c58      	adds	r0, r3, #1
 8006f84:	6010      	str	r0, [r2, #0]
 8006f86:	7019      	strb	r1, [r3, #0]
 8006f88:	4608      	mov	r0, r1
 8006f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <__sfputs_r>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	4606      	mov	r6, r0
 8006f94:	460f      	mov	r7, r1
 8006f96:	4614      	mov	r4, r2
 8006f98:	18d5      	adds	r5, r2, r3
 8006f9a:	42ac      	cmp	r4, r5
 8006f9c:	d101      	bne.n	8006fa2 <__sfputs_r+0x12>
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	e007      	b.n	8006fb2 <__sfputs_r+0x22>
 8006fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa6:	463a      	mov	r2, r7
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f7ff ffda 	bl	8006f62 <__sfputc_r>
 8006fae:	1c43      	adds	r3, r0, #1
 8006fb0:	d1f3      	bne.n	8006f9a <__sfputs_r+0xa>
 8006fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006fb4 <_vfiprintf_r>:
 8006fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb8:	460d      	mov	r5, r1
 8006fba:	b09d      	sub	sp, #116	@ 0x74
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	4698      	mov	r8, r3
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	b118      	cbz	r0, 8006fcc <_vfiprintf_r+0x18>
 8006fc4:	6a03      	ldr	r3, [r0, #32]
 8006fc6:	b90b      	cbnz	r3, 8006fcc <_vfiprintf_r+0x18>
 8006fc8:	f7ff f8dc 	bl	8006184 <__sinit>
 8006fcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fce:	07d9      	lsls	r1, r3, #31
 8006fd0:	d405      	bmi.n	8006fde <_vfiprintf_r+0x2a>
 8006fd2:	89ab      	ldrh	r3, [r5, #12]
 8006fd4:	059a      	lsls	r2, r3, #22
 8006fd6:	d402      	bmi.n	8006fde <_vfiprintf_r+0x2a>
 8006fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fda:	f7ff fa88 	bl	80064ee <__retarget_lock_acquire_recursive>
 8006fde:	89ab      	ldrh	r3, [r5, #12]
 8006fe0:	071b      	lsls	r3, r3, #28
 8006fe2:	d501      	bpl.n	8006fe8 <_vfiprintf_r+0x34>
 8006fe4:	692b      	ldr	r3, [r5, #16]
 8006fe6:	b99b      	cbnz	r3, 8007010 <_vfiprintf_r+0x5c>
 8006fe8:	4629      	mov	r1, r5
 8006fea:	4630      	mov	r0, r6
 8006fec:	f000 f938 	bl	8007260 <__swsetup_r>
 8006ff0:	b170      	cbz	r0, 8007010 <_vfiprintf_r+0x5c>
 8006ff2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ff4:	07dc      	lsls	r4, r3, #31
 8006ff6:	d504      	bpl.n	8007002 <_vfiprintf_r+0x4e>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	b01d      	add	sp, #116	@ 0x74
 8006ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007002:	89ab      	ldrh	r3, [r5, #12]
 8007004:	0598      	lsls	r0, r3, #22
 8007006:	d4f7      	bmi.n	8006ff8 <_vfiprintf_r+0x44>
 8007008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800700a:	f7ff fa71 	bl	80064f0 <__retarget_lock_release_recursive>
 800700e:	e7f3      	b.n	8006ff8 <_vfiprintf_r+0x44>
 8007010:	2300      	movs	r3, #0
 8007012:	9309      	str	r3, [sp, #36]	@ 0x24
 8007014:	2320      	movs	r3, #32
 8007016:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800701a:	f8cd 800c 	str.w	r8, [sp, #12]
 800701e:	2330      	movs	r3, #48	@ 0x30
 8007020:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80071d0 <_vfiprintf_r+0x21c>
 8007024:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007028:	f04f 0901 	mov.w	r9, #1
 800702c:	4623      	mov	r3, r4
 800702e:	469a      	mov	sl, r3
 8007030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007034:	b10a      	cbz	r2, 800703a <_vfiprintf_r+0x86>
 8007036:	2a25      	cmp	r2, #37	@ 0x25
 8007038:	d1f9      	bne.n	800702e <_vfiprintf_r+0x7a>
 800703a:	ebba 0b04 	subs.w	fp, sl, r4
 800703e:	d00b      	beq.n	8007058 <_vfiprintf_r+0xa4>
 8007040:	465b      	mov	r3, fp
 8007042:	4622      	mov	r2, r4
 8007044:	4629      	mov	r1, r5
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff ffa2 	bl	8006f90 <__sfputs_r>
 800704c:	3001      	adds	r0, #1
 800704e:	f000 80a7 	beq.w	80071a0 <_vfiprintf_r+0x1ec>
 8007052:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007054:	445a      	add	r2, fp
 8007056:	9209      	str	r2, [sp, #36]	@ 0x24
 8007058:	f89a 3000 	ldrb.w	r3, [sl]
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 809f 	beq.w	80071a0 <_vfiprintf_r+0x1ec>
 8007062:	2300      	movs	r3, #0
 8007064:	f04f 32ff 	mov.w	r2, #4294967295
 8007068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800706c:	f10a 0a01 	add.w	sl, sl, #1
 8007070:	9304      	str	r3, [sp, #16]
 8007072:	9307      	str	r3, [sp, #28]
 8007074:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007078:	931a      	str	r3, [sp, #104]	@ 0x68
 800707a:	4654      	mov	r4, sl
 800707c:	2205      	movs	r2, #5
 800707e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007082:	4853      	ldr	r0, [pc, #332]	@ (80071d0 <_vfiprintf_r+0x21c>)
 8007084:	f7f9 f8bc 	bl	8000200 <memchr>
 8007088:	9a04      	ldr	r2, [sp, #16]
 800708a:	b9d8      	cbnz	r0, 80070c4 <_vfiprintf_r+0x110>
 800708c:	06d1      	lsls	r1, r2, #27
 800708e:	bf44      	itt	mi
 8007090:	2320      	movmi	r3, #32
 8007092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007096:	0713      	lsls	r3, r2, #28
 8007098:	bf44      	itt	mi
 800709a:	232b      	movmi	r3, #43	@ 0x2b
 800709c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070a0:	f89a 3000 	ldrb.w	r3, [sl]
 80070a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80070a6:	d015      	beq.n	80070d4 <_vfiprintf_r+0x120>
 80070a8:	9a07      	ldr	r2, [sp, #28]
 80070aa:	4654      	mov	r4, sl
 80070ac:	2000      	movs	r0, #0
 80070ae:	f04f 0c0a 	mov.w	ip, #10
 80070b2:	4621      	mov	r1, r4
 80070b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070b8:	3b30      	subs	r3, #48	@ 0x30
 80070ba:	2b09      	cmp	r3, #9
 80070bc:	d94b      	bls.n	8007156 <_vfiprintf_r+0x1a2>
 80070be:	b1b0      	cbz	r0, 80070ee <_vfiprintf_r+0x13a>
 80070c0:	9207      	str	r2, [sp, #28]
 80070c2:	e014      	b.n	80070ee <_vfiprintf_r+0x13a>
 80070c4:	eba0 0308 	sub.w	r3, r0, r8
 80070c8:	fa09 f303 	lsl.w	r3, r9, r3
 80070cc:	4313      	orrs	r3, r2
 80070ce:	9304      	str	r3, [sp, #16]
 80070d0:	46a2      	mov	sl, r4
 80070d2:	e7d2      	b.n	800707a <_vfiprintf_r+0xc6>
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	1d19      	adds	r1, r3, #4
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	9103      	str	r1, [sp, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	bfbb      	ittet	lt
 80070e0:	425b      	neglt	r3, r3
 80070e2:	f042 0202 	orrlt.w	r2, r2, #2
 80070e6:	9307      	strge	r3, [sp, #28]
 80070e8:	9307      	strlt	r3, [sp, #28]
 80070ea:	bfb8      	it	lt
 80070ec:	9204      	strlt	r2, [sp, #16]
 80070ee:	7823      	ldrb	r3, [r4, #0]
 80070f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80070f2:	d10a      	bne.n	800710a <_vfiprintf_r+0x156>
 80070f4:	7863      	ldrb	r3, [r4, #1]
 80070f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80070f8:	d132      	bne.n	8007160 <_vfiprintf_r+0x1ac>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	1d1a      	adds	r2, r3, #4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	9203      	str	r2, [sp, #12]
 8007102:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007106:	3402      	adds	r4, #2
 8007108:	9305      	str	r3, [sp, #20]
 800710a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80071e0 <_vfiprintf_r+0x22c>
 800710e:	7821      	ldrb	r1, [r4, #0]
 8007110:	2203      	movs	r2, #3
 8007112:	4650      	mov	r0, sl
 8007114:	f7f9 f874 	bl	8000200 <memchr>
 8007118:	b138      	cbz	r0, 800712a <_vfiprintf_r+0x176>
 800711a:	9b04      	ldr	r3, [sp, #16]
 800711c:	eba0 000a 	sub.w	r0, r0, sl
 8007120:	2240      	movs	r2, #64	@ 0x40
 8007122:	4082      	lsls	r2, r0
 8007124:	4313      	orrs	r3, r2
 8007126:	3401      	adds	r4, #1
 8007128:	9304      	str	r3, [sp, #16]
 800712a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800712e:	4829      	ldr	r0, [pc, #164]	@ (80071d4 <_vfiprintf_r+0x220>)
 8007130:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007134:	2206      	movs	r2, #6
 8007136:	f7f9 f863 	bl	8000200 <memchr>
 800713a:	2800      	cmp	r0, #0
 800713c:	d03f      	beq.n	80071be <_vfiprintf_r+0x20a>
 800713e:	4b26      	ldr	r3, [pc, #152]	@ (80071d8 <_vfiprintf_r+0x224>)
 8007140:	bb1b      	cbnz	r3, 800718a <_vfiprintf_r+0x1d6>
 8007142:	9b03      	ldr	r3, [sp, #12]
 8007144:	3307      	adds	r3, #7
 8007146:	f023 0307 	bic.w	r3, r3, #7
 800714a:	3308      	adds	r3, #8
 800714c:	9303      	str	r3, [sp, #12]
 800714e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007150:	443b      	add	r3, r7
 8007152:	9309      	str	r3, [sp, #36]	@ 0x24
 8007154:	e76a      	b.n	800702c <_vfiprintf_r+0x78>
 8007156:	fb0c 3202 	mla	r2, ip, r2, r3
 800715a:	460c      	mov	r4, r1
 800715c:	2001      	movs	r0, #1
 800715e:	e7a8      	b.n	80070b2 <_vfiprintf_r+0xfe>
 8007160:	2300      	movs	r3, #0
 8007162:	3401      	adds	r4, #1
 8007164:	9305      	str	r3, [sp, #20]
 8007166:	4619      	mov	r1, r3
 8007168:	f04f 0c0a 	mov.w	ip, #10
 800716c:	4620      	mov	r0, r4
 800716e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007172:	3a30      	subs	r2, #48	@ 0x30
 8007174:	2a09      	cmp	r2, #9
 8007176:	d903      	bls.n	8007180 <_vfiprintf_r+0x1cc>
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0c6      	beq.n	800710a <_vfiprintf_r+0x156>
 800717c:	9105      	str	r1, [sp, #20]
 800717e:	e7c4      	b.n	800710a <_vfiprintf_r+0x156>
 8007180:	fb0c 2101 	mla	r1, ip, r1, r2
 8007184:	4604      	mov	r4, r0
 8007186:	2301      	movs	r3, #1
 8007188:	e7f0      	b.n	800716c <_vfiprintf_r+0x1b8>
 800718a:	ab03      	add	r3, sp, #12
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	462a      	mov	r2, r5
 8007190:	4b12      	ldr	r3, [pc, #72]	@ (80071dc <_vfiprintf_r+0x228>)
 8007192:	a904      	add	r1, sp, #16
 8007194:	4630      	mov	r0, r6
 8007196:	f3af 8000 	nop.w
 800719a:	4607      	mov	r7, r0
 800719c:	1c78      	adds	r0, r7, #1
 800719e:	d1d6      	bne.n	800714e <_vfiprintf_r+0x19a>
 80071a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071a2:	07d9      	lsls	r1, r3, #31
 80071a4:	d405      	bmi.n	80071b2 <_vfiprintf_r+0x1fe>
 80071a6:	89ab      	ldrh	r3, [r5, #12]
 80071a8:	059a      	lsls	r2, r3, #22
 80071aa:	d402      	bmi.n	80071b2 <_vfiprintf_r+0x1fe>
 80071ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071ae:	f7ff f99f 	bl	80064f0 <__retarget_lock_release_recursive>
 80071b2:	89ab      	ldrh	r3, [r5, #12]
 80071b4:	065b      	lsls	r3, r3, #25
 80071b6:	f53f af1f 	bmi.w	8006ff8 <_vfiprintf_r+0x44>
 80071ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071bc:	e71e      	b.n	8006ffc <_vfiprintf_r+0x48>
 80071be:	ab03      	add	r3, sp, #12
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	462a      	mov	r2, r5
 80071c4:	4b05      	ldr	r3, [pc, #20]	@ (80071dc <_vfiprintf_r+0x228>)
 80071c6:	a904      	add	r1, sp, #16
 80071c8:	4630      	mov	r0, r6
 80071ca:	f7ff fc8d 	bl	8006ae8 <_printf_i>
 80071ce:	e7e4      	b.n	800719a <_vfiprintf_r+0x1e6>
 80071d0:	08007cbd 	.word	0x08007cbd
 80071d4:	08007cc7 	.word	0x08007cc7
 80071d8:	00000000 	.word	0x00000000
 80071dc:	08006f91 	.word	0x08006f91
 80071e0:	08007cc3 	.word	0x08007cc3

080071e4 <__swbuf_r>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	460e      	mov	r6, r1
 80071e8:	4614      	mov	r4, r2
 80071ea:	4605      	mov	r5, r0
 80071ec:	b118      	cbz	r0, 80071f6 <__swbuf_r+0x12>
 80071ee:	6a03      	ldr	r3, [r0, #32]
 80071f0:	b90b      	cbnz	r3, 80071f6 <__swbuf_r+0x12>
 80071f2:	f7fe ffc7 	bl	8006184 <__sinit>
 80071f6:	69a3      	ldr	r3, [r4, #24]
 80071f8:	60a3      	str	r3, [r4, #8]
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	071a      	lsls	r2, r3, #28
 80071fe:	d501      	bpl.n	8007204 <__swbuf_r+0x20>
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	b943      	cbnz	r3, 8007216 <__swbuf_r+0x32>
 8007204:	4621      	mov	r1, r4
 8007206:	4628      	mov	r0, r5
 8007208:	f000 f82a 	bl	8007260 <__swsetup_r>
 800720c:	b118      	cbz	r0, 8007216 <__swbuf_r+0x32>
 800720e:	f04f 37ff 	mov.w	r7, #4294967295
 8007212:	4638      	mov	r0, r7
 8007214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	6922      	ldr	r2, [r4, #16]
 800721a:	1a98      	subs	r0, r3, r2
 800721c:	6963      	ldr	r3, [r4, #20]
 800721e:	b2f6      	uxtb	r6, r6
 8007220:	4283      	cmp	r3, r0
 8007222:	4637      	mov	r7, r6
 8007224:	dc05      	bgt.n	8007232 <__swbuf_r+0x4e>
 8007226:	4621      	mov	r1, r4
 8007228:	4628      	mov	r0, r5
 800722a:	f7ff fe01 	bl	8006e30 <_fflush_r>
 800722e:	2800      	cmp	r0, #0
 8007230:	d1ed      	bne.n	800720e <__swbuf_r+0x2a>
 8007232:	68a3      	ldr	r3, [r4, #8]
 8007234:	3b01      	subs	r3, #1
 8007236:	60a3      	str	r3, [r4, #8]
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	6022      	str	r2, [r4, #0]
 800723e:	701e      	strb	r6, [r3, #0]
 8007240:	6962      	ldr	r2, [r4, #20]
 8007242:	1c43      	adds	r3, r0, #1
 8007244:	429a      	cmp	r2, r3
 8007246:	d004      	beq.n	8007252 <__swbuf_r+0x6e>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	07db      	lsls	r3, r3, #31
 800724c:	d5e1      	bpl.n	8007212 <__swbuf_r+0x2e>
 800724e:	2e0a      	cmp	r6, #10
 8007250:	d1df      	bne.n	8007212 <__swbuf_r+0x2e>
 8007252:	4621      	mov	r1, r4
 8007254:	4628      	mov	r0, r5
 8007256:	f7ff fdeb 	bl	8006e30 <_fflush_r>
 800725a:	2800      	cmp	r0, #0
 800725c:	d0d9      	beq.n	8007212 <__swbuf_r+0x2e>
 800725e:	e7d6      	b.n	800720e <__swbuf_r+0x2a>

08007260 <__swsetup_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4b29      	ldr	r3, [pc, #164]	@ (8007308 <__swsetup_r+0xa8>)
 8007264:	4605      	mov	r5, r0
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	460c      	mov	r4, r1
 800726a:	b118      	cbz	r0, 8007274 <__swsetup_r+0x14>
 800726c:	6a03      	ldr	r3, [r0, #32]
 800726e:	b90b      	cbnz	r3, 8007274 <__swsetup_r+0x14>
 8007270:	f7fe ff88 	bl	8006184 <__sinit>
 8007274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007278:	0719      	lsls	r1, r3, #28
 800727a:	d422      	bmi.n	80072c2 <__swsetup_r+0x62>
 800727c:	06da      	lsls	r2, r3, #27
 800727e:	d407      	bmi.n	8007290 <__swsetup_r+0x30>
 8007280:	2209      	movs	r2, #9
 8007282:	602a      	str	r2, [r5, #0]
 8007284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007288:	81a3      	strh	r3, [r4, #12]
 800728a:	f04f 30ff 	mov.w	r0, #4294967295
 800728e:	e033      	b.n	80072f8 <__swsetup_r+0x98>
 8007290:	0758      	lsls	r0, r3, #29
 8007292:	d512      	bpl.n	80072ba <__swsetup_r+0x5a>
 8007294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007296:	b141      	cbz	r1, 80072aa <__swsetup_r+0x4a>
 8007298:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800729c:	4299      	cmp	r1, r3
 800729e:	d002      	beq.n	80072a6 <__swsetup_r+0x46>
 80072a0:	4628      	mov	r0, r5
 80072a2:	f7ff f95b 	bl	800655c <_free_r>
 80072a6:	2300      	movs	r3, #0
 80072a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	2300      	movs	r3, #0
 80072b4:	6063      	str	r3, [r4, #4]
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f043 0308 	orr.w	r3, r3, #8
 80072c0:	81a3      	strh	r3, [r4, #12]
 80072c2:	6923      	ldr	r3, [r4, #16]
 80072c4:	b94b      	cbnz	r3, 80072da <__swsetup_r+0x7a>
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80072cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072d0:	d003      	beq.n	80072da <__swsetup_r+0x7a>
 80072d2:	4621      	mov	r1, r4
 80072d4:	4628      	mov	r0, r5
 80072d6:	f000 f88b 	bl	80073f0 <__smakebuf_r>
 80072da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072de:	f013 0201 	ands.w	r2, r3, #1
 80072e2:	d00a      	beq.n	80072fa <__swsetup_r+0x9a>
 80072e4:	2200      	movs	r2, #0
 80072e6:	60a2      	str	r2, [r4, #8]
 80072e8:	6962      	ldr	r2, [r4, #20]
 80072ea:	4252      	negs	r2, r2
 80072ec:	61a2      	str	r2, [r4, #24]
 80072ee:	6922      	ldr	r2, [r4, #16]
 80072f0:	b942      	cbnz	r2, 8007304 <__swsetup_r+0xa4>
 80072f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072f6:	d1c5      	bne.n	8007284 <__swsetup_r+0x24>
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	0799      	lsls	r1, r3, #30
 80072fc:	bf58      	it	pl
 80072fe:	6962      	ldrpl	r2, [r4, #20]
 8007300:	60a2      	str	r2, [r4, #8]
 8007302:	e7f4      	b.n	80072ee <__swsetup_r+0x8e>
 8007304:	2000      	movs	r0, #0
 8007306:	e7f7      	b.n	80072f8 <__swsetup_r+0x98>
 8007308:	20000024 	.word	0x20000024

0800730c <_raise_r>:
 800730c:	291f      	cmp	r1, #31
 800730e:	b538      	push	{r3, r4, r5, lr}
 8007310:	4605      	mov	r5, r0
 8007312:	460c      	mov	r4, r1
 8007314:	d904      	bls.n	8007320 <_raise_r+0x14>
 8007316:	2316      	movs	r3, #22
 8007318:	6003      	str	r3, [r0, #0]
 800731a:	f04f 30ff 	mov.w	r0, #4294967295
 800731e:	bd38      	pop	{r3, r4, r5, pc}
 8007320:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007322:	b112      	cbz	r2, 800732a <_raise_r+0x1e>
 8007324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007328:	b94b      	cbnz	r3, 800733e <_raise_r+0x32>
 800732a:	4628      	mov	r0, r5
 800732c:	f000 f830 	bl	8007390 <_getpid_r>
 8007330:	4622      	mov	r2, r4
 8007332:	4601      	mov	r1, r0
 8007334:	4628      	mov	r0, r5
 8007336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800733a:	f000 b817 	b.w	800736c <_kill_r>
 800733e:	2b01      	cmp	r3, #1
 8007340:	d00a      	beq.n	8007358 <_raise_r+0x4c>
 8007342:	1c59      	adds	r1, r3, #1
 8007344:	d103      	bne.n	800734e <_raise_r+0x42>
 8007346:	2316      	movs	r3, #22
 8007348:	6003      	str	r3, [r0, #0]
 800734a:	2001      	movs	r0, #1
 800734c:	e7e7      	b.n	800731e <_raise_r+0x12>
 800734e:	2100      	movs	r1, #0
 8007350:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007354:	4620      	mov	r0, r4
 8007356:	4798      	blx	r3
 8007358:	2000      	movs	r0, #0
 800735a:	e7e0      	b.n	800731e <_raise_r+0x12>

0800735c <raise>:
 800735c:	4b02      	ldr	r3, [pc, #8]	@ (8007368 <raise+0xc>)
 800735e:	4601      	mov	r1, r0
 8007360:	6818      	ldr	r0, [r3, #0]
 8007362:	f7ff bfd3 	b.w	800730c <_raise_r>
 8007366:	bf00      	nop
 8007368:	20000024 	.word	0x20000024

0800736c <_kill_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d07      	ldr	r5, [pc, #28]	@ (800738c <_kill_r+0x20>)
 8007370:	2300      	movs	r3, #0
 8007372:	4604      	mov	r4, r0
 8007374:	4608      	mov	r0, r1
 8007376:	4611      	mov	r1, r2
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	f7f9 fffd 	bl	8001378 <_kill>
 800737e:	1c43      	adds	r3, r0, #1
 8007380:	d102      	bne.n	8007388 <_kill_r+0x1c>
 8007382:	682b      	ldr	r3, [r5, #0]
 8007384:	b103      	cbz	r3, 8007388 <_kill_r+0x1c>
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	bd38      	pop	{r3, r4, r5, pc}
 800738a:	bf00      	nop
 800738c:	20013198 	.word	0x20013198

08007390 <_getpid_r>:
 8007390:	f7f9 bfea 	b.w	8001368 <_getpid>

08007394 <_malloc_usable_size_r>:
 8007394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007398:	1f18      	subs	r0, r3, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	bfbc      	itt	lt
 800739e:	580b      	ldrlt	r3, [r1, r0]
 80073a0:	18c0      	addlt	r0, r0, r3
 80073a2:	4770      	bx	lr

080073a4 <__swhatbuf_r>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	460c      	mov	r4, r1
 80073a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ac:	2900      	cmp	r1, #0
 80073ae:	b096      	sub	sp, #88	@ 0x58
 80073b0:	4615      	mov	r5, r2
 80073b2:	461e      	mov	r6, r3
 80073b4:	da0d      	bge.n	80073d2 <__swhatbuf_r+0x2e>
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80073bc:	f04f 0100 	mov.w	r1, #0
 80073c0:	bf14      	ite	ne
 80073c2:	2340      	movne	r3, #64	@ 0x40
 80073c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80073c8:	2000      	movs	r0, #0
 80073ca:	6031      	str	r1, [r6, #0]
 80073cc:	602b      	str	r3, [r5, #0]
 80073ce:	b016      	add	sp, #88	@ 0x58
 80073d0:	bd70      	pop	{r4, r5, r6, pc}
 80073d2:	466a      	mov	r2, sp
 80073d4:	f000 f848 	bl	8007468 <_fstat_r>
 80073d8:	2800      	cmp	r0, #0
 80073da:	dbec      	blt.n	80073b6 <__swhatbuf_r+0x12>
 80073dc:	9901      	ldr	r1, [sp, #4]
 80073de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80073e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80073e6:	4259      	negs	r1, r3
 80073e8:	4159      	adcs	r1, r3
 80073ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073ee:	e7eb      	b.n	80073c8 <__swhatbuf_r+0x24>

080073f0 <__smakebuf_r>:
 80073f0:	898b      	ldrh	r3, [r1, #12]
 80073f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073f4:	079d      	lsls	r5, r3, #30
 80073f6:	4606      	mov	r6, r0
 80073f8:	460c      	mov	r4, r1
 80073fa:	d507      	bpl.n	800740c <__smakebuf_r+0x1c>
 80073fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	6123      	str	r3, [r4, #16]
 8007404:	2301      	movs	r3, #1
 8007406:	6163      	str	r3, [r4, #20]
 8007408:	b003      	add	sp, #12
 800740a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800740c:	ab01      	add	r3, sp, #4
 800740e:	466a      	mov	r2, sp
 8007410:	f7ff ffc8 	bl	80073a4 <__swhatbuf_r>
 8007414:	9f00      	ldr	r7, [sp, #0]
 8007416:	4605      	mov	r5, r0
 8007418:	4639      	mov	r1, r7
 800741a:	4630      	mov	r0, r6
 800741c:	f7ff f912 	bl	8006644 <_malloc_r>
 8007420:	b948      	cbnz	r0, 8007436 <__smakebuf_r+0x46>
 8007422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007426:	059a      	lsls	r2, r3, #22
 8007428:	d4ee      	bmi.n	8007408 <__smakebuf_r+0x18>
 800742a:	f023 0303 	bic.w	r3, r3, #3
 800742e:	f043 0302 	orr.w	r3, r3, #2
 8007432:	81a3      	strh	r3, [r4, #12]
 8007434:	e7e2      	b.n	80073fc <__smakebuf_r+0xc>
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	6020      	str	r0, [r4, #0]
 800743a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800743e:	81a3      	strh	r3, [r4, #12]
 8007440:	9b01      	ldr	r3, [sp, #4]
 8007442:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007446:	b15b      	cbz	r3, 8007460 <__smakebuf_r+0x70>
 8007448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800744c:	4630      	mov	r0, r6
 800744e:	f000 f81d 	bl	800748c <_isatty_r>
 8007452:	b128      	cbz	r0, 8007460 <__smakebuf_r+0x70>
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	f023 0303 	bic.w	r3, r3, #3
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	81a3      	strh	r3, [r4, #12]
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	431d      	orrs	r5, r3
 8007464:	81a5      	strh	r5, [r4, #12]
 8007466:	e7cf      	b.n	8007408 <__smakebuf_r+0x18>

08007468 <_fstat_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d07      	ldr	r5, [pc, #28]	@ (8007488 <_fstat_r+0x20>)
 800746c:	2300      	movs	r3, #0
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	4611      	mov	r1, r2
 8007474:	602b      	str	r3, [r5, #0]
 8007476:	f7f9 ffdf 	bl	8001438 <_fstat>
 800747a:	1c43      	adds	r3, r0, #1
 800747c:	d102      	bne.n	8007484 <_fstat_r+0x1c>
 800747e:	682b      	ldr	r3, [r5, #0]
 8007480:	b103      	cbz	r3, 8007484 <_fstat_r+0x1c>
 8007482:	6023      	str	r3, [r4, #0]
 8007484:	bd38      	pop	{r3, r4, r5, pc}
 8007486:	bf00      	nop
 8007488:	20013198 	.word	0x20013198

0800748c <_isatty_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4d06      	ldr	r5, [pc, #24]	@ (80074a8 <_isatty_r+0x1c>)
 8007490:	2300      	movs	r3, #0
 8007492:	4604      	mov	r4, r0
 8007494:	4608      	mov	r0, r1
 8007496:	602b      	str	r3, [r5, #0]
 8007498:	f7f9 ffde 	bl	8001458 <_isatty>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_isatty_r+0x1a>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_isatty_r+0x1a>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	20013198 	.word	0x20013198

080074ac <_init>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	bf00      	nop
 80074b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b2:	bc08      	pop	{r3}
 80074b4:	469e      	mov	lr, r3
 80074b6:	4770      	bx	lr

080074b8 <_fini>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	bf00      	nop
 80074bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074be:	bc08      	pop	{r3}
 80074c0:	469e      	mov	lr, r3
 80074c2:	4770      	bx	lr
